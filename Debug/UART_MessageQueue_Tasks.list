
UART_MessageQueue_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b714  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800b9b4  0800b9b4  0000c9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bac8  0800bac8  0000cac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bad0  0800bad0  0000cad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bad4  0800bad4  0000cad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000002c  24000000  0800bad8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a48  2400002c  0800bb04  0000d02c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004a74  0800bb04  0000da74  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d02c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d060  00000000  00000000  0000d05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003d3f  00000000  00000000  0002a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001460  00000000  00000000  0002de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000fab  00000000  00000000  0002f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004469  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001acd6  00000000  00000000  00034674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016259f  00000000  00000000  0004f34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b18e9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005494  00000000  00000000  001b192c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001b6dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400002c 	.word	0x2400002c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b99c 	.word	0x0800b99c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000030 	.word	0x24000030
 80002dc:	0800b99c 	.word	0x0800b99c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <ProcessFrame>:
void StartDefaultTask(void *argument);
void SbuttonTask(void *argument);


void ProcessFrame(uint8_t *frame, uint8_t len)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
        uint8_t led_green = frame[2];
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	73fb      	strb	r3, [r7, #15]
        uint8_t led_yellow = frame[3];
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	73bb      	strb	r3, [r7, #14]
        uint8_t led_red = frame[4];
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	737b      	strb	r3, [r7, #13]

        if (led_green == 1) BSP_LED_On(LED_GREEN);
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d103      	bne.n	8000638 <ProcessFrame+0x2c>
 8000630:	2000      	movs	r0, #0
 8000632:	f000 fcc7 	bl	8000fc4 <BSP_LED_On>
 8000636:	e002      	b.n	800063e <ProcessFrame+0x32>
        else BSP_LED_Off(LED_GREEN);
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fced 	bl	8001018 <BSP_LED_Off>

        if (led_yellow == 1) BSP_LED_On(LED_YELLOW);
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d103      	bne.n	800064c <ProcessFrame+0x40>
 8000644:	2001      	movs	r0, #1
 8000646:	f000 fcbd 	bl	8000fc4 <BSP_LED_On>
 800064a:	e002      	b.n	8000652 <ProcessFrame+0x46>
        else BSP_LED_Off(LED_YELLOW);
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fce3 	bl	8001018 <BSP_LED_Off>

        if (led_red == 1) BSP_LED_On(LED_RED);
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d103      	bne.n	8000660 <ProcessFrame+0x54>
 8000658:	2002      	movs	r0, #2
 800065a:	f000 fcb3 	bl	8000fc4 <BSP_LED_On>
        else BSP_LED_Off(LED_RED);

}
 800065e:	e002      	b.n	8000666 <ProcessFrame+0x5a>
        else BSP_LED_Off(LED_RED);
 8000660:	2002      	movs	r0, #2
 8000662:	f000 fcd9 	bl	8001018 <BSP_LED_Off>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <StartUARTEchoTask>:


void StartUARTEchoTask(void *argument)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  for(;;)
  {

	  osEventFlagsWait(uartEventFlag, 0x01, osFlagsWaitAny, osWaitForever);	//-- now commented since mutex is handling in above line
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <StartUARTEchoTask+0x48>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	2200      	movs	r2, #0
 8000682:	2101      	movs	r1, #1
 8000684:	f007 fbda 	bl	8007e3c <osEventFlagsWait>

	  osMutexAcquire(frameMutex, osWaitForever);	// the echo didnt worked when i put this line on first line in this for loop, causing deadlock and misplacing of mutex
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <StartUARTEchoTask+0x4c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f04f 31ff 	mov.w	r1, #4294967295
 8000690:	4618      	mov	r0, r3
 8000692:	f007 fcbe 	bl	8008012 <osMutexAcquire>

      HAL_UART_Transmit(&huart1, frameCopy, Frame_Length, HAL_MAX_DELAY);	// echo at the same time regarding the data recieved
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <StartUARTEchoTask+0x50>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	4908      	ldr	r1, [pc, #32]	@ (80006c4 <StartUARTEchoTask+0x54>)
 80006a4:	4808      	ldr	r0, [pc, #32]	@ (80006c8 <StartUARTEchoTask+0x58>)
 80006a6:	f004 fe3d 	bl	8005324 <HAL_UART_Transmit>

      osMutexRelease(frameMutex);
 80006aa:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <StartUARTEchoTask+0x4c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4618      	mov	r0, r3
 80006b0:	f007 fcfa 	bl	80080a8 <osMutexRelease>
	  osEventFlagsWait(uartEventFlag, 0x01, osFlagsWaitAny, osWaitForever);	//-- now commented since mutex is handling in above line
 80006b4:	bf00      	nop
 80006b6:	e7df      	b.n	8000678 <StartUARTEchoTask+0x8>
 80006b8:	24000068 	.word	0x24000068
 80006bc:	24000108 	.word	0x24000108
 80006c0:	2400006c 	.word	0x2400006c
 80006c4:	24000058 	.word	0x24000058
 80006c8:	24000070 	.word	0x24000070

080006cc <main>:

  }
}

int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  MPU_Config();
 80006d0:	f000 f9fc 	bl	8000acc <MPU_Config>
  HAL_Init();
 80006d4:	f000 fda0 	bl	8001218 <HAL_Init>
  SystemClock_Config();
 80006d8:	f000 f884 	bl	80007e4 <SystemClock_Config>
  MX_GPIO_Init();
 80006dc:	f000 f938 	bl	8000950 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006e0:	f000 f8ea 	bl	80008b8 <MX_USART1_UART_Init>

  BSP_LED_Init(LED_GREEN);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f000 fbf7 	bl	8000ed8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fbf4 	bl	8000ed8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 fbf1 	bl	8000ed8 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006f6:	2101      	movs	r1, #1
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fce1 	bl	80010c0 <BSP_PB_Init>

  HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	4919      	ldr	r1, [pc, #100]	@ (8000768 <main+0x9c>)
 8000702:	481a      	ldr	r0, [pc, #104]	@ (800076c <main+0xa0>)
 8000704:	f004 fe9c 	bl	8005440 <HAL_UART_Receive_IT>

  osKernelInitialize();
 8000708:	f007 fa3a 	bl	8007b80 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800070c:	4a18      	ldr	r2, [pc, #96]	@ (8000770 <main+0xa4>)
 800070e:	2100      	movs	r1, #0
 8000710:	4818      	ldr	r0, [pc, #96]	@ (8000774 <main+0xa8>)
 8000712:	f007 fa7f 	bl	8007c14 <osThreadNew>
 8000716:	4603      	mov	r3, r0
 8000718:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <main+0xac>)
 800071a:	6013      	str	r3, [r2, #0]
  buttonTask = osThreadNew(SbuttonTask, NULL, &buttonTask_attributes);
 800071c:	4a17      	ldr	r2, [pc, #92]	@ (800077c <main+0xb0>)
 800071e:	2100      	movs	r1, #0
 8000720:	4817      	ldr	r0, [pc, #92]	@ (8000780 <main+0xb4>)
 8000722:	f007 fa77 	bl	8007c14 <osThreadNew>
 8000726:	4603      	mov	r3, r0
 8000728:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <main+0xb8>)
 800072a:	6013      	str	r3, [r2, #0]

  uartQueueHandle = osMessageQueueNew(9, sizeof(uint8_t), &uartQueue_attributes);	// used queue to pass uart rx data without interrupt blocking the process	-- 28-08-2025
 800072c:	4a16      	ldr	r2, [pc, #88]	@ (8000788 <main+0xbc>)
 800072e:	2101      	movs	r1, #1
 8000730:	2009      	movs	r0, #9
 8000732:	f007 fcf6 	bl	8008122 <osMessageQueueNew>
 8000736:	4603      	mov	r3, r0
 8000738:	4a14      	ldr	r2, [pc, #80]	@ (800078c <main+0xc0>)
 800073a:	6013      	str	r3, [r2, #0]

  osThreadNew(StartUARTEchoTask, NULL, &uartEchoTask_attributes);
 800073c:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <main+0xc4>)
 800073e:	2100      	movs	r1, #0
 8000740:	4814      	ldr	r0, [pc, #80]	@ (8000794 <main+0xc8>)
 8000742:	f007 fa67 	bl	8007c14 <osThreadNew>

  uartEventFlag = osEventFlagsNew(NULL);	// Used OS event flag to signal amother thread.	-- 30-08-2025
 8000746:	2000      	movs	r0, #0
 8000748:	f007 faf6 	bl	8007d38 <osEventFlagsNew>
 800074c:	4603      	mov	r3, r0
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <main+0xcc>)
 8000750:	6013      	str	r3, [r2, #0]

  frameMutex = osMutexNew(NULL);	// now using mutex to lock a specific piece of code execution and not let share it with another thread until released. -- 01-09-2025
 8000752:	2000      	movs	r0, #0
 8000754:	f007 fbd7 	bl	8007f06 <osMutexNew>
 8000758:	4603      	mov	r3, r0
 800075a:	4a10      	ldr	r2, [pc, #64]	@ (800079c <main+0xd0>)
 800075c:	6013      	str	r3, [r2, #0]

  osKernelStart();
 800075e:	f007 fa33 	bl	8007bc8 <osKernelStart>

  while (1)
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <main+0x96>
 8000766:	bf00      	nop
 8000768:	2400010c 	.word	0x2400010c
 800076c:	24000070 	.word	0x24000070
 8000770:	0800ba18 	.word	0x0800ba18
 8000774:	080009e1 	.word	0x080009e1
 8000778:	24000110 	.word	0x24000110
 800077c:	0800ba60 	.word	0x0800ba60
 8000780:	08000ab1 	.word	0x08000ab1
 8000784:	24000114 	.word	0x24000114
 8000788:	0800ba00 	.word	0x0800ba00
 800078c:	24000104 	.word	0x24000104
 8000790:	0800ba3c 	.word	0x0800ba3c
 8000794:	08000671 	.word	0x08000671
 8000798:	24000068 	.word	0x24000068
 800079c:	24000108 	.word	0x24000108

080007a0 <HAL_UART_RxCpltCallback>:
  {
  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a09      	ldr	r2, [pc, #36]	@ (80007d4 <HAL_UART_RxCpltCallback+0x34>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10b      	bne.n	80007ca <HAL_UART_RxCpltCallback+0x2a>
  {
    osMessageQueuePut(uartQueueHandle, &rxByte, 0, 0);
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_UART_RxCpltCallback+0x38>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	2200      	movs	r2, #0
 80007ba:	4908      	ldr	r1, [pc, #32]	@ (80007dc <HAL_UART_RxCpltCallback+0x3c>)
 80007bc:	f007 fd24 	bl	8008208 <osMessageQueuePut>
    HAL_UART_Receive_IT(&huart1, &rxByte, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	4906      	ldr	r1, [pc, #24]	@ (80007dc <HAL_UART_RxCpltCallback+0x3c>)
 80007c4:	4806      	ldr	r0, [pc, #24]	@ (80007e0 <HAL_UART_RxCpltCallback+0x40>)
 80007c6:	f004 fe3b 	bl	8005440 <HAL_UART_Receive_IT>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40011000 	.word	0x40011000
 80007d8:	24000104 	.word	0x24000104
 80007dc:	2400010c 	.word	0x2400010c
 80007e0:	24000070 	.word	0x24000070

080007e4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00b f898 	bl	800b928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00b f892 	bl	800b928 <memset>

  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 fef1 	bl	80025ec <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b28      	ldr	r3, [pc, #160]	@ (80008b0 <SystemClock_Config+0xcc>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	4a27      	ldr	r2, [pc, #156]	@ (80008b0 <SystemClock_Config+0xcc>)
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800081a:	4b25      	ldr	r3, [pc, #148]	@ (80008b0 <SystemClock_Config+0xcc>)
 800081c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <SystemClock_Config+0xd0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800082c:	4a21      	ldr	r2, [pc, #132]	@ (80008b4 <SystemClock_Config+0xd0>)
 800082e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <SystemClock_Config+0xd0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000840:	bf00      	nop
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <SystemClock_Config+0xd0>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800084a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800084e:	d1f8      	bne.n	8000842 <SystemClock_Config+0x5e>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000854:	2301      	movs	r3, #1
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2340      	movs	r3, #64	@ 0x40
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800085c:	2300      	movs	r3, #0
 800085e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fefb 	bl	8002660 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000870:	f000 f958 	bl	8000b24 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	233f      	movs	r3, #63	@ 0x3f
 8000876:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2101      	movs	r1, #1
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fb3b 	bl	8002f14 <HAL_RCC_ClockConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a4:	f000 f93e 	bl	8000b24 <Error_Handler>
  }
}
 80008a8:	bf00      	nop
 80008aa:	3770      	adds	r7, #112	@ 0x70
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	58000400 	.word	0x58000400
 80008b4:	58024800 	.word	0x58024800

080008b8 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80008bc:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008be:	4a23      	ldr	r2, [pc, #140]	@ (800094c <MX_USART1_UART_Init+0x94>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008c2:	4b21      	ldr	r3, [pc, #132]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ee:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000900:	4811      	ldr	r0, [pc, #68]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 8000902:	f004 fcbf 	bl	8005284 <HAL_UART_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f90a 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 8000914:	f007 f835 	bl	8007982 <HAL_UARTEx_SetTxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800091e:	f000 f901 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4808      	ldr	r0, [pc, #32]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 8000926:	f007 f86a 	bl	80079fe <HAL_UARTEx_SetRxFifoThreshold>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000930:	f000 f8f8 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_USART1_UART_Init+0x90>)
 8000936:	f006 ffeb 	bl	8007910 <HAL_UARTEx_DisableFifoMode>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f8f0 	bl	8000b24 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	24000070 	.word	0x24000070
 800094c:	40011000 	.word	0x40011000

08000950 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_GPIO_Init+0x8c>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a1f      	ldr	r2, [pc, #124]	@ (80009dc <MX_GPIO_Init+0x8c>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_GPIO_Init+0x8c>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000974:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_GPIO_Init+0x8c>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <MX_GPIO_Init+0x8c>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_GPIO_Init+0x8c>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_GPIO_Init+0x8c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <MX_GPIO_Init+0x8c>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_GPIO_Init+0x8c>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <MX_GPIO_Init+0x8c>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b6:	4a09      	ldr	r2, [pc, #36]	@ (80009dc <MX_GPIO_Init+0x8c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_GPIO_Init+0x8c>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	58024400 	.word	0x58024400

080009e0 <StartDefaultTask>:



void StartDefaultTask(void *argument)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	    uint8_t index = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	73fb      	strb	r3, [r7, #15]
	    uint8_t length = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73bb      	strb	r3, [r7, #14]
	    uint8_t byte;

	    for(;;)
	    {
	        if (osMessageQueueGet(uartQueueHandle, &byte, NULL, osWaitForever) == osOK)
 80009f0:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <StartDefaultTask+0xb4>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	f107 010d 	add.w	r1, r7, #13
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	2200      	movs	r2, #0
 80009fe:	f007 fc63 	bl	80082c8 <osMessageQueueGet>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f3      	bne.n	80009f0 <StartDefaultTask+0x10>
	        {

	            buffer[index++] = byte;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	73fa      	strb	r2, [r7, #15]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	7b79      	ldrb	r1, [r7, #13]
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <StartDefaultTask+0xb8>)
 8000a14:	5499      	strb	r1, [r3, r2]

	            if (index == 1 && buffer[0] != 0x2B) {	// invalid start byte
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d105      	bne.n	8000a28 <StartDefaultTask+0x48>
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <StartDefaultTask+0xb8>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b2b      	cmp	r3, #43	@ 0x2b
 8000a22:	d001      	beq.n	8000a28 <StartDefaultTask+0x48>
	                index = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
	            }

	            if (index == 2) {
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d107      	bne.n	8000a3e <StartDefaultTask+0x5e>
	                length = buffer[1]; // store length
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <StartDefaultTask+0xb8>)
 8000a30:	785b      	ldrb	r3, [r3, #1]
 8000a32:	73bb      	strb	r3, [r7, #14]
	                if (length + 3 > 15) {
 8000a34:	7bbb      	ldrb	r3, [r7, #14]
 8000a36:	2b0c      	cmp	r3, #12
 8000a38:	d901      	bls.n	8000a3e <StartDefaultTask+0x5e>
	                    index = 0; // invalid frame, reset
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
	                }
	            }

	            // Check if full frame is received
	            if (index >= 2 && index == length)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d9d5      	bls.n	80009f0 <StartDefaultTask+0x10>
 8000a44:	7bfa      	ldrb	r2, [r7, #15]
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d1d1      	bne.n	80009f0 <StartDefaultTask+0x10>
	            {
	                    ProcessFrame(&buffer[2], length);
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <StartDefaultTask+0xbc>)
 8000a52:	f7ff fddb 	bl	800060c <ProcessFrame>

	                    osMutexAcquire(frameMutex, osWaitForever);
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <StartDefaultTask+0xc0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f007 fad7 	bl	8008012 <osMutexAcquire>
	                    Frame_Length = index;
 8000a64:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <StartDefaultTask+0xc4>)
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	7013      	strb	r3, [r2, #0]
	                    memcpy(frameCopy, buffer, index);
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	490a      	ldr	r1, [pc, #40]	@ (8000a98 <StartDefaultTask+0xb8>)
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <StartDefaultTask+0xc8>)
 8000a72:	f00a ff85 	bl	800b980 <memcpy>

	                    osMutexRelease(frameMutex);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <StartDefaultTask+0xc0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 fb14 	bl	80080a8 <osMutexRelease>

	                    osEventFlagsSet(uartEventFlag, 0x01); // -- commented this since above line uses mutex now to not share the execution steps
 8000a80:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <StartDefaultTask+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2101      	movs	r1, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 f996 	bl	8007db8 <osEventFlagsSet>

	                    index = 0; // Reset for next frame
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73fb      	strb	r3, [r7, #15]
	        if (osMessageQueueGet(uartQueueHandle, &byte, NULL, osWaitForever) == osOK)
 8000a90:	e7ae      	b.n	80009f0 <StartDefaultTask+0x10>
 8000a92:	bf00      	nop
 8000a94:	24000104 	.word	0x24000104
 8000a98:	24000048 	.word	0x24000048
 8000a9c:	2400004a 	.word	0x2400004a
 8000aa0:	24000108 	.word	0x24000108
 8000aa4:	2400006c 	.word	0x2400006c
 8000aa8:	24000058 	.word	0x24000058
 8000aac:	24000068 	.word	0x24000068

08000ab0 <SbuttonTask>:


}

void SbuttonTask(void *argument)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	    for(;;)
	    {
	    	 if(BSP_PB_GetState(0) == 1){
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 fb73 	bl	80011a4 <BSP_PB_GetState>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d1f9      	bne.n	8000ab8 <SbuttonTask+0x8>

	    		  BSP_LED_Toggle(LED_RED);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f000 fad1 	bl	800106c <BSP_LED_Toggle>
	    	 if(BSP_PB_GetState(0) == 1){
 8000aca:	e7f5      	b.n	8000ab8 <SbuttonTask+0x8>

08000acc <MPU_Config>:


}

void MPU_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]

  HAL_MPU_Disable();
 8000ade:	f000 fd49 	bl	8001574 <HAL_MPU_Disable>

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000aee:	231f      	movs	r3, #31
 8000af0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000af2:	2387      	movs	r3, #135	@ 0x87
 8000af4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000afa:	2300      	movs	r3, #0
 8000afc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000afe:	2301      	movs	r3, #1
 8000b00:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fd67 	bl	80015e4 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b16:	2004      	movs	r0, #4
 8000b18:	f000 fd44 	bl	80015a4 <HAL_MPU_Enable>
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <Error_Handler>:

void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <HAL_MspInit+0x38>)
 8000b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_MspInit+0x38>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b46:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <HAL_MspInit+0x38>)
 8000b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	210f      	movs	r1, #15
 8000b58:	f06f 0001 	mvn.w	r0, #1
 8000b5c:	f000 fcd5 	bl	800150a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	58024400 	.word	0x58024400

08000b6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0bc      	sub	sp, #240	@ 0xf0
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	22c0      	movs	r2, #192	@ 0xc0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00a fecb 	bl	800b928 <memset>
  if(huart->Instance==USART1)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a3d      	ldr	r2, [pc, #244]	@ (8000c8c <HAL_UART_MspInit+0x120>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d173      	bne.n	8000c84 <HAL_UART_MspInit+0x118>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b9c:	f04f 0201 	mov.w	r2, #1
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fd3a 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bbe:	f7ff ffb1 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc2:	4b33      	ldr	r3, [pc, #204]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bc8:	4a31      	ldr	r2, [pc, #196]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b24      	ldr	r3, [pc, #144]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	4a22      	ldr	r2, [pc, #136]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0e:	4b20      	ldr	r3, [pc, #128]	@ (8000c90 <HAL_UART_MspInit+0x124>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c36:	2304      	movs	r3, #4
 8000c38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c40:	4619      	mov	r1, r3
 8000c42:	4814      	ldr	r0, [pc, #80]	@ (8000c94 <HAL_UART_MspInit+0x128>)
 8000c44:	f001 fad6 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c62:	2307      	movs	r3, #7
 8000c64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480a      	ldr	r0, [pc, #40]	@ (8000c98 <HAL_UART_MspInit+0x12c>)
 8000c70:	f001 fac0 	bl	80021f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2105      	movs	r1, #5
 8000c78:	2025      	movs	r0, #37	@ 0x25
 8000c7a:	f000 fc46 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c7e:	2025      	movs	r0, #37	@ 0x25
 8000c80:	f000 fc5d 	bl	800153e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c84:	bf00      	nop
 8000c86:	37f0      	adds	r7, #240	@ 0xf0
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020400 	.word	0x58020400
 8000c98:	58020000 	.word	0x58020000

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 fb11 	bl	80012fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cda:	f009 fc6f 	bl	800a5bc <xTaskGetSchedulerState>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d001      	beq.n	8000ce8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ce4:	f00a fba0 	bl	800b428 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <USART1_IRQHandler+0x10>)
 8000cf2:	f004 fbf1 	bl	80054d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000070 	.word	0x24000070

08000d00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 fa63 	bl	80011d0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d14:	4b43      	ldr	r3, [pc, #268]	@ (8000e24 <SystemInit+0x114>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	4a42      	ldr	r2, [pc, #264]	@ (8000e24 <SystemInit+0x114>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d24:	4b40      	ldr	r3, [pc, #256]	@ (8000e28 <SystemInit+0x118>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 030f 	and.w	r3, r3, #15
 8000d2c:	2b06      	cmp	r3, #6
 8000d2e:	d807      	bhi.n	8000d40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d30:	4b3d      	ldr	r3, [pc, #244]	@ (8000e28 <SystemInit+0x118>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f023 030f 	bic.w	r3, r3, #15
 8000d38:	4a3b      	ldr	r2, [pc, #236]	@ (8000e28 <SystemInit+0x118>)
 8000d3a:	f043 0307 	orr.w	r3, r3, #7
 8000d3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d40:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <SystemInit+0x11c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a39      	ldr	r2, [pc, #228]	@ (8000e2c <SystemInit+0x11c>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d4c:	4b37      	ldr	r3, [pc, #220]	@ (8000e2c <SystemInit+0x11c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d52:	4b36      	ldr	r3, [pc, #216]	@ (8000e2c <SystemInit+0x11c>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4935      	ldr	r1, [pc, #212]	@ (8000e2c <SystemInit+0x11c>)
 8000d58:	4b35      	ldr	r3, [pc, #212]	@ (8000e30 <SystemInit+0x120>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <SystemInit+0x118>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <SystemInit+0x118>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f023 030f 	bic.w	r3, r3, #15
 8000d72:	4a2d      	ldr	r2, [pc, #180]	@ (8000e28 <SystemInit+0x118>)
 8000d74:	f043 0307 	orr.w	r3, r3, #7
 8000d78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <SystemInit+0x11c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <SystemInit+0x11c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d86:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <SystemInit+0x11c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <SystemInit+0x11c>)
 8000d8e:	4a29      	ldr	r2, [pc, #164]	@ (8000e34 <SystemInit+0x124>)
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d92:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <SystemInit+0x11c>)
 8000d94:	4a28      	ldr	r2, [pc, #160]	@ (8000e38 <SystemInit+0x128>)
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d98:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <SystemInit+0x11c>)
 8000d9a:	4a28      	ldr	r2, [pc, #160]	@ (8000e3c <SystemInit+0x12c>)
 8000d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d9e:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <SystemInit+0x11c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da4:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <SystemInit+0x11c>)
 8000da6:	4a25      	ldr	r2, [pc, #148]	@ (8000e3c <SystemInit+0x12c>)
 8000da8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000daa:	4b20      	ldr	r3, [pc, #128]	@ (8000e2c <SystemInit+0x11c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <SystemInit+0x11c>)
 8000db2:	4a22      	ldr	r2, [pc, #136]	@ (8000e3c <SystemInit+0x12c>)
 8000db4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <SystemInit+0x11c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <SystemInit+0x11c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e2c <SystemInit+0x11c>)
 8000dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <SystemInit+0x11c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dce:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <SystemInit+0x130>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <SystemInit+0x134>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000dda:	d202      	bcs.n	8000de2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <SystemInit+0x138>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000de2:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <SystemInit+0x11c>)
 8000de4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d113      	bne.n	8000e18 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <SystemInit+0x11c>)
 8000df2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000df6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <SystemInit+0x11c>)
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dfc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <SystemInit+0x13c>)
 8000e02:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e06:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <SystemInit+0x11c>)
 8000e0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <SystemInit+0x11c>)
 8000e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e14:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00
 8000e28:	52002000 	.word	0x52002000
 8000e2c:	58024400 	.word	0x58024400
 8000e30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e34:	02020200 	.word	0x02020200
 8000e38:	01ff0000 	.word	0x01ff0000
 8000e3c:	01010280 	.word	0x01010280
 8000e40:	5c001000 	.word	0x5c001000
 8000e44:	ffff0000 	.word	0xffff0000
 8000e48:	51008108 	.word	0x51008108
 8000e4c:	52004000 	.word	0x52004000

08000e50 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <ExitRun0Mode+0x2c>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <ExitRun0Mode+0x2c>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e60:	bf00      	nop
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <ExitRun0Mode+0x2c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	58024800 	.word	0x58024800

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ebc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e84:	f7ff ffe4 	bl	8000e50 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e88:	f7ff ff42 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f00a fd41 	bl	800b938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fc09 	bl	80006cc <main>
  bx  lr
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ec0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ec4:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000ec8:	0800bad8 	.word	0x0800bad8
  ldr r2, =_sbss
 8000ecc:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000ed0:	24004a74 	.word	0x24004a74

08000ed4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC3_IRQHandler>
	...

08000ed8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <BSP_LED_Init+0x28>
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d006      	beq.n	8000f00 <BSP_LED_Init+0x28>
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d003      	beq.n	8000f00 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ef8:	f06f 0301 	mvn.w	r3, #1
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000efe:	e055      	b.n	8000fac <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10f      	bne.n	8000f26 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f06:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	e021      	b.n	8000f6a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10f      	bne.n	8000f4c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f2c:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	e00e      	b.n	8000f6a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <BSP_LED_Init+0xe0>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a13      	ldr	r2, [pc, #76]	@ (8000fbc <BSP_LED_Init+0xe4>)
 8000f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f72:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <BSP_LED_Init+0xe8>)
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	f107 0218 	add.w	r2, r7, #24
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 f930 	bl	80021f4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <BSP_LED_Init+0xe8>)
 8000f98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <BSP_LED_Init+0xe4>)
 8000fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f001 faec 	bl	8002584 <HAL_GPIO_WritePin>
  }

  return ret;
 8000fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3730      	adds	r7, #48	@ 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	0800ba94 	.word	0x0800ba94
 8000fc0:	24000008 	.word	0x24000008

08000fc4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d009      	beq.n	8000fec <BSP_LED_On+0x28>
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d006      	beq.n	8000fec <BSP_LED_On+0x28>
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d003      	beq.n	8000fec <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fe4:	f06f 0301 	mvn.w	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	e00b      	b.n	8001004 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <BSP_LED_On+0x4c>)
 8000ff0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <BSP_LED_On+0x50>)
 8000ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4619      	mov	r1, r3
 8001000:	f001 fac0 	bl	8002584 <HAL_GPIO_WritePin>
  }

  return ret;
 8001004:	68fb      	ldr	r3, [r7, #12]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	24000008 	.word	0x24000008
 8001014:	0800ba94 	.word	0x0800ba94

08001018 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d009      	beq.n	8001040 <BSP_LED_Off+0x28>
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d006      	beq.n	8001040 <BSP_LED_Off+0x28>
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d003      	beq.n	8001040 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001038:	f06f 0301 	mvn.w	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	e00b      	b.n	8001058 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <BSP_LED_Off+0x4c>)
 8001044:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <BSP_LED_Off+0x50>)
 800104c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	f001 fa96 	bl	8002584 <HAL_GPIO_WritePin>
  }

  return ret;
 8001058:	68fb      	ldr	r3, [r7, #12]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	24000008 	.word	0x24000008
 8001068:	0800ba94 	.word	0x0800ba94

0800106c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d009      	beq.n	8001094 <BSP_LED_Toggle+0x28>
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d006      	beq.n	8001094 <BSP_LED_Toggle+0x28>
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d003      	beq.n	8001094 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800108c:	f06f 0301 	mvn.w	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e00b      	b.n	80010ac <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <BSP_LED_Toggle+0x4c>)
 8001098:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4907      	ldr	r1, [pc, #28]	@ (80010bc <BSP_LED_Toggle+0x50>)
 80010a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010a4:	4619      	mov	r1, r3
 80010a6:	4610      	mov	r0, r2
 80010a8:	f001 fa85 	bl	80025b6 <HAL_GPIO_TogglePin>
  }

  return ret;
 80010ac:	68fb      	ldr	r3, [r7, #12]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24000008 	.word	0x24000008
 80010bc:	0800ba94 	.word	0x0800ba94

080010c0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	460a      	mov	r2, r1
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80010d0:	4b2e      	ldr	r3, [pc, #184]	@ (800118c <BSP_PB_Init+0xcc>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	4a2d      	ldr	r2, [pc, #180]	@ (800118c <BSP_PB_Init+0xcc>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <BSP_PB_Init+0xcc>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80010ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <BSP_PB_Init+0xd0>)
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f001 f86d 	bl	80021f4 <HAL_GPIO_Init>
 800111a:	e031      	b.n	8001180 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800111c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001120:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4a1a      	ldr	r2, [pc, #104]	@ (8001190 <BSP_PB_Init+0xd0>)
 8001126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112a:	f107 020c 	add.w	r2, r7, #12
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f001 f85f 	bl	80021f4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4a16      	ldr	r2, [pc, #88]	@ (8001194 <BSP_PB_Init+0xd4>)
 800113c:	441a      	add	r2, r3
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4915      	ldr	r1, [pc, #84]	@ (8001198 <BSP_PB_Init+0xd8>)
 8001142:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001146:	4619      	mov	r1, r3
 8001148:	4610      	mov	r0, r2
 800114a:	f001 f80e 	bl	800216a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <BSP_PB_Init+0xd4>)
 8001154:	1898      	adds	r0, r3, r2
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4a10      	ldr	r2, [pc, #64]	@ (800119c <BSP_PB_Init+0xdc>)
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	461a      	mov	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	f000 ffe3 	bl	800212c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001166:	2028      	movs	r0, #40	@ 0x28
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <BSP_PB_Init+0xe0>)
 800116c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	f000 f9c9 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001178:	2328      	movs	r3, #40	@ 0x28
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f9df 	bl	800153e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3720      	adds	r7, #32
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	58024400 	.word	0x58024400
 8001190:	24000014 	.word	0x24000014
 8001194:	24000118 	.word	0x24000118
 8001198:	0800ba9c 	.word	0x0800ba9c
 800119c:	24000018 	.word	0x24000018
 80011a0:	2400001c 	.word	0x2400001c

080011a4 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: Wakeup Push Button
  * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <BSP_PB_GetState+0x28>)
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 f9c9 	bl	8002554 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	24000014 	.word	0x24000014

080011d0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <BSP_PB_IRQHandler+0x20>)
 80011e0:	4413      	add	r3, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 ffd6 	bl	8002194 <HAL_EXTI_IRQHandler>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	24000118 	.word	0x24000118

080011f4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fff0 	bl	80011f4 <BSP_PB_Callback>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121e:	2003      	movs	r0, #3
 8001220:	f000 f968 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001224:	f002 f82c 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8001228:	4602      	mov	r2, r0
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_Init+0x68>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	4913      	ldr	r1, [pc, #76]	@ (8001284 <HAL_Init+0x6c>)
 8001236:	5ccb      	ldrb	r3, [r1, r3]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	fa22 f303 	lsr.w	r3, r2, r3
 8001240:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_Init+0x68>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_Init+0x6c>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <HAL_Init+0x70>)
 800125a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800125c:	4a0b      	ldr	r2, [pc, #44]	@ (800128c <HAL_Init+0x74>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	200f      	movs	r0, #15
 8001264:	f000 f814 	bl	8001290 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e002      	b.n	8001278 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001272:	f7ff fc5d 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	0800ba84 	.word	0x0800ba84
 8001288:	24000004 	.word	0x24000004
 800128c:	24000000 	.word	0x24000000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_InitTick+0x60>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e021      	b.n	80012e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_InitTick+0x64>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <HAL_InitTick+0x60>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f94d 	bl	800155a <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 f917 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_InitTick+0x68>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	24000024 	.word	0x24000024
 80012f4:	24000000 	.word	0x24000000
 80012f8:	24000020 	.word	0x24000020

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	24000024 	.word	0x24000024
 8001320:	24000120 	.word	0x24000120

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	24000120 	.word	0x24000120

0800133c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_GetREVID+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0c1b      	lsrs	r3, r3, #16
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	5c001000 	.word	0x5c001000

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	4313      	orrs	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <__NVIC_SetPriorityGrouping+0x40>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	05fa0000 	.word	0x05fa0000

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	@ (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	@ (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff40 	bl	800139c <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff90 	bl	8001448 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5f 	bl	80013f4 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff33 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffa4 	bl	80014b0 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001578:	f3bf 8f5f 	dmb	sy
}
 800157c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <HAL_MPU_Disable+0x28>)
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	4a06      	ldr	r2, [pc, #24]	@ (800159c <HAL_MPU_Disable+0x28>)
 8001584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001588:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_MPU_Disable+0x2c>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	e000ed90 	.word	0xe000ed90

080015a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015ac:	4a0b      	ldr	r2, [pc, #44]	@ (80015dc <HAL_MPU_Enable+0x38>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_MPU_Enable+0x3c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	4a09      	ldr	r2, [pc, #36]	@ (80015e0 <HAL_MPU_Enable+0x3c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015c2:	f3bf 8f4f 	dsb	sy
}
 80015c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015c8:	f3bf 8f6f 	isb	sy
}
 80015cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed90 	.word	0xe000ed90
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	785a      	ldrb	r2, [r3, #1]
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 80015f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	4a19      	ldr	r2, [pc, #100]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001600:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7b1b      	ldrb	r3, [r3, #12]
 800160c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7adb      	ldrb	r3, [r3, #11]
 8001612:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001614:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7a9b      	ldrb	r3, [r3, #10]
 800161a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800161c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7b5b      	ldrb	r3, [r3, #13]
 8001622:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001624:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7b9b      	ldrb	r3, [r3, #14]
 800162a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800162c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7bdb      	ldrb	r3, [r3, #15]
 8001632:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001634:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7a5b      	ldrb	r3, [r3, #9]
 800163a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800163c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7a1b      	ldrb	r3, [r3, #8]
 8001642:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001644:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800164e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001650:	6113      	str	r3, [r2, #16]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed90 	.word	0xe000ed90

08001664 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fe5a 	bl	8001324 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e2dc      	b.n	8001c36 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d008      	beq.n	800169a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2280      	movs	r2, #128	@ 0x80
 800168c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e2cd      	b.n	8001c36 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a76      	ldr	r2, [pc, #472]	@ (8001878 <HAL_DMA_Abort+0x214>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d04a      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a74      	ldr	r2, [pc, #464]	@ (800187c <HAL_DMA_Abort+0x218>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d045      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a73      	ldr	r2, [pc, #460]	@ (8001880 <HAL_DMA_Abort+0x21c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d040      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a71      	ldr	r2, [pc, #452]	@ (8001884 <HAL_DMA_Abort+0x220>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d03b      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a70      	ldr	r2, [pc, #448]	@ (8001888 <HAL_DMA_Abort+0x224>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d036      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	@ (800188c <HAL_DMA_Abort+0x228>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d031      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6d      	ldr	r2, [pc, #436]	@ (8001890 <HAL_DMA_Abort+0x22c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d02c      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6b      	ldr	r2, [pc, #428]	@ (8001894 <HAL_DMA_Abort+0x230>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d027      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a6a      	ldr	r2, [pc, #424]	@ (8001898 <HAL_DMA_Abort+0x234>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d022      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a68      	ldr	r2, [pc, #416]	@ (800189c <HAL_DMA_Abort+0x238>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d01d      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a67      	ldr	r2, [pc, #412]	@ (80018a0 <HAL_DMA_Abort+0x23c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d018      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a65      	ldr	r2, [pc, #404]	@ (80018a4 <HAL_DMA_Abort+0x240>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a64      	ldr	r2, [pc, #400]	@ (80018a8 <HAL_DMA_Abort+0x244>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00e      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a62      	ldr	r2, [pc, #392]	@ (80018ac <HAL_DMA_Abort+0x248>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d009      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a61      	ldr	r2, [pc, #388]	@ (80018b0 <HAL_DMA_Abort+0x24c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d004      	beq.n	800173a <HAL_DMA_Abort+0xd6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a5f      	ldr	r2, [pc, #380]	@ (80018b4 <HAL_DMA_Abort+0x250>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_DMA_Abort+0xda>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_DMA_Abort+0xdc>
 800173e:	2300      	movs	r3, #0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 021e 	bic.w	r2, r2, #30
 8001752:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001762:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e00a      	b.n	8001782 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 020e 	bic.w	r2, r2, #14
 800177a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a3c      	ldr	r2, [pc, #240]	@ (8001878 <HAL_DMA_Abort+0x214>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d072      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a3a      	ldr	r2, [pc, #232]	@ (800187c <HAL_DMA_Abort+0x218>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d06d      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a39      	ldr	r2, [pc, #228]	@ (8001880 <HAL_DMA_Abort+0x21c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d068      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a37      	ldr	r2, [pc, #220]	@ (8001884 <HAL_DMA_Abort+0x220>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d063      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a36      	ldr	r2, [pc, #216]	@ (8001888 <HAL_DMA_Abort+0x224>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d05e      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a34      	ldr	r2, [pc, #208]	@ (800188c <HAL_DMA_Abort+0x228>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d059      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a33      	ldr	r2, [pc, #204]	@ (8001890 <HAL_DMA_Abort+0x22c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d054      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a31      	ldr	r2, [pc, #196]	@ (8001894 <HAL_DMA_Abort+0x230>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d04f      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a30      	ldr	r2, [pc, #192]	@ (8001898 <HAL_DMA_Abort+0x234>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04a      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2e      	ldr	r2, [pc, #184]	@ (800189c <HAL_DMA_Abort+0x238>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d045      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a2d      	ldr	r2, [pc, #180]	@ (80018a0 <HAL_DMA_Abort+0x23c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d040      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2b      	ldr	r2, [pc, #172]	@ (80018a4 <HAL_DMA_Abort+0x240>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d03b      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a2a      	ldr	r2, [pc, #168]	@ (80018a8 <HAL_DMA_Abort+0x244>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d036      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a28      	ldr	r2, [pc, #160]	@ (80018ac <HAL_DMA_Abort+0x248>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d031      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a27      	ldr	r2, [pc, #156]	@ (80018b0 <HAL_DMA_Abort+0x24c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d02c      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a25      	ldr	r2, [pc, #148]	@ (80018b4 <HAL_DMA_Abort+0x250>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d027      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_DMA_Abort+0x254>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d022      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <HAL_DMA_Abort+0x258>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01d      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a21      	ldr	r2, [pc, #132]	@ (80018c0 <HAL_DMA_Abort+0x25c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d018      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1f      	ldr	r2, [pc, #124]	@ (80018c4 <HAL_DMA_Abort+0x260>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d013      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1e      	ldr	r2, [pc, #120]	@ (80018c8 <HAL_DMA_Abort+0x264>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d00e      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a1c      	ldr	r2, [pc, #112]	@ (80018cc <HAL_DMA_Abort+0x268>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d009      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a1b      	ldr	r2, [pc, #108]	@ (80018d0 <HAL_DMA_Abort+0x26c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d004      	beq.n	8001872 <HAL_DMA_Abort+0x20e>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a19      	ldr	r2, [pc, #100]	@ (80018d4 <HAL_DMA_Abort+0x270>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d132      	bne.n	80018d8 <HAL_DMA_Abort+0x274>
 8001872:	2301      	movs	r3, #1
 8001874:	e031      	b.n	80018da <HAL_DMA_Abort+0x276>
 8001876:	bf00      	nop
 8001878:	40020010 	.word	0x40020010
 800187c:	40020028 	.word	0x40020028
 8001880:	40020040 	.word	0x40020040
 8001884:	40020058 	.word	0x40020058
 8001888:	40020070 	.word	0x40020070
 800188c:	40020088 	.word	0x40020088
 8001890:	400200a0 	.word	0x400200a0
 8001894:	400200b8 	.word	0x400200b8
 8001898:	40020410 	.word	0x40020410
 800189c:	40020428 	.word	0x40020428
 80018a0:	40020440 	.word	0x40020440
 80018a4:	40020458 	.word	0x40020458
 80018a8:	40020470 	.word	0x40020470
 80018ac:	40020488 	.word	0x40020488
 80018b0:	400204a0 	.word	0x400204a0
 80018b4:	400204b8 	.word	0x400204b8
 80018b8:	58025408 	.word	0x58025408
 80018bc:	5802541c 	.word	0x5802541c
 80018c0:	58025430 	.word	0x58025430
 80018c4:	58025444 	.word	0x58025444
 80018c8:	58025458 	.word	0x58025458
 80018cc:	5802546c 	.word	0x5802546c
 80018d0:	58025480 	.word	0x58025480
 80018d4:	58025494 	.word	0x58025494
 80018d8:	2300      	movs	r3, #0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6d      	ldr	r2, [pc, #436]	@ (8001aa8 <HAL_DMA_Abort+0x444>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d04a      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6b      	ldr	r2, [pc, #428]	@ (8001aac <HAL_DMA_Abort+0x448>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d045      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6a      	ldr	r2, [pc, #424]	@ (8001ab0 <HAL_DMA_Abort+0x44c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d040      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a68      	ldr	r2, [pc, #416]	@ (8001ab4 <HAL_DMA_Abort+0x450>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d03b      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a67      	ldr	r2, [pc, #412]	@ (8001ab8 <HAL_DMA_Abort+0x454>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d036      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a65      	ldr	r2, [pc, #404]	@ (8001abc <HAL_DMA_Abort+0x458>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d031      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a64      	ldr	r2, [pc, #400]	@ (8001ac0 <HAL_DMA_Abort+0x45c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d02c      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a62      	ldr	r2, [pc, #392]	@ (8001ac4 <HAL_DMA_Abort+0x460>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d027      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a61      	ldr	r2, [pc, #388]	@ (8001ac8 <HAL_DMA_Abort+0x464>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d022      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a5f      	ldr	r2, [pc, #380]	@ (8001acc <HAL_DMA_Abort+0x468>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01d      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad0 <HAL_DMA_Abort+0x46c>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d018      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad4 <HAL_DMA_Abort+0x470>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad8 <HAL_DMA_Abort+0x474>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d00e      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a59      	ldr	r2, [pc, #356]	@ (8001adc <HAL_DMA_Abort+0x478>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d009      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a58      	ldr	r2, [pc, #352]	@ (8001ae0 <HAL_DMA_Abort+0x47c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d004      	beq.n	800198e <HAL_DMA_Abort+0x32a>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a56      	ldr	r2, [pc, #344]	@ (8001ae4 <HAL_DMA_Abort+0x480>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d108      	bne.n	80019a0 <HAL_DMA_Abort+0x33c>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0201 	bic.w	r2, r2, #1
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e007      	b.n	80019b0 <HAL_DMA_Abort+0x34c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019b0:	e013      	b.n	80019da <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fcb7 	bl	8001324 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d90c      	bls.n	80019da <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e12d      	b.n	8001c36 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1e5      	bne.n	80019b2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <HAL_DMA_Abort+0x444>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d04a      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2d      	ldr	r2, [pc, #180]	@ (8001aac <HAL_DMA_Abort+0x448>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d045      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab0 <HAL_DMA_Abort+0x44c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d040      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2a      	ldr	r2, [pc, #168]	@ (8001ab4 <HAL_DMA_Abort+0x450>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d03b      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <HAL_DMA_Abort+0x454>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d036      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <HAL_DMA_Abort+0x458>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d031      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a26      	ldr	r2, [pc, #152]	@ (8001ac0 <HAL_DMA_Abort+0x45c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d02c      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <HAL_DMA_Abort+0x460>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d027      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a23      	ldr	r2, [pc, #140]	@ (8001ac8 <HAL_DMA_Abort+0x464>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d022      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a21      	ldr	r2, [pc, #132]	@ (8001acc <HAL_DMA_Abort+0x468>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01d      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <HAL_DMA_Abort+0x46c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d018      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad4 <HAL_DMA_Abort+0x470>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <HAL_DMA_Abort+0x474>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00e      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001adc <HAL_DMA_Abort+0x478>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d009      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_DMA_Abort+0x47c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d004      	beq.n	8001a86 <HAL_DMA_Abort+0x422>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a18      	ldr	r2, [pc, #96]	@ (8001ae4 <HAL_DMA_Abort+0x480>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_DMA_Abort+0x426>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_DMA_Abort+0x428>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d02b      	beq.n	8001ae8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a94:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	223f      	movs	r2, #63	@ 0x3f
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	e02a      	b.n	8001afe <HAL_DMA_Abort+0x49a>
 8001aa8:	40020010 	.word	0x40020010
 8001aac:	40020028 	.word	0x40020028
 8001ab0:	40020040 	.word	0x40020040
 8001ab4:	40020058 	.word	0x40020058
 8001ab8:	40020070 	.word	0x40020070
 8001abc:	40020088 	.word	0x40020088
 8001ac0:	400200a0 	.word	0x400200a0
 8001ac4:	400200b8 	.word	0x400200b8
 8001ac8:	40020410 	.word	0x40020410
 8001acc:	40020428 	.word	0x40020428
 8001ad0:	40020440 	.word	0x40020440
 8001ad4:	40020458 	.word	0x40020458
 8001ad8:	40020470 	.word	0x40020470
 8001adc:	40020488 	.word	0x40020488
 8001ae0:	400204a0 	.word	0x400204a0
 8001ae4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aec:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	2201      	movs	r2, #1
 8001af8:	409a      	lsls	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4f      	ldr	r2, [pc, #316]	@ (8001c40 <HAL_DMA_Abort+0x5dc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d072      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c44 <HAL_DMA_Abort+0x5e0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d06d      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a4c      	ldr	r2, [pc, #304]	@ (8001c48 <HAL_DMA_Abort+0x5e4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d068      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a4a      	ldr	r2, [pc, #296]	@ (8001c4c <HAL_DMA_Abort+0x5e8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d063      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a49      	ldr	r2, [pc, #292]	@ (8001c50 <HAL_DMA_Abort+0x5ec>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d05e      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a47      	ldr	r2, [pc, #284]	@ (8001c54 <HAL_DMA_Abort+0x5f0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d059      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a46      	ldr	r2, [pc, #280]	@ (8001c58 <HAL_DMA_Abort+0x5f4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d054      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a44      	ldr	r2, [pc, #272]	@ (8001c5c <HAL_DMA_Abort+0x5f8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d04f      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a43      	ldr	r2, [pc, #268]	@ (8001c60 <HAL_DMA_Abort+0x5fc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d04a      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a41      	ldr	r2, [pc, #260]	@ (8001c64 <HAL_DMA_Abort+0x600>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d045      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a40      	ldr	r2, [pc, #256]	@ (8001c68 <HAL_DMA_Abort+0x604>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d040      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3e      	ldr	r2, [pc, #248]	@ (8001c6c <HAL_DMA_Abort+0x608>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d03b      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	@ (8001c70 <HAL_DMA_Abort+0x60c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d036      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a3b      	ldr	r2, [pc, #236]	@ (8001c74 <HAL_DMA_Abort+0x610>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d031      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c78 <HAL_DMA_Abort+0x614>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d02c      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a38      	ldr	r2, [pc, #224]	@ (8001c7c <HAL_DMA_Abort+0x618>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d027      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a37      	ldr	r2, [pc, #220]	@ (8001c80 <HAL_DMA_Abort+0x61c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d022      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a35      	ldr	r2, [pc, #212]	@ (8001c84 <HAL_DMA_Abort+0x620>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d01d      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a34      	ldr	r2, [pc, #208]	@ (8001c88 <HAL_DMA_Abort+0x624>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d018      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a32      	ldr	r2, [pc, #200]	@ (8001c8c <HAL_DMA_Abort+0x628>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a31      	ldr	r2, [pc, #196]	@ (8001c90 <HAL_DMA_Abort+0x62c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8001c94 <HAL_DMA_Abort+0x630>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d009      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2e      	ldr	r2, [pc, #184]	@ (8001c98 <HAL_DMA_Abort+0x634>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d004      	beq.n	8001bee <HAL_DMA_Abort+0x58a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2c      	ldr	r2, [pc, #176]	@ (8001c9c <HAL_DMA_Abort+0x638>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_DMA_Abort+0x58e>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_DMA_Abort+0x590>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d015      	beq.n	8001c24 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c00:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00c      	beq.n	8001c24 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c18:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c22:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
 8001c80:	58025408 	.word	0x58025408
 8001c84:	5802541c 	.word	0x5802541c
 8001c88:	58025430 	.word	0x58025430
 8001c8c:	58025444 	.word	0x58025444
 8001c90:	58025458 	.word	0x58025458
 8001c94:	5802546c 	.word	0x5802546c
 8001c98:	58025480 	.word	0x58025480
 8001c9c:	58025494 	.word	0x58025494

08001ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e237      	b.n	8002122 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2280      	movs	r2, #128	@ 0x80
 8001cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e22c      	b.n	8002122 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8001e40 <HAL_DMA_Abort_IT+0x1a0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d04a      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e44 <HAL_DMA_Abort_IT+0x1a4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d045      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a59      	ldr	r2, [pc, #356]	@ (8001e48 <HAL_DMA_Abort_IT+0x1a8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d040      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a58      	ldr	r2, [pc, #352]	@ (8001e4c <HAL_DMA_Abort_IT+0x1ac>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d03b      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a56      	ldr	r2, [pc, #344]	@ (8001e50 <HAL_DMA_Abort_IT+0x1b0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d036      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a55      	ldr	r2, [pc, #340]	@ (8001e54 <HAL_DMA_Abort_IT+0x1b4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d031      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a53      	ldr	r2, [pc, #332]	@ (8001e58 <HAL_DMA_Abort_IT+0x1b8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d02c      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a52      	ldr	r2, [pc, #328]	@ (8001e5c <HAL_DMA_Abort_IT+0x1bc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d027      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a50      	ldr	r2, [pc, #320]	@ (8001e60 <HAL_DMA_Abort_IT+0x1c0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d022      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a4f      	ldr	r2, [pc, #316]	@ (8001e64 <HAL_DMA_Abort_IT+0x1c4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d01d      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a4d      	ldr	r2, [pc, #308]	@ (8001e68 <HAL_DMA_Abort_IT+0x1c8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d018      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e6c <HAL_DMA_Abort_IT+0x1cc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d013      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4a      	ldr	r2, [pc, #296]	@ (8001e70 <HAL_DMA_Abort_IT+0x1d0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d00e      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a49      	ldr	r2, [pc, #292]	@ (8001e74 <HAL_DMA_Abort_IT+0x1d4>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d009      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a47      	ldr	r2, [pc, #284]	@ (8001e78 <HAL_DMA_Abort_IT+0x1d8>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d004      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xc8>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a46      	ldr	r2, [pc, #280]	@ (8001e7c <HAL_DMA_Abort_IT+0x1dc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_DMA_Abort_IT+0xcc>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_Abort_IT+0xce>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8086 	beq.w	8001e80 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2f      	ldr	r2, [pc, #188]	@ (8001e40 <HAL_DMA_Abort_IT+0x1a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d04a      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <HAL_DMA_Abort_IT+0x1a4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d045      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2c      	ldr	r2, [pc, #176]	@ (8001e48 <HAL_DMA_Abort_IT+0x1a8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d040      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e4c <HAL_DMA_Abort_IT+0x1ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d03b      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a29      	ldr	r2, [pc, #164]	@ (8001e50 <HAL_DMA_Abort_IT+0x1b0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d036      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a28      	ldr	r2, [pc, #160]	@ (8001e54 <HAL_DMA_Abort_IT+0x1b4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d031      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a26      	ldr	r2, [pc, #152]	@ (8001e58 <HAL_DMA_Abort_IT+0x1b8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02c      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a25      	ldr	r2, [pc, #148]	@ (8001e5c <HAL_DMA_Abort_IT+0x1bc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d027      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a23      	ldr	r2, [pc, #140]	@ (8001e60 <HAL_DMA_Abort_IT+0x1c0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d022      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a22      	ldr	r2, [pc, #136]	@ (8001e64 <HAL_DMA_Abort_IT+0x1c4>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01d      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a20      	ldr	r2, [pc, #128]	@ (8001e68 <HAL_DMA_Abort_IT+0x1c8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d018      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <HAL_DMA_Abort_IT+0x1cc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d013      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e70 <HAL_DMA_Abort_IT+0x1d0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00e      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1c      	ldr	r2, [pc, #112]	@ (8001e74 <HAL_DMA_Abort_IT+0x1d4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d009      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e78 <HAL_DMA_Abort_IT+0x1d8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_DMA_Abort_IT+0x17c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <HAL_DMA_Abort_IT+0x1dc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d108      	bne.n	8001e2e <HAL_DMA_Abort_IT+0x18e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0201 	bic.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e178      	b.n	8002120 <HAL_DMA_Abort_IT+0x480>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e16f      	b.n	8002120 <HAL_DMA_Abort_IT+0x480>
 8001e40:	40020010 	.word	0x40020010
 8001e44:	40020028 	.word	0x40020028
 8001e48:	40020040 	.word	0x40020040
 8001e4c:	40020058 	.word	0x40020058
 8001e50:	40020070 	.word	0x40020070
 8001e54:	40020088 	.word	0x40020088
 8001e58:	400200a0 	.word	0x400200a0
 8001e5c:	400200b8 	.word	0x400200b8
 8001e60:	40020410 	.word	0x40020410
 8001e64:	40020428 	.word	0x40020428
 8001e68:	40020440 	.word	0x40020440
 8001e6c:	40020458 	.word	0x40020458
 8001e70:	40020470 	.word	0x40020470
 8001e74:	40020488 	.word	0x40020488
 8001e78:	400204a0 	.word	0x400204a0
 8001e7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 020e 	bic.w	r2, r2, #14
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6c      	ldr	r2, [pc, #432]	@ (8002048 <HAL_DMA_Abort_IT+0x3a8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d04a      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6b      	ldr	r2, [pc, #428]	@ (800204c <HAL_DMA_Abort_IT+0x3ac>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d045      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a69      	ldr	r2, [pc, #420]	@ (8002050 <HAL_DMA_Abort_IT+0x3b0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d040      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a68      	ldr	r2, [pc, #416]	@ (8002054 <HAL_DMA_Abort_IT+0x3b4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d03b      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a66      	ldr	r2, [pc, #408]	@ (8002058 <HAL_DMA_Abort_IT+0x3b8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d036      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a65      	ldr	r2, [pc, #404]	@ (800205c <HAL_DMA_Abort_IT+0x3bc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d031      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a63      	ldr	r2, [pc, #396]	@ (8002060 <HAL_DMA_Abort_IT+0x3c0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d02c      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a62      	ldr	r2, [pc, #392]	@ (8002064 <HAL_DMA_Abort_IT+0x3c4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d027      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a60      	ldr	r2, [pc, #384]	@ (8002068 <HAL_DMA_Abort_IT+0x3c8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d022      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a5f      	ldr	r2, [pc, #380]	@ (800206c <HAL_DMA_Abort_IT+0x3cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d01d      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8002070 <HAL_DMA_Abort_IT+0x3d0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d018      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a5c      	ldr	r2, [pc, #368]	@ (8002074 <HAL_DMA_Abort_IT+0x3d4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8002078 <HAL_DMA_Abort_IT+0x3d8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d00e      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a59      	ldr	r2, [pc, #356]	@ (800207c <HAL_DMA_Abort_IT+0x3dc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d009      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a57      	ldr	r2, [pc, #348]	@ (8002080 <HAL_DMA_Abort_IT+0x3e0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x290>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a56      	ldr	r2, [pc, #344]	@ (8002084 <HAL_DMA_Abort_IT+0x3e4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d108      	bne.n	8001f42 <HAL_DMA_Abort_IT+0x2a2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0201 	bic.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e007      	b.n	8001f52 <HAL_DMA_Abort_IT+0x2b2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3c      	ldr	r2, [pc, #240]	@ (8002048 <HAL_DMA_Abort_IT+0x3a8>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d072      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3a      	ldr	r2, [pc, #232]	@ (800204c <HAL_DMA_Abort_IT+0x3ac>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d06d      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a39      	ldr	r2, [pc, #228]	@ (8002050 <HAL_DMA_Abort_IT+0x3b0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d068      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a37      	ldr	r2, [pc, #220]	@ (8002054 <HAL_DMA_Abort_IT+0x3b4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d063      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a36      	ldr	r2, [pc, #216]	@ (8002058 <HAL_DMA_Abort_IT+0x3b8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d05e      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a34      	ldr	r2, [pc, #208]	@ (800205c <HAL_DMA_Abort_IT+0x3bc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d059      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a33      	ldr	r2, [pc, #204]	@ (8002060 <HAL_DMA_Abort_IT+0x3c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d054      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a31      	ldr	r2, [pc, #196]	@ (8002064 <HAL_DMA_Abort_IT+0x3c4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d04f      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a30      	ldr	r2, [pc, #192]	@ (8002068 <HAL_DMA_Abort_IT+0x3c8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d04a      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800206c <HAL_DMA_Abort_IT+0x3cc>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d045      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2d      	ldr	r2, [pc, #180]	@ (8002070 <HAL_DMA_Abort_IT+0x3d0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d040      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8002074 <HAL_DMA_Abort_IT+0x3d4>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d03b      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2a      	ldr	r2, [pc, #168]	@ (8002078 <HAL_DMA_Abort_IT+0x3d8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d036      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a28      	ldr	r2, [pc, #160]	@ (800207c <HAL_DMA_Abort_IT+0x3dc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d031      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a27      	ldr	r2, [pc, #156]	@ (8002080 <HAL_DMA_Abort_IT+0x3e0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d02c      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a25      	ldr	r2, [pc, #148]	@ (8002084 <HAL_DMA_Abort_IT+0x3e4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d027      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a24      	ldr	r2, [pc, #144]	@ (8002088 <HAL_DMA_Abort_IT+0x3e8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	@ (800208c <HAL_DMA_Abort_IT+0x3ec>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01d      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	@ (8002090 <HAL_DMA_Abort_IT+0x3f0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d018      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	@ (8002094 <HAL_DMA_Abort_IT+0x3f4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <HAL_DMA_Abort_IT+0x3f8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00e      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	@ (800209c <HAL_DMA_Abort_IT+0x3fc>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d009      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <HAL_DMA_Abort_IT+0x400>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d004      	beq.n	8002042 <HAL_DMA_Abort_IT+0x3a2>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_DMA_Abort_IT+0x404>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d132      	bne.n	80020a8 <HAL_DMA_Abort_IT+0x408>
 8002042:	2301      	movs	r3, #1
 8002044:	e031      	b.n	80020aa <HAL_DMA_Abort_IT+0x40a>
 8002046:	bf00      	nop
 8002048:	40020010 	.word	0x40020010
 800204c:	40020028 	.word	0x40020028
 8002050:	40020040 	.word	0x40020040
 8002054:	40020058 	.word	0x40020058
 8002058:	40020070 	.word	0x40020070
 800205c:	40020088 	.word	0x40020088
 8002060:	400200a0 	.word	0x400200a0
 8002064:	400200b8 	.word	0x400200b8
 8002068:	40020410 	.word	0x40020410
 800206c:	40020428 	.word	0x40020428
 8002070:	40020440 	.word	0x40020440
 8002074:	40020458 	.word	0x40020458
 8002078:	40020470 	.word	0x40020470
 800207c:	40020488 	.word	0x40020488
 8002080:	400204a0 	.word	0x400204a0
 8002084:	400204b8 	.word	0x400204b8
 8002088:	58025408 	.word	0x58025408
 800208c:	5802541c 	.word	0x5802541c
 8002090:	58025430 	.word	0x58025430
 8002094:	58025444 	.word	0x58025444
 8002098:	58025458 	.word	0x58025458
 800209c:	5802546c 	.word	0x5802546c
 80020a0:	58025480 	.word	0x58025480
 80020a4:	58025494 	.word	0x58025494
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d028      	beq.n	8002100 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	2201      	movs	r2, #1
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80020dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop

0800212c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	460b      	mov	r3, r1
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e00a      	b.n	800215e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	605a      	str	r2, [r3, #4]
      break;
 8002154:	e002      	b.n	800215c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
      break;
 800215a:	bf00      	nop
  }

  return status;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
}
 800215e:	4618      	mov	r0, r3
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e003      	b.n	8002186 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002184:	2300      	movs	r3, #0
  }
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2201      	movs	r2, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	011a      	lsls	r2, r3, #4
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <HAL_EXTI_IRQHandler+0x5c>)
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4798      	blx	r3
    }
  }
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	58000088 	.word	0x58000088

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	@ 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002202:	4b89      	ldr	r3, [pc, #548]	@ (8002428 <HAL_GPIO_Init+0x234>)
 8002204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002206:	e194      	b.n	8002532 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8186 	beq.w	800252c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d005      	beq.n	8002238 <HAL_GPIO_Init+0x44>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d130      	bne.n	800229a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226e:	2201      	movs	r2, #1
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 0201 	and.w	r2, r3, #1
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d017      	beq.n	80022d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d123      	bne.n	800232a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	08da      	lsrs	r2, r3, #3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3208      	adds	r2, #8
 8002324:	69b9      	ldr	r1, [r7, #24]
 8002326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0203 	and.w	r2, r3, #3
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80e0 	beq.w	800252c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236c:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <HAL_GPIO_Init+0x238>)
 800236e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002372:	4a2e      	ldr	r2, [pc, #184]	@ (800242c <HAL_GPIO_Init+0x238>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800237c:	4b2b      	ldr	r3, [pc, #172]	@ (800242c <HAL_GPIO_Init+0x238>)
 800237e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238a:	4a29      	ldr	r2, [pc, #164]	@ (8002430 <HAL_GPIO_Init+0x23c>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a20      	ldr	r2, [pc, #128]	@ (8002434 <HAL_GPIO_Init+0x240>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d052      	beq.n	800245c <HAL_GPIO_Init+0x268>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002438 <HAL_GPIO_Init+0x244>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d031      	beq.n	8002422 <HAL_GPIO_Init+0x22e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <HAL_GPIO_Init+0x248>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x22a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <HAL_GPIO_Init+0x24c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x226>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <HAL_GPIO_Init+0x250>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x222>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002448 <HAL_GPIO_Init+0x254>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21e>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1a      	ldr	r2, [pc, #104]	@ (800244c <HAL_GPIO_Init+0x258>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x21a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a19      	ldr	r2, [pc, #100]	@ (8002450 <HAL_GPIO_Init+0x25c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x216>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a18      	ldr	r2, [pc, #96]	@ (8002454 <HAL_GPIO_Init+0x260>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x212>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a17      	ldr	r2, [pc, #92]	@ (8002458 <HAL_GPIO_Init+0x264>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20e>
 80023fe:	2309      	movs	r3, #9
 8002400:	e02d      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002402:	230a      	movs	r3, #10
 8002404:	e02b      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002406:	2308      	movs	r3, #8
 8002408:	e029      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800240a:	2307      	movs	r3, #7
 800240c:	e027      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800240e:	2306      	movs	r3, #6
 8002410:	e025      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002412:	2305      	movs	r3, #5
 8002414:	e023      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002416:	2304      	movs	r3, #4
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800241a:	2303      	movs	r3, #3
 800241c:	e01f      	b.n	800245e <HAL_GPIO_Init+0x26a>
 800241e:	2302      	movs	r3, #2
 8002420:	e01d      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002422:	2301      	movs	r3, #1
 8002424:	e01b      	b.n	800245e <HAL_GPIO_Init+0x26a>
 8002426:	bf00      	nop
 8002428:	58000080 	.word	0x58000080
 800242c:	58024400 	.word	0x58024400
 8002430:	58000400 	.word	0x58000400
 8002434:	58020000 	.word	0x58020000
 8002438:	58020400 	.word	0x58020400
 800243c:	58020800 	.word	0x58020800
 8002440:	58020c00 	.word	0x58020c00
 8002444:	58021000 	.word	0x58021000
 8002448:	58021400 	.word	0x58021400
 800244c:	58021800 	.word	0x58021800
 8002450:	58021c00 	.word	0x58021c00
 8002454:	58022000 	.word	0x58022000
 8002458:	58022400 	.word	0x58022400
 800245c:	2300      	movs	r3, #0
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246e:	4938      	ldr	r1, [pc, #224]	@ (8002550 <HAL_GPIO_Init+0x35c>)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	3301      	adds	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f ae63 	bne.w	8002208 <HAL_GPIO_Init+0x14>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	3724      	adds	r7, #36	@ 0x24
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	58000400 	.word	0x58000400

08002554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b085      	sub	sp, #20
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	041a      	lsls	r2, r3, #16
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	887b      	ldrh	r3, [r7, #2]
 80025d6:	400b      	ands	r3, r1
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_PWREx_ConfigSupply+0x70>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d00a      	beq.n	8002616 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002600:	4b16      	ldr	r3, [pc, #88]	@ (800265c <HAL_PWREx_ConfigSupply+0x70>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e01f      	b.n	8002652 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e01d      	b.n	8002652 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_PWREx_ConfigSupply+0x70>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 0207 	bic.w	r2, r3, #7
 800261e:	490f      	ldr	r1, [pc, #60]	@ (800265c <HAL_PWREx_ConfigSupply+0x70>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002626:	f7fe fe7d 	bl	8001324 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800262c:	e009      	b.n	8002642 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800262e:	f7fe fe79 	bl	8001324 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800263c:	d901      	bls.n	8002642 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e007      	b.n	8002652 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_PWREx_ConfigSupply+0x70>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264e:	d1ee      	bne.n	800262e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	58024800 	.word	0x58024800

08002660 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	@ 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f000 bc48 	b.w	8002f04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8088 	beq.w	8002792 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b99      	ldr	r3, [pc, #612]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268c:	4b96      	ldr	r3, [pc, #600]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	2b10      	cmp	r3, #16
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_OscConfig+0x48>
 8002698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269a:	2b18      	cmp	r3, #24
 800269c:	d111      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62>
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b8f      	ldr	r3, [pc, #572]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d06d      	beq.n	8002790 <HAL_RCC_OscConfig+0x130>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d169      	bne.n	8002790 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	f000 bc21 	b.w	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x7a>
 80026cc:	4b86      	ldr	r3, [pc, #536]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a85      	ldr	r2, [pc, #532]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e02e      	b.n	8002738 <HAL_RCC_OscConfig+0xd8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x9c>
 80026e2:	4b81      	ldr	r3, [pc, #516]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a80      	ldr	r2, [pc, #512]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b7e      	ldr	r3, [pc, #504]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7d      	ldr	r2, [pc, #500]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xd8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0xc0>
 8002706:	4b78      	ldr	r3, [pc, #480]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a77      	ldr	r2, [pc, #476]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b75      	ldr	r3, [pc, #468]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a74      	ldr	r2, [pc, #464]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xd8>
 8002720:	4b71      	ldr	r3, [pc, #452]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a70      	ldr	r2, [pc, #448]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6d      	ldr	r2, [pc, #436]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fdf0 	bl	8001324 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fdec 	bl	8001324 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	@ 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e3d4      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275a:	4b63      	ldr	r3, [pc, #396]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xe8>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fddc 	bl	8001324 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fdd8 	bl	8001324 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e3c0      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002782:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x110>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80ca 	beq.w	8002934 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a0:	4b51      	ldr	r3, [pc, #324]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027aa:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_RCC_OscConfig+0x166>
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	2b18      	cmp	r3, #24
 80027ba:	d156      	bne.n	800286a <HAL_RCC_OscConfig+0x20a>
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d151      	bne.n	800286a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c6:	4b48      	ldr	r3, [pc, #288]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x17e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e392      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027de:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0219 	bic.w	r2, r3, #25
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	493f      	ldr	r1, [pc, #252]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fd98 	bl	8001324 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f8:	f7fe fd94 	bl	8001324 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e37c      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	f7fe fd91 	bl	800133c <HAL_GetREVID>
 800281a:	4603      	mov	r3, r0
 800281c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002820:	4293      	cmp	r3, r2
 8002822:	d817      	bhi.n	8002854 <HAL_RCC_OscConfig+0x1f4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	d108      	bne.n	800283e <HAL_RCC_OscConfig+0x1de>
 800282c:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002834:	4a2c      	ldr	r2, [pc, #176]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	e07a      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b2a      	ldr	r3, [pc, #168]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	031b      	lsls	r3, r3, #12
 800284c:	4926      	ldr	r1, [pc, #152]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002852:	e06f      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	4921      	ldr	r1, [pc, #132]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	e064      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d047      	beq.n	8002902 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0219 	bic.w	r2, r3, #25
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	491a      	ldr	r1, [pc, #104]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd4e 	bl	8001324 <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288c:	f7fe fd4a 	bl	8001324 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e332      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	f7fe fd47 	bl	800133c <HAL_GetREVID>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d819      	bhi.n	80028ec <HAL_RCC_OscConfig+0x28c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b40      	cmp	r3, #64	@ 0x40
 80028be:	d108      	bne.n	80028d2 <HAL_RCC_OscConfig+0x272>
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028c8:	4a07      	ldr	r2, [pc, #28]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ce:	6053      	str	r3, [r2, #4]
 80028d0:	e030      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
 80028d2:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	031b      	lsls	r3, r3, #12
 80028e0:	4901      	ldr	r1, [pc, #4]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
 80028e6:	e025      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
 80028e8:	58024400 	.word	0x58024400
 80028ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	4997      	ldr	r1, [pc, #604]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e018      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	4b95      	ldr	r3, [pc, #596]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a94      	ldr	r2, [pc, #592]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fd09 	bl	8001324 <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002916:	f7fe fd05 	bl	8001324 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e2ed      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002928:	4b8b      	ldr	r3, [pc, #556]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a9 	beq.w	8002a94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4b85      	ldr	r3, [pc, #532]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800294a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800294c:	4b82      	ldr	r3, [pc, #520]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d007      	beq.n	8002968 <HAL_RCC_OscConfig+0x308>
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b18      	cmp	r3, #24
 800295c:	d13a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x374>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d135      	bne.n	80029d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002968:	4b7b      	ldr	r3, [pc, #492]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_OscConfig+0x320>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b80      	cmp	r3, #128	@ 0x80
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2c1      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002980:	f7fe fcdc 	bl	800133c <HAL_GetREVID>
 8002984:	4603      	mov	r3, r0
 8002986:	f241 0203 	movw	r2, #4099	@ 0x1003
 800298a:	4293      	cmp	r3, r2
 800298c:	d817      	bhi.n	80029be <HAL_RCC_OscConfig+0x35e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2b20      	cmp	r3, #32
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_OscConfig+0x348>
 8002996:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800299e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a6:	e075      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	069b      	lsls	r3, r3, #26
 80029b6:	4968      	ldr	r1, [pc, #416]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029bc:	e06a      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029be:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4962      	ldr	r1, [pc, #392]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d2:	e05f      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d042      	beq.n	8002a62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fc9c 	bl	8001324 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029f0:	f7fe fc98 	bl	8001324 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e280      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a02:	4b55      	ldr	r3, [pc, #340]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0e:	f7fe fc95 	bl	800133c <HAL_GetREVID>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d817      	bhi.n	8002a4c <HAL_RCC_OscConfig+0x3ec>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d108      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3d6>
 8002a24:	4b4c      	ldr	r3, [pc, #304]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a32:	6053      	str	r3, [r2, #4]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
 8002a36:	4b48      	ldr	r3, [pc, #288]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	4944      	ldr	r1, [pc, #272]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
 8002a4a:	e023      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
 8002a4c:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	493f      	ldr	r1, [pc, #252]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60cb      	str	r3, [r1, #12]
 8002a60:	e018      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a62:	4b3d      	ldr	r3, [pc, #244]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fc59 	bl	8001324 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a76:	f7fe fc55 	bl	8001324 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e23d      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a88:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d036      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d019      	beq.n	8002adc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fc36 	bl	8001324 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fc32 	bl	8001324 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e21a      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x45c>
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fc1c 	bl	8001324 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe fc18 	bl	8001324 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e200      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d039      	beq.n	8002b8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fbf9 	bl	8001324 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b36:	f7fe fbf5 	bl	8001324 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1dd      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4d6>
 8002b54:	e01b      	b.n	8002b8e <HAL_RCC_OscConfig+0x52e>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b5c:	4b9b      	ldr	r3, [pc, #620]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a9a      	ldr	r2, [pc, #616]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fbdc 	bl	8001324 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b70:	f7fe fbd8 	bl	8001324 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1c0      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b82:	4b92      	ldr	r3, [pc, #584]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8081 	beq.w	8002c9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a8b      	ldr	r2, [pc, #556]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fbbc 	bl	8001324 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7fe fbb8 	bl	8001324 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	@ 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1a0      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc2:	4b83      	ldr	r3, [pc, #524]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x584>
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a7c      	ldr	r2, [pc, #496]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	e02d      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5a6>
 8002bec:	4b77      	ldr	r3, [pc, #476]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	4a76      	ldr	r2, [pc, #472]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf8:	4b74      	ldr	r3, [pc, #464]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	4a73      	ldr	r2, [pc, #460]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c04:	e01c      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5c8>
 8002c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	4a6e      	ldr	r2, [pc, #440]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	4a6b      	ldr	r2, [pc, #428]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002c28:	4b68      	ldr	r3, [pc, #416]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	4a67      	ldr	r2, [pc, #412]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	4b65      	ldr	r3, [pc, #404]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	4a64      	ldr	r2, [pc, #400]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d015      	beq.n	8002c74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fb6c 	bl	8001324 <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe fb68 	bl	8001324 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e14e      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c66:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <HAL_RCC_OscConfig+0x5f0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fb56 	bl	8001324 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fb52 	bl	8001324 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e138      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c92:	4b4e      	ldr	r3, [pc, #312]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ee      	bne.n	8002c7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 812d 	beq.w	8002f02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ca8:	4b48      	ldr	r3, [pc, #288]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cb0:	2b18      	cmp	r3, #24
 8002cb2:	f000 80bd 	beq.w	8002e30 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	f040 809e 	bne.w	8002dfc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fb2a 	bl	8001324 <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fb26 	bl	8001324 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e10e      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce6:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf2:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf6:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <HAL_RCC_OscConfig+0x774>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	430a      	orrs	r2, r1
 8002d06:	4931      	ldr	r1, [pc, #196]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	3b01      	subs	r3, #1
 8002d12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	025b      	lsls	r3, r3, #9
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	3b01      	subs	r3, #1
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	3b01      	subs	r3, #1
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d3c:	4923      	ldr	r1, [pc, #140]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d42:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	4a21      	ldr	r2, [pc, #132]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_RCC_OscConfig+0x778>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d5a:	00d2      	lsls	r2, r2, #3
 8002d5c:	491b      	ldr	r1, [pc, #108]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	f023 020c 	bic.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	4917      	ldr	r1, [pc, #92]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d74:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	f023 0202 	bic.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	4912      	ldr	r1, [pc, #72]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db6:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe faaf 	bl	8001324 <HAL_GetTick>
 8002dc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc8:	e011      	b.n	8002dee <HAL_RCC_OscConfig+0x78e>
 8002dca:	bf00      	nop
 8002dcc:	58024400 	.word	0x58024400
 8002dd0:	58024800 	.word	0x58024800
 8002dd4:	fffffc0c 	.word	0xfffffc0c
 8002dd8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe faa2 	bl	8001324 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e08a      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x77c>
 8002dfa:	e082      	b.n	8002f02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfc:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a42      	ldr	r2, [pc, #264]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fa8c 	bl	8001324 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fa88 	bl	8001324 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e070      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e22:	4b3a      	ldr	r3, [pc, #232]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x7b0>
 8002e2e:	e068      	b.n	8002f02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e30:	4b36      	ldr	r3, [pc, #216]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e36:	4b35      	ldr	r3, [pc, #212]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d031      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d12a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d122      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0a5b      	lsrs	r3, r3, #9
 8002e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	0e1b      	lsrs	r3, r3, #24
 8002e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e02b      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002eac:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eb6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d01f      	beq.n	8002f02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ec2:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ece:	f7fe fa29 	bl	8001324 <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ed4:	bf00      	nop
 8002ed6:	f7fe fa25 	bl	8001324 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d0f9      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f10 <HAL_RCC_OscConfig+0x8b0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eee:	00d2      	lsls	r2, r2, #3
 8002ef0:	4906      	ldr	r1, [pc, #24]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ef6:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	4a04      	ldr	r2, [pc, #16]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3730      	adds	r7, #48	@ 0x30
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	ffff0007 	.word	0xffff0007

08002f14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e19c      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b8a      	ldr	r3, [pc, #552]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b87      	ldr	r3, [pc, #540]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	4985      	ldr	r1, [pc, #532]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b83      	ldr	r3, [pc, #524]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e184      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	4b7b      	ldr	r3, [pc, #492]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d908      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f74:	4b78      	ldr	r3, [pc, #480]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4975      	ldr	r1, [pc, #468]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	4b70      	ldr	r3, [pc, #448]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d908      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	496a      	ldr	r1, [pc, #424]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d908      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd0:	4b61      	ldr	r3, [pc, #388]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	495e      	ldr	r1, [pc, #376]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d908      	bls.n	8003010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ffe:	4b56      	ldr	r3, [pc, #344]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4953      	ldr	r1, [pc, #332]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800300c:	4313      	orrs	r3, r2
 800300e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	4b4d      	ldr	r3, [pc, #308]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	429a      	cmp	r2, r3
 800302a:	d908      	bls.n	800303e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f023 020f 	bic.w	r2, r3, #15
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4947      	ldr	r1, [pc, #284]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800303a:	4313      	orrs	r3, r2
 800303c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d055      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800304a:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4940      	ldr	r1, [pc, #256]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003058:	4313      	orrs	r3, r2
 800305a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d107      	bne.n	8003074 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003064:	4b3c      	ldr	r3, [pc, #240]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d121      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0f6      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d107      	bne.n	800308c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800307c:	4b36      	ldr	r3, [pc, #216]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d115      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0ea      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003094:	4b30      	ldr	r3, [pc, #192]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0de      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d6      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030b4:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f023 0207 	bic.w	r2, r3, #7
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c6:	f7fe f92d 	bl	8001324 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ce:	f7fe f929 	bl	8001324 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0be      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d1eb      	bne.n	80030ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	429a      	cmp	r2, r3
 8003110:	d208      	bcs.n	8003124 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003112:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f023 020f 	bic.w	r2, r3, #15
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	490e      	ldr	r1, [pc, #56]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003120:	4313      	orrs	r3, r2
 8003122:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003124:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d214      	bcs.n	800315c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 020f 	bic.w	r2, r3, #15
 800313a:	4906      	ldr	r1, [pc, #24]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e086      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
 8003154:	52002000 	.word	0x52002000
 8003158:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	4b3f      	ldr	r3, [pc, #252]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003174:	429a      	cmp	r2, r3
 8003176:	d208      	bcs.n	800318a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003178:	4b3c      	ldr	r3, [pc, #240]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	4939      	ldr	r1, [pc, #228]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003186:	4313      	orrs	r3, r2
 8003188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	4b34      	ldr	r3, [pc, #208]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d208      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031a6:	4b31      	ldr	r3, [pc, #196]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	492e      	ldr	r1, [pc, #184]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	4b28      	ldr	r3, [pc, #160]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d208      	bcs.n	80031e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031d4:	4b25      	ldr	r3, [pc, #148]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	4922      	ldr	r1, [pc, #136]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031fe:	429a      	cmp	r2, r3
 8003200:	d208      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4917      	ldr	r1, [pc, #92]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003210:	4313      	orrs	r3, r2
 8003212:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003214:	f000 f834 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b14      	ldr	r3, [pc, #80]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	4912      	ldr	r1, [pc, #72]	@ (8003270 <HAL_RCC_ClockConfig+0x35c>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
 8003230:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003232:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <HAL_RCC_ClockConfig+0x35c>)
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <HAL_RCC_ClockConfig+0x360>)
 800324a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800324c:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <HAL_RCC_ClockConfig+0x364>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003252:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_RCC_ClockConfig+0x368>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe f81a 	bl	8001290 <HAL_InitTick>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	58024400 	.word	0x58024400
 8003270:	0800ba84 	.word	0x0800ba84
 8003274:	24000004 	.word	0x24000004
 8003278:	24000000 	.word	0x24000000
 800327c:	24000020 	.word	0x24000020

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003286:	4bb3      	ldr	r3, [pc, #716]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800328e:	2b18      	cmp	r3, #24
 8003290:	f200 8155 	bhi.w	800353e <HAL_RCC_GetSysClockFreq+0x2be>
 8003294:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	08003301 	.word	0x08003301
 80032a0:	0800353f 	.word	0x0800353f
 80032a4:	0800353f 	.word	0x0800353f
 80032a8:	0800353f 	.word	0x0800353f
 80032ac:	0800353f 	.word	0x0800353f
 80032b0:	0800353f 	.word	0x0800353f
 80032b4:	0800353f 	.word	0x0800353f
 80032b8:	0800353f 	.word	0x0800353f
 80032bc:	08003327 	.word	0x08003327
 80032c0:	0800353f 	.word	0x0800353f
 80032c4:	0800353f 	.word	0x0800353f
 80032c8:	0800353f 	.word	0x0800353f
 80032cc:	0800353f 	.word	0x0800353f
 80032d0:	0800353f 	.word	0x0800353f
 80032d4:	0800353f 	.word	0x0800353f
 80032d8:	0800353f 	.word	0x0800353f
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800353f 	.word	0x0800353f
 80032e4:	0800353f 	.word	0x0800353f
 80032e8:	0800353f 	.word	0x0800353f
 80032ec:	0800353f 	.word	0x0800353f
 80032f0:	0800353f 	.word	0x0800353f
 80032f4:	0800353f 	.word	0x0800353f
 80032f8:	0800353f 	.word	0x0800353f
 80032fc:	08003333 	.word	0x08003333
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003300:	4b94      	ldr	r3, [pc, #592]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800330c:	4b91      	ldr	r3, [pc, #580]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	4a90      	ldr	r2, [pc, #576]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800331e:	e111      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003320:	4b8d      	ldr	r3, [pc, #564]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003322:	61bb      	str	r3, [r7, #24]
      break;
 8003324:	e10e      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003326:	4b8d      	ldr	r3, [pc, #564]	@ (800355c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003328:	61bb      	str	r3, [r7, #24]
      break;
 800332a:	e10b      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800332c:	4b8c      	ldr	r3, [pc, #560]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800332e:	61bb      	str	r3, [r7, #24]
      break;
 8003330:	e108      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003332:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800333c:	4b85      	ldr	r3, [pc, #532]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003346:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003348:	4b82      	ldr	r3, [pc, #520]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003352:	4b80      	ldr	r3, [pc, #512]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	08db      	lsrs	r3, r3, #3
 8003358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80e1 	beq.w	8003538 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b02      	cmp	r3, #2
 800337a:	f000 8083 	beq.w	8003484 <HAL_RCC_GetSysClockFreq+0x204>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b02      	cmp	r3, #2
 8003382:	f200 80a1 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x248>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x114>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d056      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003392:	e099      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003394:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02d      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ca:	4b62      	ldr	r3, [pc, #392]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033da:	ed97 6a02 	vldr	s12, [r7, #8]
 80033de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033fa:	e087      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003568 <HAL_RCC_GetSysClockFreq+0x2e8>
 800340a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340e:	4b51      	ldr	r3, [pc, #324]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003422:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800343e:	e065      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800356c <HAL_RCC_GetSysClockFreq+0x2ec>
 800344e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003452:	4b40      	ldr	r3, [pc, #256]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003462:	ed97 6a02 	vldr	s12, [r7, #8]
 8003466:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800346a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003482:	e043      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003570 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003496:	4b2f      	ldr	r3, [pc, #188]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c6:	e021      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800356c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800350a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800350c:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	0a5b      	lsrs	r3, r3, #9
 8003512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003516:	3301      	adds	r3, #1
 8003518:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003524:	edd7 6a07 	vldr	s13, [r7, #28]
 8003528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800352c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003536:	e005      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
      break;
 800353c:	e002      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003540:	61bb      	str	r3, [r7, #24]
      break;
 8003542:	bf00      	nop
  }

  return sysclockfreq;
 8003544:	69bb      	ldr	r3, [r7, #24]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	@ 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	58024400 	.word	0x58024400
 8003558:	03d09000 	.word	0x03d09000
 800355c:	003d0900 	.word	0x003d0900
 8003560:	017d7840 	.word	0x017d7840
 8003564:	46000000 	.word	0x46000000
 8003568:	4c742400 	.word	0x4c742400
 800356c:	4a742400 	.word	0x4a742400
 8003570:	4bbebc20 	.word	0x4bbebc20

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800357a:	f7ff fe81 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490f      	ldr	r1, [pc, #60]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	4a09      	ldr	r2, [pc, #36]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a07      	ldr	r2, [pc, #28]	@ (80035cc <HAL_RCC_GetHCLKFreq+0x58>)
 80035b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b2:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035b8:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <HAL_RCC_GetHCLKFreq+0x58>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	58024400 	.word	0x58024400
 80035c8:	0800ba84 	.word	0x0800ba84
 80035cc:	24000004 	.word	0x24000004
 80035d0:	24000000 	.word	0x24000000

080035d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035d8:	f7ff ffcc 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4904      	ldr	r1, [pc, #16]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	58024400 	.word	0x58024400
 80035fc:	0800ba84 	.word	0x0800ba84

08003600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003604:	f7ff ffb6 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4904      	ldr	r1, [pc, #16]	@ (8003628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	0800ba84 	.word	0x0800ba84

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b0ca      	sub	sp, #296	@ 0x128
 8003632:	af00      	add	r7, sp, #0
 8003634:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003638:	2300      	movs	r3, #0
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003650:	2500      	movs	r5, #0
 8003652:	ea54 0305 	orrs.w	r3, r4, r5
 8003656:	d049      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800365e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003662:	d02f      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003664:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003668:	d828      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800366a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366e:	d01a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003674:	d822      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800367a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800367e:	d007      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003680:	e01c      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003682:	4bb8      	ldr	r3, [pc, #736]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	4ab7      	ldr	r2, [pc, #732]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800368c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800368e:	e01a      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	3308      	adds	r3, #8
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fc8f 	bl	8004fbc <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	3328      	adds	r3, #40	@ 0x28
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 fd36 	bl	8005120 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036ce:	4ba5      	ldr	r3, [pc, #660]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036dc:	4aa1      	ldr	r2, [pc, #644]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80036e2:	e003      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036f8:	f04f 0900 	mov.w	r9, #0
 80036fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003700:	d047      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003708:	2b04      	cmp	r3, #4
 800370a:	d82a      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003729 	.word	0x08003729
 8003718:	08003737 	.word	0x08003737
 800371c:	0800374d 	.word	0x0800374d
 8003720:	0800376b 	.word	0x0800376b
 8003724:	0800376b 	.word	0x0800376b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003728:	4b8e      	ldr	r3, [pc, #568]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	4a8d      	ldr	r2, [pc, #564]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003734:	e01a      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	3308      	adds	r3, #8
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fc3c 	bl	8004fbc <RCCEx_PLL2_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800374a:	e00f      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	3328      	adds	r3, #40	@ 0x28
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fce3 	bl	8005120 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003760:	e004      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003768:	e000      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800376a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003774:	4b7b      	ldr	r3, [pc, #492]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	f023 0107 	bic.w	r1, r3, #7
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	4a78      	ldr	r2, [pc, #480]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003784:	430b      	orrs	r3, r1
 8003786:	6513      	str	r3, [r2, #80]	@ 0x50
 8003788:	e003      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800379e:	f04f 0b00 	mov.w	fp, #0
 80037a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80037a6:	d04c      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b2:	d030      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b8:	d829      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80037bc:	d02d      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037be:	2bc0      	cmp	r3, #192	@ 0xc0
 80037c0:	d825      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037c2:	2b80      	cmp	r3, #128	@ 0x80
 80037c4:	d018      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037c6:	2b80      	cmp	r3, #128	@ 0x80
 80037c8:	d821      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d007      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80037d2:	e01c      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d4:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	4a62      	ldr	r2, [pc, #392]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037e0:	e01c      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e6:	3308      	adds	r3, #8
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fbe6 	bl	8004fbc <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037f6:	e011      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	3328      	adds	r3, #40	@ 0x28
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fc8d 	bl	8005120 <RCCEx_PLL3_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003814:	e002      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800381a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003824:	4b4f      	ldr	r3, [pc, #316]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003828:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	4a4c      	ldr	r2, [pc, #304]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003834:	430b      	orrs	r3, r1
 8003836:	6513      	str	r3, [r2, #80]	@ 0x50
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800384e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003858:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800385c:	460b      	mov	r3, r1
 800385e:	4313      	orrs	r3, r2
 8003860:	d053      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800386a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800386e:	d035      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003870:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003874:	d82e      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003876:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800387a:	d031      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800387c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003880:	d828      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003886:	d01a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388c:	d822      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003896:	d007      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003898:	e01c      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389a:	4b32      	ldr	r3, [pc, #200]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	4a31      	ldr	r2, [pc, #196]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a6:	e01c      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	3308      	adds	r3, #8
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fb83 	bl	8004fbc <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038bc:	e011      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	3328      	adds	r3, #40	@ 0x28
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fc2a 	bl	8005120 <RCCEx_PLL3_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d2:	e006      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038da:	e002      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003900:	e003      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003916:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003920:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d056      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003932:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003936:	d038      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800393c:	d831      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800393e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003942:	d034      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003944:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003948:	d82b      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800394a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394e:	d01d      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003954:	d825      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d006      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800395a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003960:	e01f      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003962:	bf00      	nop
 8003964:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4ba2      	ldr	r3, [pc, #648]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	4aa1      	ldr	r2, [pc, #644]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003974:	e01c      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	3308      	adds	r3, #8
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fb1c 	bl	8004fbc <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800398a:	e011      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	3328      	adds	r3, #40	@ 0x28
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fbc3 	bl	8005120 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039a0:	e006      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039b8:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039c8:	4a8a      	ldr	r2, [pc, #552]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d03a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	2b30      	cmp	r3, #48	@ 0x30
 8003a00:	d01f      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a02:	2b30      	cmp	r3, #48	@ 0x30
 8003a04:	d819      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d00c      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d815      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d019      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d111      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a16:	4b77      	ldr	r3, [pc, #476]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	4a76      	ldr	r2, [pc, #472]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	3308      	adds	r3, #8
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fac5 	bl	8004fbc <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a50:	4b68      	ldr	r3, [pc, #416]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	4a65      	ldr	r2, [pc, #404]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a64:	e003      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	d051      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a98:	d035      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a9e:	d82e      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aa4:	d031      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003aa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aaa:	d828      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab0:	d01a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab6:	d822      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac0:	d007      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ac2:	e01c      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e01c      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fa6e 	bl	8004fbc <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e011      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	3328      	adds	r3, #40	@ 0x28
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fb15 	bl	8005120 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003afc:	e006      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b04:	e002      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b14:	4b37      	ldr	r3, [pc, #220]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b22:	4a34      	ldr	r2, [pc, #208]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d056      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b5c:	d033      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b62:	d82c      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b68:	d02f      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b6e:	d826      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b74:	d02b      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b7a:	d820      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b80:	d012      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b86:	d81a      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b90:	d115      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	3308      	adds	r3, #8
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 fa0e 	bl	8004fbc <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ba6:	e015      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	3328      	adds	r3, #40	@ 0x28
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 fab5 	bl	8005120 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bea:	4a02      	ldr	r2, [pc, #8]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bf0:	e006      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bf2:	bf00      	nop
 8003bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d055      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c2c:	d033      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c32:	d82c      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c38:	d02f      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3e:	d826      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c44:	d02b      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c4a:	d820      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c50:	d012      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c56:	d81a      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d022      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c60:	d115      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	3308      	adds	r3, #8
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 f9a6 	bl	8004fbc <RCCEx_PLL2_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c76:	e015      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	3328      	adds	r3, #40	@ 0x28
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 fa4d 	bl	8005120 <RCCEx_PLL3_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c94:	e006      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c96:	bf00      	nop
 8003c98:	e004      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cac:	4ba3      	ldr	r3, [pc, #652]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cbc:	4a9f      	ldr	r2, [pc, #636]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d037      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf6:	d00e      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cfc:	d816      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d06:	d111      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b8c      	ldr	r3, [pc, #560]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4a8b      	ldr	r2, [pc, #556]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d14:	e00f      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 f94c 	bl	8004fbc <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d2a:	e004      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a7b      	ldr	r2, [pc, #492]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d52:	e003      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d039      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d81c      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d86:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003d9d 	.word	0x08003d9d
 8003d94:	08003dab 	.word	0x08003dab
 8003d98:	08003dc9 	.word	0x08003dc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b67      	ldr	r3, [pc, #412]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a66      	ldr	r2, [pc, #408]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3308      	adds	r3, #8
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f902 	bl	8004fbc <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	f023 0103 	bic.w	r1, r3, #3
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de0:	4a56      	ldr	r2, [pc, #344]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de2:	430b      	orrs	r3, r1
 8003de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f000 809f 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e12:	4b4b      	ldr	r3, [pc, #300]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a4a      	ldr	r2, [pc, #296]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fa81 	bl	8001324 <HAL_GetTick>
 8003e22:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e26:	e00b      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e28:	f7fd fa7c 	bl	8001324 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	@ 0x64
 8003e36:	d903      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3e:	e005      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e40:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ed      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d179      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e54:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e60:	4053      	eors	r3, r2
 8003e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e6a:	4b34      	ldr	r3, [pc, #208]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7a:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e82:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea2:	d118      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fa3e 	bl	8001324 <HAL_GetTick>
 8003ea8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eac:	e00d      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd fa39 	bl	8001324 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003eb8:	1ad2      	subs	r2, r2, r3
 8003eba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d903      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eca:	4b1c      	ldr	r3, [pc, #112]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0eb      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d129      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eee:	d10e      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f00:	091a      	lsrs	r2, r3, #4
 8003f02:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	4a0d      	ldr	r2, [pc, #52]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6113      	str	r3, [r2, #16]
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f18:	6113      	str	r3, [r2, #16]
 8003f1a:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	e00e      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58024800 	.word	0x58024800
 8003f44:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 0301 	and.w	r3, r2, #1
 8003f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f000 8089 	beq.w	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f78:	2b28      	cmp	r3, #40	@ 0x28
 8003f7a:	d86b      	bhi.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	0800405d 	.word	0x0800405d
 8003f88:	08004055 	.word	0x08004055
 8003f8c:	08004055 	.word	0x08004055
 8003f90:	08004055 	.word	0x08004055
 8003f94:	08004055 	.word	0x08004055
 8003f98:	08004055 	.word	0x08004055
 8003f9c:	08004055 	.word	0x08004055
 8003fa0:	08004055 	.word	0x08004055
 8003fa4:	08004029 	.word	0x08004029
 8003fa8:	08004055 	.word	0x08004055
 8003fac:	08004055 	.word	0x08004055
 8003fb0:	08004055 	.word	0x08004055
 8003fb4:	08004055 	.word	0x08004055
 8003fb8:	08004055 	.word	0x08004055
 8003fbc:	08004055 	.word	0x08004055
 8003fc0:	08004055 	.word	0x08004055
 8003fc4:	0800403f 	.word	0x0800403f
 8003fc8:	08004055 	.word	0x08004055
 8003fcc:	08004055 	.word	0x08004055
 8003fd0:	08004055 	.word	0x08004055
 8003fd4:	08004055 	.word	0x08004055
 8003fd8:	08004055 	.word	0x08004055
 8003fdc:	08004055 	.word	0x08004055
 8003fe0:	08004055 	.word	0x08004055
 8003fe4:	0800405d 	.word	0x0800405d
 8003fe8:	08004055 	.word	0x08004055
 8003fec:	08004055 	.word	0x08004055
 8003ff0:	08004055 	.word	0x08004055
 8003ff4:	08004055 	.word	0x08004055
 8003ff8:	08004055 	.word	0x08004055
 8003ffc:	08004055 	.word	0x08004055
 8004000:	08004055 	.word	0x08004055
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004055 	.word	0x08004055
 800400c:	08004055 	.word	0x08004055
 8004010:	08004055 	.word	0x08004055
 8004014:	08004055 	.word	0x08004055
 8004018:	08004055 	.word	0x08004055
 800401c:	08004055 	.word	0x08004055
 8004020:	08004055 	.word	0x08004055
 8004024:	0800405d 	.word	0x0800405d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	3308      	adds	r3, #8
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ffc3 	bl	8004fbc <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800403c:	e00f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f86a 	bl	8005120 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004066:	4bbf      	ldr	r3, [pc, #764]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004074:	4abb      	ldr	r2, [pc, #748]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004076:	430b      	orrs	r3, r1
 8004078:	6553      	str	r3, [r2, #84]	@ 0x54
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f002 0302 	and.w	r3, r2, #2
 8004090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800409a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d041      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d824      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040ae:	a201      	add	r2, pc, #4	@ (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	08004101 	.word	0x08004101
 80040b8:	080040cd 	.word	0x080040cd
 80040bc:	080040e3 	.word	0x080040e3
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004101 	.word	0x08004101
 80040c8:	08004101 	.word	0x08004101
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	3308      	adds	r3, #8
 80040d2:	2101      	movs	r1, #1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 ff71 	bl	8004fbc <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040e0:	e00f      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f818 	bl	8005120 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040f6:	e004      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800410a:	4b96      	ldr	r3, [pc, #600]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	f023 0107 	bic.w	r1, r3, #7
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004118:	4a92      	ldr	r2, [pc, #584]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800411a:	430b      	orrs	r3, r1
 800411c:	6553      	str	r3, [r2, #84]	@ 0x54
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 0304 	and.w	r3, r2, #4
 8004134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800413e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d044      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004150:	2b05      	cmp	r3, #5
 8004152:	d825      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004154:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	080041a9 	.word	0x080041a9
 8004160:	08004175 	.word	0x08004175
 8004164:	0800418b 	.word	0x0800418b
 8004168:	080041a9 	.word	0x080041a9
 800416c:	080041a9 	.word	0x080041a9
 8004170:	080041a9 	.word	0x080041a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	3308      	adds	r3, #8
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 ff1d 	bl	8004fbc <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	3328      	adds	r3, #40	@ 0x28
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ffc4 	bl	8005120 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f023 0107 	bic.w	r1, r3, #7
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c2:	4a68      	ldr	r2, [pc, #416]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f002 0320 	and.w	r3, r2, #32
 80041de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d055      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fe:	d033      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004204:	d82c      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d02f      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004210:	d826      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004212:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004216:	d02b      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004218:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800421c:	d820      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004222:	d012      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004228:	d81a      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d022      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800422e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004232:	d115      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	3308      	adds	r3, #8
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f000 febd 	bl	8004fbc <RCCEx_PLL2_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004248:	e015      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	3328      	adds	r3, #40	@ 0x28
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff64 	bl	8005120 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800425e:	e00a      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004266:	e006      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004268:	bf00      	nop
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800426c:	bf00      	nop
 800426e:	e002      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	4a35      	ldr	r2, [pc, #212]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6553      	str	r3, [r2, #84]	@ 0x54
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d058      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042ca:	d033      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042d0:	d82c      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	d02f      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042dc:	d826      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e2:	d02b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e8:	d820      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f4:	d81a      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d022      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042fe:	d115      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	3308      	adds	r3, #8
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe57 	bl	8004fbc <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004314:	e015      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fefe 	bl	8005120 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800432a:	e00a      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004332:	e006      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004334:	bf00      	nop
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004338:	bf00      	nop
 800433a:	e002      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10e      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800435a:	4a02      	ldr	r2, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004386:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800438a:	460b      	mov	r3, r1
 800438c:	4313      	orrs	r3, r2
 800438e:	d055      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004398:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800439c:	d033      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800439e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043a2:	d82c      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a8:	d02f      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ae:	d826      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043b4:	d02b      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043ba:	d820      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c0:	d012      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c6:	d81a      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d022      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d0:	d115      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3308      	adds	r3, #8
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fdee 	bl	8004fbc <RCCEx_PLL2_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043e6:	e015      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	3328      	adds	r3, #40	@ 0x28
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fe95 	bl	8005120 <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043fc:	e00a      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800441c:	4ba1      	ldr	r3, [pc, #644]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800442c:	4a9d      	ldr	r2, [pc, #628]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442e:	430b      	orrs	r3, r1
 8004430:	6593      	str	r3, [r2, #88]	@ 0x58
 8004432:	e003      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 0308 	and.w	r3, r2, #8
 8004448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004452:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d01e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fe54 	bl	8005120 <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004484:	4b87      	ldr	r3, [pc, #540]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004494:	4a83      	ldr	r2, [pc, #524]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004496:	430b      	orrs	r3, r1
 8004498:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f002 0310 	and.w	r3, r2, #16
 80044a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d01e      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	2102      	movs	r1, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fe25 	bl	8005120 <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e2:	4b70      	ldr	r3, [pc, #448]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044f2:	4a6c      	ldr	r2, [pc, #432]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004508:	2300      	movs	r3, #0
 800450a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800450e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d03e      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004524:	d022      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800452a:	d81b      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	d00b      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004536:	e015      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	3308      	adds	r3, #8
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fd3b 	bl	8004fbc <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800454c:	e00f      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004552:	3328      	adds	r3, #40	@ 0x28
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fde2 	bl	8005120 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004562:	e004      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800456c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004576:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004586:	4a47      	ldr	r2, [pc, #284]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004588:	430b      	orrs	r3, r1
 800458a:	6593      	str	r3, [r2, #88]	@ 0x58
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80045a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a4:	2300      	movs	r3, #0
 80045a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80045ac:	460b      	mov	r3, r1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	d03b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045be:	d01f      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045c4:	d818      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80045cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045d0:	d007      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80045d2:	e011      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d4:	4b33      	ldr	r3, [pc, #204]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	4a32      	ldr	r2, [pc, #200]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045e0:	e00f      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	3328      	adds	r3, #40	@ 0x28
 80045e8:	2101      	movs	r1, #1
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd98 	bl	8005120 <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045f6:	e004      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800460a:	4b26      	ldr	r3, [pc, #152]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	4a22      	ldr	r2, [pc, #136]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461c:	430b      	orrs	r3, r1
 800461e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004620:	e003      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004636:	673b      	str	r3, [r7, #112]	@ 0x70
 8004638:	2300      	movs	r3, #0
 800463a:	677b      	str	r3, [r7, #116]	@ 0x74
 800463c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d034      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d007      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004656:	e011      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	4a11      	ldr	r2, [pc, #68]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004664:	e00e      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	3308      	adds	r3, #8
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fca4 	bl	8004fbc <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800467a:	e003      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10d      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	4a02      	ldr	r2, [pc, #8]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469c:	430b      	orrs	r3, r1
 800469e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046a0:	e006      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80046a2:	bf00      	nop
 80046a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046be:	2300      	movs	r3, #0
 80046c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80046c6:	460b      	mov	r3, r1
 80046c8:	4313      	orrs	r3, r2
 80046ca:	d00c      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	3328      	adds	r3, #40	@ 0x28
 80046d2:	2102      	movs	r1, #2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fd23 	bl	8005120 <RCCEx_PLL3_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80046f4:	2300      	movs	r3, #0
 80046f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80046f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d038      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800470a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470e:	d018      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004710:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004714:	d811      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471a:	d014      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800471c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004720:	d80b      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472a:	d106      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472c:	4bc3      	ldr	r3, [pc, #780]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	4ac2      	ldr	r2, [pc, #776]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004738:	e008      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004740:	e004      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800474a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004754:	4bb9      	ldr	r3, [pc, #740]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004758:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004764:	4ab5      	ldr	r2, [pc, #724]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004766:	430b      	orrs	r3, r1
 8004768:	6553      	str	r3, [r2, #84]	@ 0x54
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004780:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004782:	2300      	movs	r3, #0
 8004784:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004786:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004790:	4baa      	ldr	r3, [pc, #680]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004794:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479e:	4aa7      	ldr	r2, [pc, #668]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80047b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b2:	2300      	movs	r3, #0
 80047b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047c0:	4b9e      	ldr	r3, [pc, #632]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047d0:	4a9a      	ldr	r2, [pc, #616]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e4:	2300      	movs	r3, #0
 80047e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f2:	4b92      	ldr	r3, [pc, #584]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004800:	4a8e      	ldr	r2, [pc, #568]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004802:	430b      	orrs	r3, r1
 8004804:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004812:	643b      	str	r3, [r7, #64]	@ 0x40
 8004814:	2300      	movs	r3, #0
 8004816:	647b      	str	r3, [r7, #68]	@ 0x44
 8004818:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004822:	4b86      	ldr	r3, [pc, #536]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	4a85      	ldr	r2, [pc, #532]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004828:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800482c:	6113      	str	r3, [r2, #16]
 800482e:	4b83      	ldr	r3, [pc, #524]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004830:	6919      	ldr	r1, [r3, #16]
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800483a:	4a80      	ldr	r2, [pc, #512]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800484c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800484e:	2300      	movs	r3, #0
 8004850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004852:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004856:	460b      	mov	r3, r1
 8004858:	4313      	orrs	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800485c:	4b77      	ldr	r3, [pc, #476]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004860:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	4a74      	ldr	r2, [pc, #464]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486c:	430b      	orrs	r3, r1
 800486e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800487c:	633b      	str	r3, [r7, #48]	@ 0x30
 800487e:	2300      	movs	r3, #0
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
 8004882:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800488c:	4b6b      	ldr	r3, [pc, #428]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489c:	4a67      	ldr	r2, [pc, #412]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489e:	430b      	orrs	r3, r1
 80048a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	2100      	movs	r1, #0
 80048ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d011      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	3308      	adds	r3, #8
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fb78 	bl	8004fbc <RCCEx_PLL2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	2100      	movs	r1, #0
 80048ec:	6239      	str	r1, [r7, #32]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d011      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	3308      	adds	r3, #8
 8004904:	2101      	movs	r1, #1
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb58 	bl	8004fbc <RCCEx_PLL2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	2100      	movs	r1, #0
 800492c:	61b9      	str	r1, [r7, #24]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	3308      	adds	r3, #8
 8004944:	2102      	movs	r1, #2
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fb38 	bl	8004fbc <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	2100      	movs	r1, #0
 800496c:	6139      	str	r1, [r7, #16]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	3328      	adds	r3, #40	@ 0x28
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fbca 	bl	8005120 <RCCEx_PLL3_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	2100      	movs	r1, #0
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049b8:	460b      	mov	r3, r1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d011      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	3328      	adds	r3, #40	@ 0x28
 80049c4:	2101      	movs	r1, #1
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fbaa 	bl	8005120 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	2100      	movs	r1, #0
 80049ec:	6039      	str	r1, [r7, #0]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d011      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	3328      	adds	r3, #40	@ 0x28
 8004a04:	2102      	movs	r1, #2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fb8a 	bl	8005120 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004a22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a36:	46bd      	mov	sp, r7
 8004a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3c:	58024400 	.word	0x58024400

08004a40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a44:	f7fe fd96 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4904      	ldr	r1, [pc, #16]	@ (8004a68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	58024400 	.word	0x58024400
 8004a68:	0800ba84 	.word	0x0800ba84

08004a6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b089      	sub	sp, #36	@ 0x24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a74:	4ba1      	ldr	r3, [pc, #644]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a7e:	4b9f      	ldr	r3, [pc, #636]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a82:	0b1b      	lsrs	r3, r3, #12
 8004a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a8a:	4b9c      	ldr	r3, [pc, #624]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a96:	4b99      	ldr	r3, [pc, #612]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8111 	beq.w	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	f000 8083 	beq.w	8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	f200 80a1 	bhi.w	8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d056      	beq.n	8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ad6:	e099      	b.n	8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad8:	4b88      	ldr	r3, [pc, #544]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02d      	beq.n	8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ae4:	4b85      	ldr	r3, [pc, #532]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	4a84      	ldr	r2, [pc, #528]	@ (8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b3e:	e087      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b6a      	ldr	r3, [pc, #424]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b82:	e065      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b96:	4b59      	ldr	r3, [pc, #356]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004baa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc6:	e043      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	4b48      	ldr	r3, [pc, #288]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0a:	e021      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b37      	ldr	r3, [pc, #220]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c50:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	0a5b      	lsrs	r3, r3, #9
 8004c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c76:	ee17 2a90 	vmov	r2, s15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca4:	ee17 2a90 	vmov	r2, s15
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004cac:	4b13      	ldr	r3, [pc, #76]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	0e1b      	lsrs	r3, r3, #24
 8004cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd2:	ee17 2a90 	vmov	r2, s15
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cda:	e008      	b.n	8004cee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	3724      	adds	r7, #36	@ 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	03d09000 	.word	0x03d09000
 8004d04:	46000000 	.word	0x46000000
 8004d08:	4c742400 	.word	0x4c742400
 8004d0c:	4a742400 	.word	0x4a742400
 8004d10:	4bbebc20 	.word	0x4bbebc20

08004d14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	@ 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d1c:	4ba1      	ldr	r3, [pc, #644]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d26:	4b9f      	ldr	r3, [pc, #636]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	0d1b      	lsrs	r3, r3, #20
 8004d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d32:	4b9c      	ldr	r3, [pc, #624]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d3e:	4b99      	ldr	r3, [pc, #612]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8111 	beq.w	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	f000 8083 	beq.w	8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f200 80a1 	bhi.w	8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d056      	beq.n	8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d7e:	e099      	b.n	8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d80:	4b88      	ldr	r3, [pc, #544]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02d      	beq.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d8c:	4b85      	ldr	r3, [pc, #532]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	08db      	lsrs	r3, r3, #3
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	4a84      	ldr	r2, [pc, #528]	@ (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004de6:	e087      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2a:	e065      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3e:	4b59      	ldr	r3, [pc, #356]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6e:	e043      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b48      	ldr	r3, [pc, #288]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb2:	e021      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b37      	ldr	r3, [pc, #220]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	0a5b      	lsrs	r3, r3, #9
 8004efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1e:	ee17 2a90 	vmov	r2, s15
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f26:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4c:	ee17 2a90 	vmov	r2, s15
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f54:	4b13      	ldr	r3, [pc, #76]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	0e1b      	lsrs	r3, r3, #24
 8004f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7a:	ee17 2a90 	vmov	r2, s15
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	609a      	str	r2, [r3, #8]
}
 8004f96:	bf00      	nop
 8004f98:	3724      	adds	r7, #36	@ 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	03d09000 	.word	0x03d09000
 8004fac:	46000000 	.word	0x46000000
 8004fb0:	4c742400 	.word	0x4c742400
 8004fb4:	4a742400 	.word	0x4a742400
 8004fb8:	4bbebc20 	.word	0x4bbebc20

08004fbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fca:	4b53      	ldr	r3, [pc, #332]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d101      	bne.n	8004fda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e099      	b.n	800510e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fda:	4b4f      	ldr	r3, [pc, #316]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4e      	ldr	r2, [pc, #312]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fc f99d 	bl	8001324 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fec:	e008      	b.n	8005000 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fee:	f7fc f999 	bl	8001324 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e086      	b.n	800510e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005000:	4b45      	ldr	r3, [pc, #276]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800500c:	4b42      	ldr	r3, [pc, #264]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	493f      	ldr	r1, [pc, #252]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	3b01      	subs	r3, #1
 8005026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	3b01      	subs	r3, #1
 8005030:	025b      	lsls	r3, r3, #9
 8005032:	b29b      	uxth	r3, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	3b01      	subs	r3, #1
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005050:	4931      	ldr	r1, [pc, #196]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005056:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	492d      	ldr	r1, [pc, #180]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005068:	4b2b      	ldr	r3, [pc, #172]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	f023 0220 	bic.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4928      	ldr	r1, [pc, #160]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800507a:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	4a26      	ldr	r2, [pc, #152]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005080:	f023 0310 	bic.w	r3, r3, #16
 8005084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800508a:	4b24      	ldr	r3, [pc, #144]	@ (800511c <RCCEx_PLL2_Config+0x160>)
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	69d2      	ldr	r2, [r2, #28]
 8005092:	00d2      	lsls	r2, r2, #3
 8005094:	4920      	ldr	r1, [pc, #128]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800509a:	4b1f      	ldr	r3, [pc, #124]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	4a1e      	ldr	r2, [pc, #120]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	f043 0310 	orr.w	r3, r3, #16
 80050a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b8:	e00f      	b.n	80050da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050c0:	4b15      	ldr	r3, [pc, #84]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a14      	ldr	r2, [pc, #80]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050cc:	e005      	b.n	80050da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	4a11      	ldr	r2, [pc, #68]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050da:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a0e      	ldr	r2, [pc, #56]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e6:	f7fc f91d 	bl	8001324 <HAL_GetTick>
 80050ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050ec:	e008      	b.n	8005100 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050ee:	f7fc f919 	bl	8001324 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	ffff0007 	.word	0xffff0007

08005120 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800512e:	4b53      	ldr	r3, [pc, #332]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b03      	cmp	r3, #3
 8005138:	d101      	bne.n	800513e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e099      	b.n	8005272 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800513e:	4b4f      	ldr	r3, [pc, #316]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4e      	ldr	r2, [pc, #312]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514a:	f7fc f8eb 	bl	8001324 <HAL_GetTick>
 800514e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005150:	e008      	b.n	8005164 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005152:	f7fc f8e7 	bl	8001324 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e086      	b.n	8005272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005164:	4b45      	ldr	r3, [pc, #276]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005170:	4b42      	ldr	r3, [pc, #264]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005174:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	493f      	ldr	r1, [pc, #252]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	628b      	str	r3, [r1, #40]	@ 0x28
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	3b01      	subs	r3, #1
 800518a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	3b01      	subs	r3, #1
 8005194:	025b      	lsls	r3, r3, #9
 8005196:	b29b      	uxth	r3, r3
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	061b      	lsls	r3, r3, #24
 80051b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051b4:	4931      	ldr	r1, [pc, #196]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051ba:	4b30      	ldr	r3, [pc, #192]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	492d      	ldr	r1, [pc, #180]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	4928      	ldr	r1, [pc, #160]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051de:	4b27      	ldr	r3, [pc, #156]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	4a26      	ldr	r2, [pc, #152]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <RCCEx_PLL3_Config+0x160>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	69d2      	ldr	r2, [r2, #28]
 80051f6:	00d2      	lsls	r2, r2, #3
 80051f8:	4920      	ldr	r1, [pc, #128]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051fe:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	4a1e      	ldr	r2, [pc, #120]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005208:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005210:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	4a19      	ldr	r2, [pc, #100]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005216:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800521a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800521c:	e00f      	b.n	800523e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d106      	bne.n	8005232 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005224:	4b15      	ldr	r3, [pc, #84]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	4a14      	ldr	r2, [pc, #80]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 800522a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800522e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005230:	e005      	b.n	800523e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	4a11      	ldr	r2, [pc, #68]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005238:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800523c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a0e      	ldr	r2, [pc, #56]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524a:	f7fc f86b 	bl	8001324 <HAL_GetTick>
 800524e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005250:	e008      	b.n	8005264 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005252:	f7fc f867 	bl	8001324 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e006      	b.n	8005272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	ffff0007 	.word	0xffff0007

08005284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e042      	b.n	800531c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7fb fc5f 	bl	8000b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2224      	movs	r2, #36	@ 0x24
 80052b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f001 fa60 	bl	8006794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fcf5 	bl	8005cc4 <UART_SetConfig>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e01b      	b.n	800531c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f001 fadf 	bl	80068d8 <UART_CheckIdleState>
 800531a:	4603      	mov	r3, r0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	@ 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533a:	2b20      	cmp	r3, #32
 800533c:	d17b      	bne.n	8005436 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_UART_Transmit+0x26>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e074      	b.n	8005438 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2221      	movs	r2, #33	@ 0x21
 800535a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535e:	f7fb ffe1 	bl	8001324 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537c:	d108      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e003      	b.n	8005398 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005398:	e030      	b.n	80053fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2180      	movs	r1, #128	@ 0x80
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f001 fb41 	bl	8006a2c <UART_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e03d      	b.n	8005438 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3302      	adds	r3, #2
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e007      	b.n	80053ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	3301      	adds	r3, #1
 80053e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1c8      	bne.n	800539a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2200      	movs	r2, #0
 8005410:	2140      	movs	r1, #64	@ 0x40
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f001 fb0a 	bl	8006a2c <UART_WaitOnFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e006      	b.n	8005438 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3720      	adds	r7, #32
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08a      	sub	sp, #40	@ 0x28
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005454:	2b20      	cmp	r3, #32
 8005456:	d137      	bne.n	80054c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_UART_Receive_IT+0x24>
 800545e:	88fb      	ldrh	r3, [r7, #6]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e030      	b.n	80054ca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <HAL_UART_Receive_IT+0x94>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d01f      	beq.n	80054b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d018      	beq.n	80054b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	613b      	str	r3, [r7, #16]
   return(result);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	461a      	mov	r2, r3
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	623b      	str	r3, [r7, #32]
 80054a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e6      	bne.n	8005486 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 fb22 	bl	8006b08 <UART_Start_Receive_IT>
 80054c4:	4603      	mov	r3, r0
 80054c6:	e000      	b.n	80054ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3728      	adds	r7, #40	@ 0x28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	58000c00 	.word	0x58000c00

080054d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b0ba      	sub	sp, #232	@ 0xe8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005502:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005506:	4013      	ands	r3, r2
 8005508:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800550c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11b      	bne.n	800554c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d015      	beq.n	800554c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800552c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8393 	beq.w	8005c68 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	4798      	blx	r3
      }
      return;
 800554a:	e38d      	b.n	8005c68 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800554c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 8123 	beq.w	800579c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005556:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800555a:	4b8d      	ldr	r3, [pc, #564]	@ (8005790 <HAL_UART_IRQHandler+0x2b8>)
 800555c:	4013      	ands	r3, r2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005562:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005566:	4b8b      	ldr	r3, [pc, #556]	@ (8005794 <HAL_UART_IRQHandler+0x2bc>)
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 8116 	beq.w	800579c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d011      	beq.n	80055a0 <HAL_UART_IRQHandler+0xc8>
 800557c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2201      	movs	r2, #1
 800558e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d011      	beq.n	80055d0 <HAL_UART_IRQHandler+0xf8>
 80055ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00b      	beq.n	80055d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2202      	movs	r2, #2
 80055be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	f043 0204 	orr.w	r2, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d4:	f003 0304 	and.w	r3, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d011      	beq.n	8005600 <HAL_UART_IRQHandler+0x128>
 80055dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2204      	movs	r2, #4
 80055ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f6:	f043 0202 	orr.w	r2, r3, #2
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d017      	beq.n	800563c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d105      	bne.n	8005624 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005618:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800561c:	4b5c      	ldr	r3, [pc, #368]	@ (8005790 <HAL_UART_IRQHandler+0x2b8>)
 800561e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2208      	movs	r2, #8
 800562a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	f043 0208 	orr.w	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800563c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005644:	2b00      	cmp	r3, #0
 8005646:	d012      	beq.n	800566e <HAL_UART_IRQHandler+0x196>
 8005648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800565c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005664:	f043 0220 	orr.w	r2, r3, #32
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 82f9 	beq.w	8005c6c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800567a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d013      	beq.n	80056ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d105      	bne.n	800569e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c2:	2b40      	cmp	r3, #64	@ 0x40
 80056c4:	d005      	beq.n	80056d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d054      	beq.n	800577c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 fb3a 	bl	8006d4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e2:	2b40      	cmp	r3, #64	@ 0x40
 80056e4:	d146      	bne.n	8005774 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005700:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005704:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005712:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005716:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800571e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800572a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1d9      	bne.n	80056e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d017      	beq.n	800576c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005742:	4a15      	ldr	r2, [pc, #84]	@ (8005798 <HAL_UART_IRQHandler+0x2c0>)
 8005744:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800574c:	4618      	mov	r0, r3
 800574e:	f7fc faa7 	bl	8001ca0 <HAL_DMA_Abort_IT>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d019      	beq.n	800578c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800575e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005766:	4610      	mov	r0, r2
 8005768:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576a:	e00f      	b.n	800578c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fa93 	bl	8005c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005772:	e00b      	b.n	800578c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fa8f 	bl	8005c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577a:	e007      	b.n	800578c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fa8b 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800578a:	e26f      	b.n	8005c6c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800578c:	bf00      	nop
    return;
 800578e:	e26d      	b.n	8005c6c <HAL_UART_IRQHandler+0x794>
 8005790:	10000001 	.word	0x10000001
 8005794:	04000120 	.word	0x04000120
 8005798:	08006e19 	.word	0x08006e19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	f040 8203 	bne.w	8005bac <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 81fc 	beq.w	8005bac <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b8:	f003 0310 	and.w	r3, r3, #16
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 81f5 	beq.w	8005bac <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2210      	movs	r2, #16
 80057c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d4:	2b40      	cmp	r3, #64	@ 0x40
 80057d6:	f040 816d 	bne.w	8005ab4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4aa4      	ldr	r2, [pc, #656]	@ (8005a74 <HAL_UART_IRQHandler+0x59c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d068      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4aa1      	ldr	r2, [pc, #644]	@ (8005a78 <HAL_UART_IRQHandler+0x5a0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d061      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a9f      	ldr	r2, [pc, #636]	@ (8005a7c <HAL_UART_IRQHandler+0x5a4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d05a      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a9c      	ldr	r2, [pc, #624]	@ (8005a80 <HAL_UART_IRQHandler+0x5a8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d053      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a9a      	ldr	r2, [pc, #616]	@ (8005a84 <HAL_UART_IRQHandler+0x5ac>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d04c      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a97      	ldr	r2, [pc, #604]	@ (8005a88 <HAL_UART_IRQHandler+0x5b0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d045      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a95      	ldr	r2, [pc, #596]	@ (8005a8c <HAL_UART_IRQHandler+0x5b4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d03e      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a92      	ldr	r2, [pc, #584]	@ (8005a90 <HAL_UART_IRQHandler+0x5b8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d037      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a90      	ldr	r2, [pc, #576]	@ (8005a94 <HAL_UART_IRQHandler+0x5bc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d030      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a8d      	ldr	r2, [pc, #564]	@ (8005a98 <HAL_UART_IRQHandler+0x5c0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d029      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a8b      	ldr	r2, [pc, #556]	@ (8005a9c <HAL_UART_IRQHandler+0x5c4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d022      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a88      	ldr	r2, [pc, #544]	@ (8005aa0 <HAL_UART_IRQHandler+0x5c8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01b      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a86      	ldr	r2, [pc, #536]	@ (8005aa4 <HAL_UART_IRQHandler+0x5cc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d014      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a83      	ldr	r2, [pc, #524]	@ (8005aa8 <HAL_UART_IRQHandler+0x5d0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00d      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a81      	ldr	r2, [pc, #516]	@ (8005aac <HAL_UART_IRQHandler+0x5d4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d006      	beq.n	80058ba <HAL_UART_IRQHandler+0x3e2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a7e      	ldr	r2, [pc, #504]	@ (8005ab0 <HAL_UART_IRQHandler+0x5d8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d106      	bne.n	80058c8 <HAL_UART_IRQHandler+0x3f0>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	e005      	b.n	80058d4 <HAL_UART_IRQHandler+0x3fc>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 80ad 	beq.w	8005a3c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058ec:	429a      	cmp	r2, r3
 80058ee:	f080 80a5 	bcs.w	8005a3c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005908:	f000 8087 	beq.w	8005a1a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005920:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005936:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800593a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005942:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800594e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1da      	bne.n	800590c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3308      	adds	r3, #8
 800595c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005968:	f023 0301 	bic.w	r3, r3, #1
 800596c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3308      	adds	r3, #8
 8005976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800597a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800597e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005982:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800598c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e1      	bne.n	8005956 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3308      	adds	r3, #8
 8005998:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e3      	bne.n	8005992 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059e8:	f023 0310 	bic.w	r3, r3, #16
 80059ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e4      	bne.n	80059d8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fb fe25 	bl	8001664 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4619      	mov	r1, r3
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f939 	bl	8005cac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a3a:	e119      	b.n	8005c70 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a46:	429a      	cmp	r2, r3
 8005a48:	f040 8112 	bne.w	8005c70 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a58:	f040 810a 	bne.w	8005c70 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f91e 	bl	8005cac <HAL_UARTEx_RxEventCallback>
      return;
 8005a70:	e0fe      	b.n	8005c70 <HAL_UART_IRQHandler+0x798>
 8005a72:	bf00      	nop
 8005a74:	40020010 	.word	0x40020010
 8005a78:	40020028 	.word	0x40020028
 8005a7c:	40020040 	.word	0x40020040
 8005a80:	40020058 	.word	0x40020058
 8005a84:	40020070 	.word	0x40020070
 8005a88:	40020088 	.word	0x40020088
 8005a8c:	400200a0 	.word	0x400200a0
 8005a90:	400200b8 	.word	0x400200b8
 8005a94:	40020410 	.word	0x40020410
 8005a98:	40020428 	.word	0x40020428
 8005a9c:	40020440 	.word	0x40020440
 8005aa0:	40020458 	.word	0x40020458
 8005aa4:	40020470 	.word	0x40020470
 8005aa8:	40020488 	.word	0x40020488
 8005aac:	400204a0 	.word	0x400204a0
 8005ab0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80cf 	beq.w	8005c74 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80ca 	beq.w	8005c74 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b04:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e4      	bne.n	8005ae0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	623b      	str	r3, [r7, #32]
   return(result);
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	4b55      	ldr	r3, [pc, #340]	@ (8005c80 <HAL_UART_IRQHandler+0x7a8>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e3      	bne.n	8005b16 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	617b      	str	r3, [r7, #20]
   return(result);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e4      	bne.n	8005b62 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f881 	bl	8005cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005baa:	e063      	b.n	8005c74 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00e      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x6fe>
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fe80 	bl	80078d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bd4:	e051      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d014      	beq.n	8005c0c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d105      	bne.n	8005bfa <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d03a      	beq.n	8005c78 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
    }
    return;
 8005c0a:	e035      	b.n	8005c78 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <HAL_UART_IRQHandler+0x754>
 8005c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 f909 	bl	8006e3c <UART_EndTransmit_IT>
    return;
 8005c2a:	e026      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d009      	beq.n	8005c4c <HAL_UART_IRQHandler+0x774>
 8005c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f001 fe59 	bl	80078fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c4a:	e016      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d010      	beq.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
 8005c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da0c      	bge.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 fe41 	bl	80078e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c66:	e008      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c68:	bf00      	nop
 8005c6a:	e006      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
    return;
 8005c6c:	bf00      	nop
 8005c6e:	e004      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c70:	bf00      	nop
 8005c72:	e002      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <HAL_UART_IRQHandler+0x7a2>
    return;
 8005c78:	bf00      	nop
  }
}
 8005c7a:	37e8      	adds	r7, #232	@ 0xe8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	effffffe 	.word	0xeffffffe

08005c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc8:	b092      	sub	sp, #72	@ 0x48
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4bbe      	ldr	r3, [pc, #760]	@ (8005fec <UART_SetConfig+0x328>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	6812      	ldr	r2, [r2, #0]
 8005cfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4ab3      	ldr	r2, [pc, #716]	@ (8005ff0 <UART_SetConfig+0x32c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d004      	beq.n	8005d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	4baf      	ldr	r3, [pc, #700]	@ (8005ff4 <UART_SetConfig+0x330>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	f023 010f 	bic.w	r1, r3, #15
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ff8 <UART_SetConfig+0x334>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d177      	bne.n	8005e54 <UART_SetConfig+0x190>
 8005d64:	4ba5      	ldr	r3, [pc, #660]	@ (8005ffc <UART_SetConfig+0x338>)
 8005d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6c:	2b28      	cmp	r3, #40	@ 0x28
 8005d6e:	d86d      	bhi.n	8005e4c <UART_SetConfig+0x188>
 8005d70:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <UART_SetConfig+0xb4>)
 8005d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d76:	bf00      	nop
 8005d78:	08005e1d 	.word	0x08005e1d
 8005d7c:	08005e4d 	.word	0x08005e4d
 8005d80:	08005e4d 	.word	0x08005e4d
 8005d84:	08005e4d 	.word	0x08005e4d
 8005d88:	08005e4d 	.word	0x08005e4d
 8005d8c:	08005e4d 	.word	0x08005e4d
 8005d90:	08005e4d 	.word	0x08005e4d
 8005d94:	08005e4d 	.word	0x08005e4d
 8005d98:	08005e25 	.word	0x08005e25
 8005d9c:	08005e4d 	.word	0x08005e4d
 8005da0:	08005e4d 	.word	0x08005e4d
 8005da4:	08005e4d 	.word	0x08005e4d
 8005da8:	08005e4d 	.word	0x08005e4d
 8005dac:	08005e4d 	.word	0x08005e4d
 8005db0:	08005e4d 	.word	0x08005e4d
 8005db4:	08005e4d 	.word	0x08005e4d
 8005db8:	08005e2d 	.word	0x08005e2d
 8005dbc:	08005e4d 	.word	0x08005e4d
 8005dc0:	08005e4d 	.word	0x08005e4d
 8005dc4:	08005e4d 	.word	0x08005e4d
 8005dc8:	08005e4d 	.word	0x08005e4d
 8005dcc:	08005e4d 	.word	0x08005e4d
 8005dd0:	08005e4d 	.word	0x08005e4d
 8005dd4:	08005e4d 	.word	0x08005e4d
 8005dd8:	08005e35 	.word	0x08005e35
 8005ddc:	08005e4d 	.word	0x08005e4d
 8005de0:	08005e4d 	.word	0x08005e4d
 8005de4:	08005e4d 	.word	0x08005e4d
 8005de8:	08005e4d 	.word	0x08005e4d
 8005dec:	08005e4d 	.word	0x08005e4d
 8005df0:	08005e4d 	.word	0x08005e4d
 8005df4:	08005e4d 	.word	0x08005e4d
 8005df8:	08005e3d 	.word	0x08005e3d
 8005dfc:	08005e4d 	.word	0x08005e4d
 8005e00:	08005e4d 	.word	0x08005e4d
 8005e04:	08005e4d 	.word	0x08005e4d
 8005e08:	08005e4d 	.word	0x08005e4d
 8005e0c:	08005e4d 	.word	0x08005e4d
 8005e10:	08005e4d 	.word	0x08005e4d
 8005e14:	08005e4d 	.word	0x08005e4d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e222      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e21e      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e21a      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e34:	2310      	movs	r3, #16
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e216      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e3c:	2320      	movs	r3, #32
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e212      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e44:	2340      	movs	r3, #64	@ 0x40
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e20e      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e4c:	2380      	movs	r3, #128	@ 0x80
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e20a      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a69      	ldr	r2, [pc, #420]	@ (8006000 <UART_SetConfig+0x33c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d130      	bne.n	8005ec0 <UART_SetConfig+0x1fc>
 8005e5e:	4b67      	ldr	r3, [pc, #412]	@ (8005ffc <UART_SetConfig+0x338>)
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d826      	bhi.n	8005eb8 <UART_SetConfig+0x1f4>
 8005e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e70 <UART_SetConfig+0x1ac>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e89 	.word	0x08005e89
 8005e74:	08005e91 	.word	0x08005e91
 8005e78:	08005e99 	.word	0x08005e99
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005eb1 	.word	0x08005eb1
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e1ec      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e1e8      	b.n	800626a <UART_SetConfig+0x5a6>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9e:	e1e4      	b.n	800626a <UART_SetConfig+0x5a6>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e1e0      	b.n	800626a <UART_SetConfig+0x5a6>
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e1dc      	b.n	800626a <UART_SetConfig+0x5a6>
 8005eb0:	2340      	movs	r3, #64	@ 0x40
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e1d8      	b.n	800626a <UART_SetConfig+0x5a6>
 8005eb8:	2380      	movs	r3, #128	@ 0x80
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e1d4      	b.n	800626a <UART_SetConfig+0x5a6>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8006004 <UART_SetConfig+0x340>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d130      	bne.n	8005f2c <UART_SetConfig+0x268>
 8005eca:	4b4c      	ldr	r3, [pc, #304]	@ (8005ffc <UART_SetConfig+0x338>)
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	d826      	bhi.n	8005f24 <UART_SetConfig+0x260>
 8005ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <UART_SetConfig+0x218>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005efd 	.word	0x08005efd
 8005ee4:	08005f05 	.word	0x08005f05
 8005ee8:	08005f0d 	.word	0x08005f0d
 8005eec:	08005f15 	.word	0x08005f15
 8005ef0:	08005f1d 	.word	0x08005f1d
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efa:	e1b6      	b.n	800626a <UART_SetConfig+0x5a6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f02:	e1b2      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0a:	e1ae      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e1aa      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f14:	2320      	movs	r3, #32
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e1a6      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f1c:	2340      	movs	r3, #64	@ 0x40
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e1a2      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e19e      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a35      	ldr	r2, [pc, #212]	@ (8006008 <UART_SetConfig+0x344>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d130      	bne.n	8005f98 <UART_SetConfig+0x2d4>
 8005f36:	4b31      	ldr	r3, [pc, #196]	@ (8005ffc <UART_SetConfig+0x338>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	2b05      	cmp	r3, #5
 8005f40:	d826      	bhi.n	8005f90 <UART_SetConfig+0x2cc>
 8005f42:	a201      	add	r2, pc, #4	@ (adr r2, 8005f48 <UART_SetConfig+0x284>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f61 	.word	0x08005f61
 8005f4c:	08005f69 	.word	0x08005f69
 8005f50:	08005f71 	.word	0x08005f71
 8005f54:	08005f79 	.word	0x08005f79
 8005f58:	08005f81 	.word	0x08005f81
 8005f5c:	08005f89 	.word	0x08005f89
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e180      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e17c      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e178      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e174      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f80:	2320      	movs	r3, #32
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e170      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f88:	2340      	movs	r3, #64	@ 0x40
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e16c      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f90:	2380      	movs	r3, #128	@ 0x80
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e168      	b.n	800626a <UART_SetConfig+0x5a6>
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800600c <UART_SetConfig+0x348>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d142      	bne.n	8006028 <UART_SetConfig+0x364>
 8005fa2:	4b16      	ldr	r3, [pc, #88]	@ (8005ffc <UART_SetConfig+0x338>)
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	d838      	bhi.n	8006020 <UART_SetConfig+0x35c>
 8005fae:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <UART_SetConfig+0x2f0>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fcd 	.word	0x08005fcd
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	08005fdd 	.word	0x08005fdd
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08006011 	.word	0x08006011
 8005fc8:	08006019 	.word	0x08006019
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e14a      	b.n	800626a <UART_SetConfig+0x5a6>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e146      	b.n	800626a <UART_SetConfig+0x5a6>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e142      	b.n	800626a <UART_SetConfig+0x5a6>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e13e      	b.n	800626a <UART_SetConfig+0x5a6>
 8005fec:	cfff69f3 	.word	0xcfff69f3
 8005ff0:	58000c00 	.word	0x58000c00
 8005ff4:	11fff4ff 	.word	0x11fff4ff
 8005ff8:	40011000 	.word	0x40011000
 8005ffc:	58024400 	.word	0x58024400
 8006000:	40004400 	.word	0x40004400
 8006004:	40004800 	.word	0x40004800
 8006008:	40004c00 	.word	0x40004c00
 800600c:	40005000 	.word	0x40005000
 8006010:	2320      	movs	r3, #32
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e128      	b.n	800626a <UART_SetConfig+0x5a6>
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e124      	b.n	800626a <UART_SetConfig+0x5a6>
 8006020:	2380      	movs	r3, #128	@ 0x80
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e120      	b.n	800626a <UART_SetConfig+0x5a6>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4acb      	ldr	r2, [pc, #812]	@ (800635c <UART_SetConfig+0x698>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d176      	bne.n	8006120 <UART_SetConfig+0x45c>
 8006032:	4bcb      	ldr	r3, [pc, #812]	@ (8006360 <UART_SetConfig+0x69c>)
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800603a:	2b28      	cmp	r3, #40	@ 0x28
 800603c:	d86c      	bhi.n	8006118 <UART_SetConfig+0x454>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <UART_SetConfig+0x380>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	080060e9 	.word	0x080060e9
 8006048:	08006119 	.word	0x08006119
 800604c:	08006119 	.word	0x08006119
 8006050:	08006119 	.word	0x08006119
 8006054:	08006119 	.word	0x08006119
 8006058:	08006119 	.word	0x08006119
 800605c:	08006119 	.word	0x08006119
 8006060:	08006119 	.word	0x08006119
 8006064:	080060f1 	.word	0x080060f1
 8006068:	08006119 	.word	0x08006119
 800606c:	08006119 	.word	0x08006119
 8006070:	08006119 	.word	0x08006119
 8006074:	08006119 	.word	0x08006119
 8006078:	08006119 	.word	0x08006119
 800607c:	08006119 	.word	0x08006119
 8006080:	08006119 	.word	0x08006119
 8006084:	080060f9 	.word	0x080060f9
 8006088:	08006119 	.word	0x08006119
 800608c:	08006119 	.word	0x08006119
 8006090:	08006119 	.word	0x08006119
 8006094:	08006119 	.word	0x08006119
 8006098:	08006119 	.word	0x08006119
 800609c:	08006119 	.word	0x08006119
 80060a0:	08006119 	.word	0x08006119
 80060a4:	08006101 	.word	0x08006101
 80060a8:	08006119 	.word	0x08006119
 80060ac:	08006119 	.word	0x08006119
 80060b0:	08006119 	.word	0x08006119
 80060b4:	08006119 	.word	0x08006119
 80060b8:	08006119 	.word	0x08006119
 80060bc:	08006119 	.word	0x08006119
 80060c0:	08006119 	.word	0x08006119
 80060c4:	08006109 	.word	0x08006109
 80060c8:	08006119 	.word	0x08006119
 80060cc:	08006119 	.word	0x08006119
 80060d0:	08006119 	.word	0x08006119
 80060d4:	08006119 	.word	0x08006119
 80060d8:	08006119 	.word	0x08006119
 80060dc:	08006119 	.word	0x08006119
 80060e0:	08006119 	.word	0x08006119
 80060e4:	08006111 	.word	0x08006111
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ee:	e0bc      	b.n	800626a <UART_SetConfig+0x5a6>
 80060f0:	2304      	movs	r3, #4
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f6:	e0b8      	b.n	800626a <UART_SetConfig+0x5a6>
 80060f8:	2308      	movs	r3, #8
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e0b4      	b.n	800626a <UART_SetConfig+0x5a6>
 8006100:	2310      	movs	r3, #16
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e0b0      	b.n	800626a <UART_SetConfig+0x5a6>
 8006108:	2320      	movs	r3, #32
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e0ac      	b.n	800626a <UART_SetConfig+0x5a6>
 8006110:	2340      	movs	r3, #64	@ 0x40
 8006112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006116:	e0a8      	b.n	800626a <UART_SetConfig+0x5a6>
 8006118:	2380      	movs	r3, #128	@ 0x80
 800611a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611e:	e0a4      	b.n	800626a <UART_SetConfig+0x5a6>
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a8f      	ldr	r2, [pc, #572]	@ (8006364 <UART_SetConfig+0x6a0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d130      	bne.n	800618c <UART_SetConfig+0x4c8>
 800612a:	4b8d      	ldr	r3, [pc, #564]	@ (8006360 <UART_SetConfig+0x69c>)
 800612c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	2b05      	cmp	r3, #5
 8006134:	d826      	bhi.n	8006184 <UART_SetConfig+0x4c0>
 8006136:	a201      	add	r2, pc, #4	@ (adr r2, 800613c <UART_SetConfig+0x478>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	08006155 	.word	0x08006155
 8006140:	0800615d 	.word	0x0800615d
 8006144:	08006165 	.word	0x08006165
 8006148:	0800616d 	.word	0x0800616d
 800614c:	08006175 	.word	0x08006175
 8006150:	0800617d 	.word	0x0800617d
 8006154:	2300      	movs	r3, #0
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615a:	e086      	b.n	800626a <UART_SetConfig+0x5a6>
 800615c:	2304      	movs	r3, #4
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e082      	b.n	800626a <UART_SetConfig+0x5a6>
 8006164:	2308      	movs	r3, #8
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e07e      	b.n	800626a <UART_SetConfig+0x5a6>
 800616c:	2310      	movs	r3, #16
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e07a      	b.n	800626a <UART_SetConfig+0x5a6>
 8006174:	2320      	movs	r3, #32
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e076      	b.n	800626a <UART_SetConfig+0x5a6>
 800617c:	2340      	movs	r3, #64	@ 0x40
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006182:	e072      	b.n	800626a <UART_SetConfig+0x5a6>
 8006184:	2380      	movs	r3, #128	@ 0x80
 8006186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618a:	e06e      	b.n	800626a <UART_SetConfig+0x5a6>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a75      	ldr	r2, [pc, #468]	@ (8006368 <UART_SetConfig+0x6a4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d130      	bne.n	80061f8 <UART_SetConfig+0x534>
 8006196:	4b72      	ldr	r3, [pc, #456]	@ (8006360 <UART_SetConfig+0x69c>)
 8006198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	2b05      	cmp	r3, #5
 80061a0:	d826      	bhi.n	80061f0 <UART_SetConfig+0x52c>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0x4e4>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061c1 	.word	0x080061c1
 80061ac:	080061c9 	.word	0x080061c9
 80061b0:	080061d1 	.word	0x080061d1
 80061b4:	080061d9 	.word	0x080061d9
 80061b8:	080061e1 	.word	0x080061e1
 80061bc:	080061e9 	.word	0x080061e9
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c6:	e050      	b.n	800626a <UART_SetConfig+0x5a6>
 80061c8:	2304      	movs	r3, #4
 80061ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ce:	e04c      	b.n	800626a <UART_SetConfig+0x5a6>
 80061d0:	2308      	movs	r3, #8
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d6:	e048      	b.n	800626a <UART_SetConfig+0x5a6>
 80061d8:	2310      	movs	r3, #16
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061de:	e044      	b.n	800626a <UART_SetConfig+0x5a6>
 80061e0:	2320      	movs	r3, #32
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e6:	e040      	b.n	800626a <UART_SetConfig+0x5a6>
 80061e8:	2340      	movs	r3, #64	@ 0x40
 80061ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ee:	e03c      	b.n	800626a <UART_SetConfig+0x5a6>
 80061f0:	2380      	movs	r3, #128	@ 0x80
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f6:	e038      	b.n	800626a <UART_SetConfig+0x5a6>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a5b      	ldr	r2, [pc, #364]	@ (800636c <UART_SetConfig+0x6a8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d130      	bne.n	8006264 <UART_SetConfig+0x5a0>
 8006202:	4b57      	ldr	r3, [pc, #348]	@ (8006360 <UART_SetConfig+0x69c>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	2b05      	cmp	r3, #5
 800620c:	d826      	bhi.n	800625c <UART_SetConfig+0x598>
 800620e:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <UART_SetConfig+0x550>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	0800622d 	.word	0x0800622d
 8006218:	08006235 	.word	0x08006235
 800621c:	0800623d 	.word	0x0800623d
 8006220:	08006245 	.word	0x08006245
 8006224:	0800624d 	.word	0x0800624d
 8006228:	08006255 	.word	0x08006255
 800622c:	2302      	movs	r3, #2
 800622e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006232:	e01a      	b.n	800626a <UART_SetConfig+0x5a6>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623a:	e016      	b.n	800626a <UART_SetConfig+0x5a6>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006242:	e012      	b.n	800626a <UART_SetConfig+0x5a6>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624a:	e00e      	b.n	800626a <UART_SetConfig+0x5a6>
 800624c:	2320      	movs	r3, #32
 800624e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006252:	e00a      	b.n	800626a <UART_SetConfig+0x5a6>
 8006254:	2340      	movs	r3, #64	@ 0x40
 8006256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625a:	e006      	b.n	800626a <UART_SetConfig+0x5a6>
 800625c:	2380      	movs	r3, #128	@ 0x80
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006262:	e002      	b.n	800626a <UART_SetConfig+0x5a6>
 8006264:	2380      	movs	r3, #128	@ 0x80
 8006266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a3f      	ldr	r2, [pc, #252]	@ (800636c <UART_SetConfig+0x6a8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	f040 80f8 	bne.w	8006466 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006276:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800627a:	2b20      	cmp	r3, #32
 800627c:	dc46      	bgt.n	800630c <UART_SetConfig+0x648>
 800627e:	2b02      	cmp	r3, #2
 8006280:	f2c0 8082 	blt.w	8006388 <UART_SetConfig+0x6c4>
 8006284:	3b02      	subs	r3, #2
 8006286:	2b1e      	cmp	r3, #30
 8006288:	d87e      	bhi.n	8006388 <UART_SetConfig+0x6c4>
 800628a:	a201      	add	r2, pc, #4	@ (adr r2, 8006290 <UART_SetConfig+0x5cc>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	08006313 	.word	0x08006313
 8006294:	08006389 	.word	0x08006389
 8006298:	0800631b 	.word	0x0800631b
 800629c:	08006389 	.word	0x08006389
 80062a0:	08006389 	.word	0x08006389
 80062a4:	08006389 	.word	0x08006389
 80062a8:	0800632b 	.word	0x0800632b
 80062ac:	08006389 	.word	0x08006389
 80062b0:	08006389 	.word	0x08006389
 80062b4:	08006389 	.word	0x08006389
 80062b8:	08006389 	.word	0x08006389
 80062bc:	08006389 	.word	0x08006389
 80062c0:	08006389 	.word	0x08006389
 80062c4:	08006389 	.word	0x08006389
 80062c8:	0800633b 	.word	0x0800633b
 80062cc:	08006389 	.word	0x08006389
 80062d0:	08006389 	.word	0x08006389
 80062d4:	08006389 	.word	0x08006389
 80062d8:	08006389 	.word	0x08006389
 80062dc:	08006389 	.word	0x08006389
 80062e0:	08006389 	.word	0x08006389
 80062e4:	08006389 	.word	0x08006389
 80062e8:	08006389 	.word	0x08006389
 80062ec:	08006389 	.word	0x08006389
 80062f0:	08006389 	.word	0x08006389
 80062f4:	08006389 	.word	0x08006389
 80062f8:	08006389 	.word	0x08006389
 80062fc:	08006389 	.word	0x08006389
 8006300:	08006389 	.word	0x08006389
 8006304:	08006389 	.word	0x08006389
 8006308:	0800637b 	.word	0x0800637b
 800630c:	2b40      	cmp	r3, #64	@ 0x40
 800630e:	d037      	beq.n	8006380 <UART_SetConfig+0x6bc>
 8006310:	e03a      	b.n	8006388 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006312:	f7fe fb95 	bl	8004a40 <HAL_RCCEx_GetD3PCLK1Freq>
 8006316:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006318:	e03c      	b.n	8006394 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fba4 	bl	8004a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006328:	e034      	b.n	8006394 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800632a:	f107 0318 	add.w	r3, r7, #24
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fcf0 	bl	8004d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006338:	e02c      	b.n	8006394 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800633a:	4b09      	ldr	r3, [pc, #36]	@ (8006360 <UART_SetConfig+0x69c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d016      	beq.n	8006374 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006346:	4b06      	ldr	r3, [pc, #24]	@ (8006360 <UART_SetConfig+0x69c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	08db      	lsrs	r3, r3, #3
 800634c:	f003 0303 	and.w	r3, r3, #3
 8006350:	4a07      	ldr	r2, [pc, #28]	@ (8006370 <UART_SetConfig+0x6ac>)
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006358:	e01c      	b.n	8006394 <UART_SetConfig+0x6d0>
 800635a:	bf00      	nop
 800635c:	40011400 	.word	0x40011400
 8006360:	58024400 	.word	0x58024400
 8006364:	40007800 	.word	0x40007800
 8006368:	40007c00 	.word	0x40007c00
 800636c:	58000c00 	.word	0x58000c00
 8006370:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006374:	4b9d      	ldr	r3, [pc, #628]	@ (80065ec <UART_SetConfig+0x928>)
 8006376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006378:	e00c      	b.n	8006394 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800637a:	4b9d      	ldr	r3, [pc, #628]	@ (80065f0 <UART_SetConfig+0x92c>)
 800637c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637e:	e009      	b.n	8006394 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006386:	e005      	b.n	8006394 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006392:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 81de 	beq.w	8006758 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	4a94      	ldr	r2, [pc, #592]	@ (80065f4 <UART_SetConfig+0x930>)
 80063a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063a6:	461a      	mov	r2, r3
 80063a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80063ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	4413      	add	r3, r2
 80063ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063bc:	429a      	cmp	r2, r3
 80063be:	d305      	bcc.n	80063cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d903      	bls.n	80063d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063d2:	e1c1      	b.n	8006758 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d6:	2200      	movs	r2, #0
 80063d8:	60bb      	str	r3, [r7, #8]
 80063da:	60fa      	str	r2, [r7, #12]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	4a84      	ldr	r2, [pc, #528]	@ (80065f4 <UART_SetConfig+0x930>)
 80063e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2200      	movs	r2, #0
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063f6:	f7f9 ff73 	bl	80002e0 <__aeabi_uldivmod>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4610      	mov	r0, r2
 8006400:	4619      	mov	r1, r3
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	f04f 0300 	mov.w	r3, #0
 800640a:	020b      	lsls	r3, r1, #8
 800640c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006410:	0202      	lsls	r2, r0, #8
 8006412:	6979      	ldr	r1, [r7, #20]
 8006414:	6849      	ldr	r1, [r1, #4]
 8006416:	0849      	lsrs	r1, r1, #1
 8006418:	2000      	movs	r0, #0
 800641a:	460c      	mov	r4, r1
 800641c:	4605      	mov	r5, r0
 800641e:	eb12 0804 	adds.w	r8, r2, r4
 8006422:	eb43 0905 	adc.w	r9, r3, r5
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	469a      	mov	sl, r3
 800642e:	4693      	mov	fp, r2
 8006430:	4652      	mov	r2, sl
 8006432:	465b      	mov	r3, fp
 8006434:	4640      	mov	r0, r8
 8006436:	4649      	mov	r1, r9
 8006438:	f7f9 ff52 	bl	80002e0 <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4613      	mov	r3, r2
 8006442:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644a:	d308      	bcc.n	800645e <UART_SetConfig+0x79a>
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006452:	d204      	bcs.n	800645e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800645a:	60da      	str	r2, [r3, #12]
 800645c:	e17c      	b.n	8006758 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006464:	e178      	b.n	8006758 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800646e:	f040 80c5 	bne.w	80065fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006472:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006476:	2b20      	cmp	r3, #32
 8006478:	dc48      	bgt.n	800650c <UART_SetConfig+0x848>
 800647a:	2b00      	cmp	r3, #0
 800647c:	db7b      	blt.n	8006576 <UART_SetConfig+0x8b2>
 800647e:	2b20      	cmp	r3, #32
 8006480:	d879      	bhi.n	8006576 <UART_SetConfig+0x8b2>
 8006482:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <UART_SetConfig+0x7c4>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	08006513 	.word	0x08006513
 800648c:	0800651b 	.word	0x0800651b
 8006490:	08006577 	.word	0x08006577
 8006494:	08006577 	.word	0x08006577
 8006498:	08006523 	.word	0x08006523
 800649c:	08006577 	.word	0x08006577
 80064a0:	08006577 	.word	0x08006577
 80064a4:	08006577 	.word	0x08006577
 80064a8:	08006533 	.word	0x08006533
 80064ac:	08006577 	.word	0x08006577
 80064b0:	08006577 	.word	0x08006577
 80064b4:	08006577 	.word	0x08006577
 80064b8:	08006577 	.word	0x08006577
 80064bc:	08006577 	.word	0x08006577
 80064c0:	08006577 	.word	0x08006577
 80064c4:	08006577 	.word	0x08006577
 80064c8:	08006543 	.word	0x08006543
 80064cc:	08006577 	.word	0x08006577
 80064d0:	08006577 	.word	0x08006577
 80064d4:	08006577 	.word	0x08006577
 80064d8:	08006577 	.word	0x08006577
 80064dc:	08006577 	.word	0x08006577
 80064e0:	08006577 	.word	0x08006577
 80064e4:	08006577 	.word	0x08006577
 80064e8:	08006577 	.word	0x08006577
 80064ec:	08006577 	.word	0x08006577
 80064f0:	08006577 	.word	0x08006577
 80064f4:	08006577 	.word	0x08006577
 80064f8:	08006577 	.word	0x08006577
 80064fc:	08006577 	.word	0x08006577
 8006500:	08006577 	.word	0x08006577
 8006504:	08006577 	.word	0x08006577
 8006508:	08006569 	.word	0x08006569
 800650c:	2b40      	cmp	r3, #64	@ 0x40
 800650e:	d02e      	beq.n	800656e <UART_SetConfig+0x8aa>
 8006510:	e031      	b.n	8006576 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006512:	f7fd f85f 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 8006516:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006518:	e033      	b.n	8006582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651a:	f7fd f871 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 800651e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006520:	e02f      	b.n	8006582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006526:	4618      	mov	r0, r3
 8006528:	f7fe faa0 	bl	8004a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006530:	e027      	b.n	8006582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006532:	f107 0318 	add.w	r3, r7, #24
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fbec 	bl	8004d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006540:	e01f      	b.n	8006582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006542:	4b2d      	ldr	r3, [pc, #180]	@ (80065f8 <UART_SetConfig+0x934>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800654e:	4b2a      	ldr	r3, [pc, #168]	@ (80065f8 <UART_SetConfig+0x934>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	08db      	lsrs	r3, r3, #3
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	4a24      	ldr	r2, [pc, #144]	@ (80065ec <UART_SetConfig+0x928>)
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006560:	e00f      	b.n	8006582 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006562:	4b22      	ldr	r3, [pc, #136]	@ (80065ec <UART_SetConfig+0x928>)
 8006564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006566:	e00c      	b.n	8006582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006568:	4b21      	ldr	r3, [pc, #132]	@ (80065f0 <UART_SetConfig+0x92c>)
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800656c:	e009      	b.n	8006582 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006574:	e005      	b.n	8006582 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80e7 	beq.w	8006758 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	4a19      	ldr	r2, [pc, #100]	@ (80065f4 <UART_SetConfig+0x930>)
 8006590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006594:	461a      	mov	r2, r3
 8006596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006598:	fbb3 f3f2 	udiv	r3, r3, r2
 800659c:	005a      	lsls	r2, r3, #1
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	441a      	add	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	2b0f      	cmp	r3, #15
 80065b4:	d916      	bls.n	80065e4 <UART_SetConfig+0x920>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065bc:	d212      	bcs.n	80065e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f023 030f 	bic.w	r3, r3, #15
 80065c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ca:	085b      	lsrs	r3, r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065d6:	4313      	orrs	r3, r2
 80065d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e0b9      	b.n	8006758 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065ea:	e0b5      	b.n	8006758 <UART_SetConfig+0xa94>
 80065ec:	03d09000 	.word	0x03d09000
 80065f0:	003d0900 	.word	0x003d0900
 80065f4:	0800baa0 	.word	0x0800baa0
 80065f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80065fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006600:	2b20      	cmp	r3, #32
 8006602:	dc49      	bgt.n	8006698 <UART_SetConfig+0x9d4>
 8006604:	2b00      	cmp	r3, #0
 8006606:	db7c      	blt.n	8006702 <UART_SetConfig+0xa3e>
 8006608:	2b20      	cmp	r3, #32
 800660a:	d87a      	bhi.n	8006702 <UART_SetConfig+0xa3e>
 800660c:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <UART_SetConfig+0x950>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	0800669f 	.word	0x0800669f
 8006618:	080066a7 	.word	0x080066a7
 800661c:	08006703 	.word	0x08006703
 8006620:	08006703 	.word	0x08006703
 8006624:	080066af 	.word	0x080066af
 8006628:	08006703 	.word	0x08006703
 800662c:	08006703 	.word	0x08006703
 8006630:	08006703 	.word	0x08006703
 8006634:	080066bf 	.word	0x080066bf
 8006638:	08006703 	.word	0x08006703
 800663c:	08006703 	.word	0x08006703
 8006640:	08006703 	.word	0x08006703
 8006644:	08006703 	.word	0x08006703
 8006648:	08006703 	.word	0x08006703
 800664c:	08006703 	.word	0x08006703
 8006650:	08006703 	.word	0x08006703
 8006654:	080066cf 	.word	0x080066cf
 8006658:	08006703 	.word	0x08006703
 800665c:	08006703 	.word	0x08006703
 8006660:	08006703 	.word	0x08006703
 8006664:	08006703 	.word	0x08006703
 8006668:	08006703 	.word	0x08006703
 800666c:	08006703 	.word	0x08006703
 8006670:	08006703 	.word	0x08006703
 8006674:	08006703 	.word	0x08006703
 8006678:	08006703 	.word	0x08006703
 800667c:	08006703 	.word	0x08006703
 8006680:	08006703 	.word	0x08006703
 8006684:	08006703 	.word	0x08006703
 8006688:	08006703 	.word	0x08006703
 800668c:	08006703 	.word	0x08006703
 8006690:	08006703 	.word	0x08006703
 8006694:	080066f5 	.word	0x080066f5
 8006698:	2b40      	cmp	r3, #64	@ 0x40
 800669a:	d02e      	beq.n	80066fa <UART_SetConfig+0xa36>
 800669c:	e031      	b.n	8006702 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800669e:	f7fc ff99 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 80066a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066a4:	e033      	b.n	800670e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066a6:	f7fc ffab 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 80066aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066ac:	e02f      	b.n	800670e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fe f9da 	bl	8004a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066bc:	e027      	b.n	800670e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066be:	f107 0318 	add.w	r3, r7, #24
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fb26 	bl	8004d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066cc:	e01f      	b.n	800670e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006784 <UART_SetConfig+0xac0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066da:	4b2a      	ldr	r3, [pc, #168]	@ (8006784 <UART_SetConfig+0xac0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	08db      	lsrs	r3, r3, #3
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	4a28      	ldr	r2, [pc, #160]	@ (8006788 <UART_SetConfig+0xac4>)
 80066e6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066ec:	e00f      	b.n	800670e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80066ee:	4b26      	ldr	r3, [pc, #152]	@ (8006788 <UART_SetConfig+0xac4>)
 80066f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f2:	e00c      	b.n	800670e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066f4:	4b25      	ldr	r3, [pc, #148]	@ (800678c <UART_SetConfig+0xac8>)
 80066f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f8:	e009      	b.n	800670e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006700:	e005      	b.n	800670e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800670c:	bf00      	nop
    }

    if (pclk != 0U)
 800670e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d021      	beq.n	8006758 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	4a1d      	ldr	r2, [pc, #116]	@ (8006790 <UART_SetConfig+0xacc>)
 800671a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800671e:	461a      	mov	r2, r3
 8006720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006722:	fbb3 f2f2 	udiv	r2, r3, r2
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	441a      	add	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	fbb2 f3f3 	udiv	r3, r2, r3
 8006736:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	2b0f      	cmp	r3, #15
 800673c:	d909      	bls.n	8006752 <UART_SetConfig+0xa8e>
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006744:	d205      	bcs.n	8006752 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	b29a      	uxth	r2, r3
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60da      	str	r2, [r3, #12]
 8006750:	e002      	b.n	8006758 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2201      	movs	r2, #1
 800675c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2201      	movs	r2, #1
 8006764:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2200      	movs	r2, #0
 800676c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006774:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006778:	4618      	mov	r0, r3
 800677a:	3748      	adds	r7, #72	@ 0x48
 800677c:	46bd      	mov	sp, r7
 800677e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006782:	bf00      	nop
 8006784:	58024400 	.word	0x58024400
 8006788:	03d09000 	.word	0x03d09000
 800678c:	003d0900 	.word	0x003d0900
 8006790:	0800baa0 	.word	0x0800baa0

08006794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	f003 0304 	and.w	r3, r3, #4
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01a      	beq.n	80068aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006892:	d10a      	bne.n	80068aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  }
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b098      	sub	sp, #96	@ 0x60
 80068dc:	af02      	add	r7, sp, #8
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068e8:	f7fa fd1c 	bl	8001324 <HAL_GetTick>
 80068ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d12f      	bne.n	800695c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006904:	2200      	movs	r2, #0
 8006906:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f88e 	bl	8006a2c <UART_WaitOnFlagUntilTimeout>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d022      	beq.n	800695c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	e853 3f00 	ldrex	r3, [r3]
 8006922:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800692a:	653b      	str	r3, [r7, #80]	@ 0x50
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006934:	647b      	str	r3, [r7, #68]	@ 0x44
 8006936:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800693a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e6      	bne.n	8006916 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e063      	b.n	8006a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b04      	cmp	r3, #4
 8006968:	d149      	bne.n	80069fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006972:	2200      	movs	r2, #0
 8006974:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f857 	bl	8006a2c <UART_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d03c      	beq.n	80069fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	623b      	str	r3, [r7, #32]
   return(result);
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069aa:	e841 2300 	strex	r3, r2, [r1]
 80069ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e6      	bne.n	8006984 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3308      	adds	r3, #8
 80069bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d6:	61fa      	str	r2, [r7, #28]
 80069d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	69b9      	ldr	r1, [r7, #24]
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	617b      	str	r3, [r7, #20]
   return(result);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e5      	bne.n	80069b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e012      	b.n	8006a24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3758      	adds	r7, #88	@ 0x58
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3c:	e04f      	b.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d04b      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a46:	f7fa fc6d 	bl	8001324 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	69ba      	ldr	r2, [r7, #24]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d302      	bcc.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e04e      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d037      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b80      	cmp	r3, #128	@ 0x80
 8006a72:	d034      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b40      	cmp	r3, #64	@ 0x40
 8006a78:	d031      	beq.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	f003 0308 	and.w	r3, r3, #8
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d110      	bne.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2208      	movs	r2, #8
 8006a8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f95b 	bl	8006d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2208      	movs	r2, #8
 8006a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e029      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ab4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab8:	d111      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f941 	bl	8006d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e00f      	b.n	8006afe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d0a0      	beq.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b0a3      	sub	sp, #140	@ 0x8c
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	4613      	mov	r3, r2
 8006b14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	88fa      	ldrh	r2, [r7, #6]
 8006b28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3a:	d10e      	bne.n	8006b5a <UART_Start_Receive_IT+0x52>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <UART_Start_Receive_IT+0x48>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b4e:	e02d      	b.n	8006bac <UART_Start_Receive_IT+0xa4>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	22ff      	movs	r2, #255	@ 0xff
 8006b54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b58:	e028      	b.n	8006bac <UART_Start_Receive_IT+0xa4>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10d      	bne.n	8006b7e <UART_Start_Receive_IT+0x76>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d104      	bne.n	8006b74 <UART_Start_Receive_IT+0x6c>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	22ff      	movs	r2, #255	@ 0xff
 8006b6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b72:	e01b      	b.n	8006bac <UART_Start_Receive_IT+0xa4>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	227f      	movs	r2, #127	@ 0x7f
 8006b78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b7c:	e016      	b.n	8006bac <UART_Start_Receive_IT+0xa4>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b86:	d10d      	bne.n	8006ba4 <UART_Start_Receive_IT+0x9c>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <UART_Start_Receive_IT+0x92>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	227f      	movs	r2, #127	@ 0x7f
 8006b94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b98:	e008      	b.n	8006bac <UART_Start_Receive_IT+0xa4>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	223f      	movs	r2, #63	@ 0x3f
 8006b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ba2:	e003      	b.n	8006bac <UART_Start_Receive_IT+0xa4>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2222      	movs	r2, #34	@ 0x22
 8006bb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006bcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006be0:	673a      	str	r2, [r7, #112]	@ 0x70
 8006be2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006be6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006bee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e3      	bne.n	8006bbc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bfc:	d14f      	bne.n	8006c9e <UART_Start_Receive_IT+0x196>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c04:	88fa      	ldrh	r2, [r7, #6]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d349      	bcc.n	8006c9e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c12:	d107      	bne.n	8006c24 <UART_Start_Receive_IT+0x11c>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d103      	bne.n	8006c24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4a47      	ldr	r2, [pc, #284]	@ (8006d3c <UART_Start_Receive_IT+0x234>)
 8006c20:	675a      	str	r2, [r3, #116]	@ 0x74
 8006c22:	e002      	b.n	8006c2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a46      	ldr	r2, [pc, #280]	@ (8006d40 <UART_Start_Receive_IT+0x238>)
 8006c28:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01a      	beq.n	8006c68 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c56:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e4      	bne.n	8006c32 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006c88:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006c8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_Start_Receive_IT+0x160>
 8006c9c:	e046      	b.n	8006d2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca6:	d107      	bne.n	8006cb8 <UART_Start_Receive_IT+0x1b0>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d103      	bne.n	8006cb8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4a24      	ldr	r2, [pc, #144]	@ (8006d44 <UART_Start_Receive_IT+0x23c>)
 8006cb4:	675a      	str	r2, [r3, #116]	@ 0x74
 8006cb6:	e002      	b.n	8006cbe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4a23      	ldr	r2, [pc, #140]	@ (8006d48 <UART_Start_Receive_IT+0x240>)
 8006cbc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d019      	beq.n	8006cfa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006cda:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e6      	bne.n	8006cc6 <UART_Start_Receive_IT+0x1be>
 8006cf8:	e018      	b.n	8006d2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	613b      	str	r3, [r7, #16]
   return(result);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f043 0320 	orr.w	r3, r3, #32
 8006d0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d18:	623b      	str	r3, [r7, #32]
 8006d1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	69f9      	ldr	r1, [r7, #28]
 8006d1e:	6a3a      	ldr	r2, [r7, #32]
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e6      	bne.n	8006cfa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	378c      	adds	r7, #140	@ 0x8c
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	08007569 	.word	0x08007569
 8006d40:	08007205 	.word	0x08007205
 8006d44:	0800704d 	.word	0x0800704d
 8006d48:	08006e95 	.word	0x08006e95

08006d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b095      	sub	sp, #84	@ 0x54
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d7a:	e841 2300 	strex	r3, r2, [r1]
 8006d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e6      	bne.n	8006d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	4b1e      	ldr	r3, [pc, #120]	@ (8006e14 <UART_EndRxTransfer+0xc8>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e5      	bne.n	8006d86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d118      	bne.n	8006df4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f023 0310 	bic.w	r3, r3, #16
 8006dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6979      	ldr	r1, [r7, #20]
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	613b      	str	r3, [r7, #16]
   return(result);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e6      	bne.n	8006dc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e08:	bf00      	nop
 8006e0a:	3754      	adds	r7, #84	@ 0x54
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr
 8006e14:	effffffe 	.word	0xeffffffe

08006e18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7fe ff32 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e34:	bf00      	nop
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6979      	ldr	r1, [r7, #20]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e6      	bne.n	8006e44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fe fefd 	bl	8005c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e8a:	bf00      	nop
 8006e8c:	3720      	adds	r7, #32
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b09c      	sub	sp, #112	@ 0x70
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ea2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eac:	2b22      	cmp	r3, #34	@ 0x22
 8006eae:	f040 80be 	bne.w	800702e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ebc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006ec0:	b2d9      	uxtb	r1, r3
 8006ec2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ecc:	400a      	ands	r2, r1
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f040 80a1 	bne.w	800703e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f04:	e853 3f00 	ldrex	r3, [r3]
 8006f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e6      	bne.n	8006efc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3308      	adds	r3, #8
 8006f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f56:	e841 2300 	strex	r3, r2, [r1]
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1e5      	bne.n	8006f2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a33      	ldr	r2, [pc, #204]	@ (8007048 <UART_RxISR_8BIT+0x1b4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d01f      	beq.n	8006fc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fa2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e6      	bne.n	8006f8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d12e      	bne.n	8007026 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 0310 	bic.w	r3, r3, #16
 8006fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fec:	61fb      	str	r3, [r7, #28]
 8006fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	69b9      	ldr	r1, [r7, #24]
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e6      	bne.n	8006fce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	f003 0310 	and.w	r3, r3, #16
 800700a:	2b10      	cmp	r3, #16
 800700c:	d103      	bne.n	8007016 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2210      	movs	r2, #16
 8007014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fe fe44 	bl	8005cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007024:	e00b      	b.n	800703e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7f9 fbba 	bl	80007a0 <HAL_UART_RxCpltCallback>
}
 800702c:	e007      	b.n	800703e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699a      	ldr	r2, [r3, #24]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0208 	orr.w	r2, r2, #8
 800703c:	619a      	str	r2, [r3, #24]
}
 800703e:	bf00      	nop
 8007040:	3770      	adds	r7, #112	@ 0x70
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	58000c00 	.word	0x58000c00

0800704c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b09c      	sub	sp, #112	@ 0x70
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800705a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007064:	2b22      	cmp	r3, #34	@ 0x22
 8007066:	f040 80be 	bne.w	80071e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007070:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007078:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800707a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800707e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007082:	4013      	ands	r3, r2
 8007084:	b29a      	uxth	r2, r3
 8007086:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708e:	1c9a      	adds	r2, r3, #2
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 80a1 	bne.w	80071f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80070d4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e6      	bne.n	80070b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007106:	643a      	str	r2, [r7, #64]	@ 0x40
 8007108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800710c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a33      	ldr	r2, [pc, #204]	@ (8007200 <UART_RxISR_16BIT+0x1b4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d01f      	beq.n	8007178 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d018      	beq.n	8007178 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	61fb      	str	r3, [r7, #28]
   return(result);
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800715a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007166:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800716a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d12e      	bne.n	80071de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	60bb      	str	r3, [r7, #8]
   return(result);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f023 0310 	bic.w	r3, r3, #16
 800719a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071a4:	61bb      	str	r3, [r7, #24]
 80071a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6979      	ldr	r1, [r7, #20]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	613b      	str	r3, [r7, #16]
   return(result);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e6      	bne.n	8007186 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b10      	cmp	r3, #16
 80071c4:	d103      	bne.n	80071ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2210      	movs	r2, #16
 80071cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fe fd68 	bl	8005cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071dc:	e00b      	b.n	80071f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7f9 fade 	bl	80007a0 <HAL_UART_RxCpltCallback>
}
 80071e4:	e007      	b.n	80071f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699a      	ldr	r2, [r3, #24]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0208 	orr.w	r2, r2, #8
 80071f4:	619a      	str	r2, [r3, #24]
}
 80071f6:	bf00      	nop
 80071f8:	3770      	adds	r7, #112	@ 0x70
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	58000c00 	.word	0x58000c00

08007204 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b0ac      	sub	sp, #176	@ 0xb0
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007212:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800723a:	2b22      	cmp	r3, #34	@ 0x22
 800723c:	f040 8181 	bne.w	8007542 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007246:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800724a:	e124      	b.n	8007496 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007256:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800725a:	b2d9      	uxtb	r1, r3
 800725c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007260:	b2da      	uxtb	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007266:	400a      	ands	r2, r1
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	2b00      	cmp	r3, #0
 800729c:	d053      	beq.n	8007346 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800729e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d011      	beq.n	80072ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80072aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00b      	beq.n	80072ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2201      	movs	r2, #1
 80072bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c4:	f043 0201 	orr.w	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d011      	beq.n	80072fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80072da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00b      	beq.n	80072fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2202      	movs	r2, #2
 80072ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f4:	f043 0204 	orr.w	r2, r3, #4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d011      	beq.n	800732e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800730a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2204      	movs	r2, #4
 800731c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007324:	f043 0202 	orr.w	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007334:	2b00      	cmp	r3, #0
 8007336:	d006      	beq.n	8007346 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fe fcad 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 80a1 	bne.w	8007496 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007378:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800737c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e4      	bne.n	8007354 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800739a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800739c:	4b6f      	ldr	r3, [pc, #444]	@ (800755c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800739e:	4013      	ands	r3, r2
 80073a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073ae:	66ba      	str	r2, [r7, #104]	@ 0x68
 80073b0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80073b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80073b6:	e841 2300 	strex	r3, r2, [r1]
 80073ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80073bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1e3      	bne.n	800738a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a61      	ldr	r2, [pc, #388]	@ (8007560 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d021      	beq.n	8007424 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d01a      	beq.n	8007424 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007410:	657b      	str	r3, [r7, #84]	@ 0x54
 8007412:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007416:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800741e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e4      	bne.n	80073ee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007428:	2b01      	cmp	r3, #1
 800742a:	d130      	bne.n	800748e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743a:	e853 3f00 	ldrex	r3, [r3]
 800743e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	f023 0310 	bic.w	r3, r3, #16
 8007446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007454:	643b      	str	r3, [r7, #64]	@ 0x40
 8007456:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800745a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e4      	bne.n	8007432 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 0310 	and.w	r3, r3, #16
 8007472:	2b10      	cmp	r3, #16
 8007474:	d103      	bne.n	800747e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2210      	movs	r2, #16
 800747c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fe fc10 	bl	8005cac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800748c:	e00e      	b.n	80074ac <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7f9 f986 	bl	80007a0 <HAL_UART_RxCpltCallback>
        break;
 8007494:	e00a      	b.n	80074ac <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007496:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800749a:	2b00      	cmp	r3, #0
 800749c:	d006      	beq.n	80074ac <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800749e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f47f aed0 	bne.w	800724c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d049      	beq.n	8007552 <UART_RxISR_8BIT_FIFOEN+0x34e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074c4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d242      	bcs.n	8007552 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6a3b      	ldr	r3, [r7, #32]
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	61fb      	str	r3, [r7, #28]
   return(result);
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80074f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e3      	bne.n	80074cc <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a17      	ldr	r2, [pc, #92]	@ (8007564 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007508:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	60bb      	str	r3, [r7, #8]
   return(result);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f043 0320 	orr.w	r3, r3, #32
 800751e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	613b      	str	r3, [r7, #16]
   return(result);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e4      	bne.n	800750a <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007540:	e007      	b.n	8007552 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0208 	orr.w	r2, r2, #8
 8007550:	619a      	str	r2, [r3, #24]
}
 8007552:	bf00      	nop
 8007554:	37b0      	adds	r7, #176	@ 0xb0
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	effffffe 	.word	0xeffffffe
 8007560:	58000c00 	.word	0x58000c00
 8007564:	08006e95 	.word	0x08006e95

08007568 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b0ae      	sub	sp, #184	@ 0xb8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007576:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800759e:	2b22      	cmp	r3, #34	@ 0x22
 80075a0:	f040 8185 	bne.w	80078ae <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80075aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075ae:	e128      	b.n	8007802 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80075c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80075c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80075ca:	4013      	ands	r3, r2
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d8:	1c9a      	adds	r2, r3, #2
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b00      	cmp	r3, #0
 8007604:	d053      	beq.n	80076ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d011      	beq.n	8007636 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2201      	movs	r2, #1
 8007624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762c:	f043 0201 	orr.w	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d011      	beq.n	8007666 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2202      	movs	r2, #2
 8007654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800765c:	f043 0204 	orr.w	r2, r3, #4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800766a:	f003 0304 	and.w	r3, r3, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	d011      	beq.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2204      	movs	r2, #4
 8007684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800768c:	f043 0202 	orr.w	r2, r3, #2
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7fe faf9 	bl	8005c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f040 80a3 	bne.w	8007802 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e2      	bne.n	80076bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007706:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007708:	4b6f      	ldr	r3, [pc, #444]	@ (80078c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800770a:	4013      	ands	r3, r2
 800770c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800771a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800771c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e3      	bne.n	80076f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a61      	ldr	r2, [pc, #388]	@ (80078cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d021      	beq.n	8007790 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d01a      	beq.n	8007790 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007762:	e853 3f00 	ldrex	r3, [r3]
 8007766:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800776a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800776e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800777c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800777e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800778a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e4      	bne.n	800775a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d130      	bne.n	80077fa <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80077c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c8:	e841 2300 	strex	r3, r2, [r1]
 80077cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e4      	bne.n	800779e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d103      	bne.n	80077ea <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2210      	movs	r2, #16
 80077e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fe fa5a 	bl	8005cac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80077f8:	e00e      	b.n	8007818 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7f8 ffd0 	bl	80007a0 <HAL_UART_RxCpltCallback>
        break;
 8007800:	e00a      	b.n	8007818 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007802:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007806:	2b00      	cmp	r3, #0
 8007808:	d006      	beq.n	8007818 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800780a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	f47f aecc 	bne.w	80075b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800781e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007822:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007826:	2b00      	cmp	r3, #0
 8007828:	d049      	beq.n	80078be <UART_RxISR_16BIT_FIFOEN+0x356>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007830:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007834:	429a      	cmp	r2, r3
 8007836:	d242      	bcs.n	80078be <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	623b      	str	r3, [r7, #32]
   return(result);
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800784e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800785c:	633a      	str	r2, [r7, #48]	@ 0x30
 800785e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e3      	bne.n	8007838 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a17      	ldr	r2, [pc, #92]	@ (80078d0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007874:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60fb      	str	r3, [r7, #12]
   return(result);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f043 0320 	orr.w	r3, r3, #32
 800788a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	69b9      	ldr	r1, [r7, #24]
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	617b      	str	r3, [r7, #20]
   return(result);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e4      	bne.n	8007876 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078ac:	e007      	b.n	80078be <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0208 	orr.w	r2, r2, #8
 80078bc:	619a      	str	r2, [r3, #24]
}
 80078be:	bf00      	nop
 80078c0:	37b8      	adds	r7, #184	@ 0xb8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	effffffe 	.word	0xeffffffe
 80078cc:	58000c00 	.word	0x58000c00
 80078d0:	0800704d 	.word	0x0800704d

080078d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_UARTEx_DisableFifoMode+0x16>
 8007922:	2302      	movs	r3, #2
 8007924:	e027      	b.n	8007976 <HAL_UARTEx_DisableFifoMode+0x66>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2224      	movs	r2, #36	@ 0x24
 8007932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007954:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007996:	2302      	movs	r3, #2
 8007998:	e02d      	b.n	80079f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2224      	movs	r2, #36	@ 0x24
 80079a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0201 	bic.w	r2, r2, #1
 80079c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f850 	bl	8007a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d101      	bne.n	8007a16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a12:	2302      	movs	r3, #2
 8007a14:	e02d      	b.n	8007a72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2224      	movs	r2, #36	@ 0x24
 8007a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0201 	bic.w	r2, r2, #1
 8007a3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f812 	bl	8007a7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d108      	bne.n	8007a9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a9c:	e031      	b.n	8007b02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a9e:	2310      	movs	r3, #16
 8007aa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aa2:	2310      	movs	r3, #16
 8007aa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	0e5b      	lsrs	r3, r3, #25
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	0f5b      	lsrs	r3, r3, #29
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	7b3a      	ldrb	r2, [r7, #12]
 8007aca:	4911      	ldr	r1, [pc, #68]	@ (8007b10 <UARTEx_SetNbDataToProcess+0x94>)
 8007acc:	5c8a      	ldrb	r2, [r1, r2]
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ad2:	7b3a      	ldrb	r2, [r7, #12]
 8007ad4:	490f      	ldr	r1, [pc, #60]	@ (8007b14 <UARTEx_SetNbDataToProcess+0x98>)
 8007ad6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ad8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	7b7a      	ldrb	r2, [r7, #13]
 8007ae8:	4909      	ldr	r1, [pc, #36]	@ (8007b10 <UARTEx_SetNbDataToProcess+0x94>)
 8007aea:	5c8a      	ldrb	r2, [r1, r2]
 8007aec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007af0:	7b7a      	ldrb	r2, [r7, #13]
 8007af2:	4908      	ldr	r1, [pc, #32]	@ (8007b14 <UARTEx_SetNbDataToProcess+0x98>)
 8007af4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007af6:	fb93 f3f2 	sdiv	r3, r3, r2
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b02:	bf00      	nop
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop
 8007b10:	0800bab8 	.word	0x0800bab8
 8007b14:	0800bac0 	.word	0x0800bac0

08007b18 <__NVIC_SetPriority>:
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	6039      	str	r1, [r7, #0]
 8007b22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007b24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	db0a      	blt.n	8007b42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	490c      	ldr	r1, [pc, #48]	@ (8007b64 <__NVIC_SetPriority+0x4c>)
 8007b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b36:	0112      	lsls	r2, r2, #4
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007b40:	e00a      	b.n	8007b58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	b2da      	uxtb	r2, r3
 8007b46:	4908      	ldr	r1, [pc, #32]	@ (8007b68 <__NVIC_SetPriority+0x50>)
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	3b04      	subs	r3, #4
 8007b50:	0112      	lsls	r2, r2, #4
 8007b52:	b2d2      	uxtb	r2, r2
 8007b54:	440b      	add	r3, r1
 8007b56:	761a      	strb	r2, [r3, #24]
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	e000e100 	.word	0xe000e100
 8007b68:	e000ed00 	.word	0xe000ed00

08007b6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b70:	2100      	movs	r1, #0
 8007b72:	f06f 0004 	mvn.w	r0, #4
 8007b76:	f7ff ffcf 	bl	8007b18 <__NVIC_SetPriority>
#endif
}
 8007b7a:	bf00      	nop
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b86:	f3ef 8305 	mrs	r3, IPSR
 8007b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8007b8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b92:	f06f 0305 	mvn.w	r3, #5
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	e00c      	b.n	8007bb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc4 <osKernelInitialize+0x44>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ba2:	4b08      	ldr	r3, [pc, #32]	@ (8007bc4 <osKernelInitialize+0x44>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	607b      	str	r3, [r7, #4]
 8007bac:	e002      	b.n	8007bb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bb4:	687b      	ldr	r3, [r7, #4]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	370c      	adds	r7, #12
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	24000124 	.word	0x24000124

08007bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bce:	f3ef 8305 	mrs	r3, IPSR
 8007bd2:	603b      	str	r3, [r7, #0]
  return(result);
 8007bd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bda:	f06f 0305 	mvn.w	r3, #5
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e010      	b.n	8007c04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007be2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c10 <osKernelStart+0x48>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d109      	bne.n	8007bfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bea:	f7ff ffbf 	bl	8007b6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bee:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <osKernelStart+0x48>)
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bf4:	f001 ffe2 	bl	8009bbc <vTaskStartScheduler>
      stat = osOK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	607b      	str	r3, [r7, #4]
 8007bfc:	e002      	b.n	8007c04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8007c02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c04:	687b      	ldr	r3, [r7, #4]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	24000124 	.word	0x24000124

08007c14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b08e      	sub	sp, #56	@ 0x38
 8007c18:	af04      	add	r7, sp, #16
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c24:	f3ef 8305 	mrs	r3, IPSR
 8007c28:	617b      	str	r3, [r7, #20]
  return(result);
 8007c2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d17e      	bne.n	8007d2e <osThreadNew+0x11a>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d07b      	beq.n	8007d2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c36:	2380      	movs	r3, #128	@ 0x80
 8007c38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c3a:	2318      	movs	r3, #24
 8007c3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295
 8007c46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d045      	beq.n	8007cda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <osThreadNew+0x48>
        name = attr->name;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <osThreadNew+0x6e>
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b38      	cmp	r3, #56	@ 0x38
 8007c74:	d805      	bhi.n	8007c82 <osThreadNew+0x6e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <osThreadNew+0x72>
        return (NULL);
 8007c82:	2300      	movs	r3, #0
 8007c84:	e054      	b.n	8007d30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	089b      	lsrs	r3, r3, #2
 8007c94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00e      	beq.n	8007cbc <osThreadNew+0xa8>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	2b5b      	cmp	r3, #91	@ 0x5b
 8007ca4:	d90a      	bls.n	8007cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d006      	beq.n	8007cbc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <osThreadNew+0xa8>
        mem = 1;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	e010      	b.n	8007cde <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10c      	bne.n	8007cde <osThreadNew+0xca>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d108      	bne.n	8007cde <osThreadNew+0xca>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d104      	bne.n	8007cde <osThreadNew+0xca>
          mem = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	e001      	b.n	8007cde <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d110      	bne.n	8007d06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cec:	9202      	str	r2, [sp, #8]
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6a3a      	ldr	r2, [r7, #32]
 8007cf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f001 fdb8 	bl	8009870 <xTaskCreateStatic>
 8007d00:	4603      	mov	r3, r0
 8007d02:	613b      	str	r3, [r7, #16]
 8007d04:	e013      	b.n	8007d2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d110      	bne.n	8007d2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	f107 0310 	add.w	r3, r7, #16
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f001 fe06 	bl	8009930 <xTaskCreate>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d001      	beq.n	8007d2e <osThreadNew+0x11a>
            hTask = NULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d2e:	693b      	ldr	r3, [r7, #16]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3728      	adds	r7, #40	@ 0x28
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d44:	f3ef 8305 	mrs	r3, IPSR
 8007d48:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d4a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d12d      	bne.n	8007dac <osEventFlagsNew+0x74>
    mem = -1;
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d015      	beq.n	8007d88 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d006      	beq.n	8007d72 <osEventFlagsNew+0x3a>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b1f      	cmp	r3, #31
 8007d6a:	d902      	bls.n	8007d72 <osEventFlagsNew+0x3a>
        mem = 1;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	613b      	str	r3, [r7, #16]
 8007d70:	e00c      	b.n	8007d8c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d108      	bne.n	8007d8c <osEventFlagsNew+0x54>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <osEventFlagsNew+0x54>
          mem = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	613b      	str	r3, [r7, #16]
 8007d86:	e001      	b.n	8007d8c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d106      	bne.n	8007da0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fb28 	bl	80083ec <xEventGroupCreateStatic>
 8007d9c:	6178      	str	r0, [r7, #20]
 8007d9e:	e005      	b.n	8007dac <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d102      	bne.n	8007dac <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8007da6:	f000 fb5a 	bl	800845e <xEventGroupCreate>
 8007daa:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007dac:	697b      	ldr	r3, [r7, #20]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3718      	adds	r7, #24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <osEventFlagsSet+0x1c>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dd2:	d303      	bcc.n	8007ddc <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8007dd4:	f06f 0303 	mvn.w	r3, #3
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	e028      	b.n	8007e2e <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ddc:	f3ef 8305 	mrs	r3, IPSR
 8007de0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007de2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01d      	beq.n	8007e24 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8007de8:	2300      	movs	r3, #0
 8007dea:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8007dec:	f107 0308 	add.w	r3, r7, #8
 8007df0:	461a      	mov	r2, r3
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6938      	ldr	r0, [r7, #16]
 8007df6:	f000 fcdb 	bl	80087b0 <xEventGroupSetBitsFromISR>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d103      	bne.n	8007e08 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8007e00:	f06f 0302 	mvn.w	r3, #2
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	e012      	b.n	8007e2e <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <osEventFlagsSet+0x76>
 8007e12:	4b09      	ldr	r3, [pc, #36]	@ (8007e38 <osEventFlagsSet+0x80>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	e004      	b.n	8007e2e <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6938      	ldr	r0, [r7, #16]
 8007e28:	f000 fc06 	bl	8008638 <xEventGroupSetBits>
 8007e2c:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8007e2e:	697b      	ldr	r3, [r7, #20]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08c      	sub	sp, #48	@ 0x30
 8007e40:	af02      	add	r7, sp, #8
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <osEventFlagsWait+0x20>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e5a:	d303      	bcc.n	8007e64 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8007e5c:	f06f 0303 	mvn.w	r3, #3
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e04b      	b.n	8007efc <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e64:	f3ef 8305 	mrs	r3, IPSR
 8007e68:	617b      	str	r3, [r7, #20]
  return(result);
 8007e6a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8007e70:	f06f 0305 	mvn.w	r3, #5
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e041      	b.n	8007efc <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8007e82:	2301      	movs	r3, #1
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e86:	e001      	b.n	8007e8c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	e001      	b.n	8007ea0 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	6a3a      	ldr	r2, [r7, #32]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	69b8      	ldr	r0, [r7, #24]
 8007eac:	f000 faf2 	bl	8008494 <xEventGroupWaitBits>
 8007eb0:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d010      	beq.n	8007ede <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d019      	beq.n	8007efc <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d003      	beq.n	8007ed6 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8007ece:	f06f 0301 	mvn.w	r3, #1
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	e012      	b.n	8007efc <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007ed6:	f06f 0302 	mvn.w	r3, #2
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e00e      	b.n	8007efc <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d109      	bne.n	8007efc <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8007eee:	f06f 0301 	mvn.w	r3, #1
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e002      	b.n	8007efc <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8007ef6:	f06f 0302 	mvn.w	r3, #2
 8007efa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8007efc:	69fb      	ldr	r3, [r7, #28]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3728      	adds	r7, #40	@ 0x28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b088      	sub	sp, #32
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f12:	f3ef 8305 	mrs	r3, IPSR
 8007f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f18:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d174      	bne.n	8008008 <osMutexNew+0x102>
    if (attr != NULL) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <osMutexNew+0x26>
      type = attr->attr_bits;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	e001      	b.n	8007f30 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <osMutexNew+0x3a>
      rmtx = 1U;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e001      	b.n	8007f44 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d15c      	bne.n	8008008 <osMutexNew+0x102>
      mem = -1;
 8007f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f52:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d015      	beq.n	8007f86 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d006      	beq.n	8007f70 <osMutexNew+0x6a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	2b4f      	cmp	r3, #79	@ 0x4f
 8007f68:	d902      	bls.n	8007f70 <osMutexNew+0x6a>
          mem = 1;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	e00c      	b.n	8007f8a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d108      	bne.n	8007f8a <osMutexNew+0x84>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <osMutexNew+0x84>
            mem = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	e001      	b.n	8007f8a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d112      	bne.n	8007fb6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d007      	beq.n	8007fa6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	2004      	movs	r0, #4
 8007f9e:	f000 fe46 	bl	8008c2e <xQueueCreateMutexStatic>
 8007fa2:	61f8      	str	r0, [r7, #28]
 8007fa4:	e016      	b.n	8007fd4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	4619      	mov	r1, r3
 8007fac:	2001      	movs	r0, #1
 8007fae:	f000 fe3e 	bl	8008c2e <xQueueCreateMutexStatic>
 8007fb2:	61f8      	str	r0, [r7, #28]
 8007fb4:	e00e      	b.n	8007fd4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10b      	bne.n	8007fd4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007fc2:	2004      	movs	r0, #4
 8007fc4:	f000 fe1b 	bl	8008bfe <xQueueCreateMutex>
 8007fc8:	61f8      	str	r0, [r7, #28]
 8007fca:	e003      	b.n	8007fd4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007fcc:	2001      	movs	r0, #1
 8007fce:	f000 fe16 	bl	8008bfe <xQueueCreateMutex>
 8007fd2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00c      	beq.n	8007ff4 <osMutexNew+0xee>
        if (attr != NULL) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <osMutexNew+0xe2>
          name = attr->name;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e001      	b.n	8007fec <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007fec:	68f9      	ldr	r1, [r7, #12]
 8007fee:	69f8      	ldr	r0, [r7, #28]
 8007ff0:	f001 fbe0 	bl	80097b4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d006      	beq.n	8008008 <osMutexNew+0x102>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f043 0301 	orr.w	r3, r3, #1
 8008006:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008008:	69fb      	ldr	r3, [r7, #28]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008012:	b580      	push	{r7, lr}
 8008014:	b086      	sub	sp, #24
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f023 0301 	bic.w	r3, r3, #1
 8008022:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008030:	f3ef 8305 	mrs	r3, IPSR
 8008034:	60bb      	str	r3, [r7, #8]
  return(result);
 8008036:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008038:	2b00      	cmp	r3, #0
 800803a:	d003      	beq.n	8008044 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800803c:	f06f 0305 	mvn.w	r3, #5
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	e02c      	b.n	800809e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d103      	bne.n	8008052 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800804a:	f06f 0303 	mvn.w	r3, #3
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	e025      	b.n	800809e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d011      	beq.n	800807c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6938      	ldr	r0, [r7, #16]
 800805c:	f000 fe37 	bl	8008cce <xQueueTakeMutexRecursive>
 8008060:	4603      	mov	r3, r0
 8008062:	2b01      	cmp	r3, #1
 8008064:	d01b      	beq.n	800809e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800806c:	f06f 0301 	mvn.w	r3, #1
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	e014      	b.n	800809e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008074:	f06f 0302 	mvn.w	r3, #2
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e010      	b.n	800809e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6938      	ldr	r0, [r7, #16]
 8008080:	f001 f8de 	bl	8009240 <xQueueSemaphoreTake>
 8008084:	4603      	mov	r3, r0
 8008086:	2b01      	cmp	r3, #1
 8008088:	d009      	beq.n	800809e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008090:	f06f 0301 	mvn.w	r3, #1
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e002      	b.n	800809e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008098:	f06f 0302 	mvn.w	r3, #2
 800809c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800809e:	697b      	ldr	r3, [r7, #20]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f023 0301 	bic.w	r3, r3, #1
 80080b6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c4:	f3ef 8305 	mrs	r3, IPSR
 80080c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80080ca:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d003      	beq.n	80080d8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80080d0:	f06f 0305 	mvn.w	r3, #5
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	e01f      	b.n	8008118 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d103      	bne.n	80080e6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80080de:	f06f 0303 	mvn.w	r3, #3
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e018      	b.n	8008118 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d009      	beq.n	8008100 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80080ec:	6938      	ldr	r0, [r7, #16]
 80080ee:	f000 fdb9 	bl	8008c64 <xQueueGiveMutexRecursive>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d00f      	beq.n	8008118 <osMutexRelease+0x70>
        stat = osErrorResource;
 80080f8:	f06f 0302 	mvn.w	r3, #2
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	e00b      	b.n	8008118 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008100:	2300      	movs	r3, #0
 8008102:	2200      	movs	r2, #0
 8008104:	2100      	movs	r1, #0
 8008106:	6938      	ldr	r0, [r7, #16]
 8008108:	f000 fe18 	bl	8008d3c <xQueueGenericSend>
 800810c:	4603      	mov	r3, r0
 800810e:	2b01      	cmp	r3, #1
 8008110:	d002      	beq.n	8008118 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008112:	f06f 0302 	mvn.w	r3, #2
 8008116:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008118:	697b      	ldr	r3, [r7, #20]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3718      	adds	r7, #24
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008122:	b580      	push	{r7, lr}
 8008124:	b08a      	sub	sp, #40	@ 0x28
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008132:	f3ef 8305 	mrs	r3, IPSR
 8008136:	613b      	str	r3, [r7, #16]
  return(result);
 8008138:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800813a:	2b00      	cmp	r3, #0
 800813c:	d15f      	bne.n	80081fe <osMessageQueueNew+0xdc>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d05c      	beq.n	80081fe <osMessageQueueNew+0xdc>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d059      	beq.n	80081fe <osMessageQueueNew+0xdc>
    mem = -1;
 800814a:	f04f 33ff 	mov.w	r3, #4294967295
 800814e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d029      	beq.n	80081aa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d012      	beq.n	8008184 <osMessageQueueNew+0x62>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b4f      	cmp	r3, #79	@ 0x4f
 8008164:	d90e      	bls.n	8008184 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695a      	ldr	r2, [r3, #20]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	429a      	cmp	r2, r3
 800817c:	d302      	bcc.n	8008184 <osMessageQueueNew+0x62>
        mem = 1;
 800817e:	2301      	movs	r3, #1
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	e014      	b.n	80081ae <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d110      	bne.n	80081ae <osMessageQueueNew+0x8c>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10c      	bne.n	80081ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008198:	2b00      	cmp	r3, #0
 800819a:	d108      	bne.n	80081ae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <osMessageQueueNew+0x8c>
          mem = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
 80081a8:	e001      	b.n	80081ae <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d10b      	bne.n	80081cc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691a      	ldr	r2, [r3, #16]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	2100      	movs	r1, #0
 80081be:	9100      	str	r1, [sp, #0]
 80081c0:	68b9      	ldr	r1, [r7, #8]
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fc26 	bl	8008a14 <xQueueGenericCreateStatic>
 80081c8:	61f8      	str	r0, [r7, #28]
 80081ca:	e008      	b.n	80081de <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d105      	bne.n	80081de <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80081d2:	2200      	movs	r2, #0
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 fc99 	bl	8008b0e <xQueueGenericCreate>
 80081dc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00c      	beq.n	80081fe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e001      	b.n	80081f6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80081f6:	6979      	ldr	r1, [r7, #20]
 80081f8:	69f8      	ldr	r0, [r7, #28]
 80081fa:	f001 fadb 	bl	80097b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80081fe:	69fb      	ldr	r3, [r7, #28]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008208:	b580      	push	{r7, lr}
 800820a:	b088      	sub	sp, #32
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	4613      	mov	r3, r2
 8008216:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008220:	f3ef 8305 	mrs	r3, IPSR
 8008224:	617b      	str	r3, [r7, #20]
  return(result);
 8008226:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008228:	2b00      	cmp	r3, #0
 800822a:	d028      	beq.n	800827e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d005      	beq.n	800823e <osMessageQueuePut+0x36>
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <osMessageQueuePut+0x36>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800823e:	f06f 0303 	mvn.w	r3, #3
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	e038      	b.n	80082b8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008246:	2300      	movs	r3, #0
 8008248:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800824a:	f107 0210 	add.w	r2, r7, #16
 800824e:	2300      	movs	r3, #0
 8008250:	68b9      	ldr	r1, [r7, #8]
 8008252:	69b8      	ldr	r0, [r7, #24]
 8008254:	f000 fe74 	bl	8008f40 <xQueueGenericSendFromISR>
 8008258:	4603      	mov	r3, r0
 800825a:	2b01      	cmp	r3, #1
 800825c:	d003      	beq.n	8008266 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800825e:	f06f 0302 	mvn.w	r3, #2
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	e028      	b.n	80082b8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d025      	beq.n	80082b8 <osMessageQueuePut+0xb0>
 800826c:	4b15      	ldr	r3, [pc, #84]	@ (80082c4 <osMessageQueuePut+0xbc>)
 800826e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	e01c      	b.n	80082b8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <osMessageQueuePut+0x82>
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d103      	bne.n	8008292 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800828a:	f06f 0303 	mvn.w	r3, #3
 800828e:	61fb      	str	r3, [r7, #28]
 8008290:	e012      	b.n	80082b8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008292:	2300      	movs	r3, #0
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	68b9      	ldr	r1, [r7, #8]
 8008298:	69b8      	ldr	r0, [r7, #24]
 800829a:	f000 fd4f 	bl	8008d3c <xQueueGenericSend>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d009      	beq.n	80082b8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80082aa:	f06f 0301 	mvn.w	r3, #1
 80082ae:	61fb      	str	r3, [r7, #28]
 80082b0:	e002      	b.n	80082b8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80082b2:	f06f 0302 	mvn.w	r3, #2
 80082b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80082b8:	69fb      	ldr	r3, [r7, #28]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3720      	adds	r7, #32
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082de:	f3ef 8305 	mrs	r3, IPSR
 80082e2:	617b      	str	r3, [r7, #20]
  return(result);
 80082e4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d028      	beq.n	800833c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <osMessageQueueGet+0x34>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <osMessageQueueGet+0x34>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80082fc:	f06f 0303 	mvn.w	r3, #3
 8008300:	61fb      	str	r3, [r7, #28]
 8008302:	e037      	b.n	8008374 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008304:	2300      	movs	r3, #0
 8008306:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008308:	f107 0310 	add.w	r3, r7, #16
 800830c:	461a      	mov	r2, r3
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	69b8      	ldr	r0, [r7, #24]
 8008312:	f001 f8a5 	bl	8009460 <xQueueReceiveFromISR>
 8008316:	4603      	mov	r3, r0
 8008318:	2b01      	cmp	r3, #1
 800831a:	d003      	beq.n	8008324 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800831c:	f06f 0302 	mvn.w	r3, #2
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	e027      	b.n	8008374 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d024      	beq.n	8008374 <osMessageQueueGet+0xac>
 800832a:	4b15      	ldr	r3, [pc, #84]	@ (8008380 <osMessageQueueGet+0xb8>)
 800832c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	e01b      	b.n	8008374 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <osMessageQueueGet+0x80>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d103      	bne.n	8008350 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008348:	f06f 0303 	mvn.w	r3, #3
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e011      	b.n	8008374 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	68b9      	ldr	r1, [r7, #8]
 8008354:	69b8      	ldr	r0, [r7, #24]
 8008356:	f000 fe91 	bl	800907c <xQueueReceive>
 800835a:	4603      	mov	r3, r0
 800835c:	2b01      	cmp	r3, #1
 800835e:	d009      	beq.n	8008374 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008366:	f06f 0301 	mvn.w	r3, #1
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	e002      	b.n	8008374 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800836e:	f06f 0302 	mvn.w	r3, #2
 8008372:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008374:	69fb      	ldr	r3, [r7, #28]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3720      	adds	r7, #32
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	e000ed04 	.word	0xe000ed04

08008384 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4a07      	ldr	r2, [pc, #28]	@ (80083b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008394:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4a06      	ldr	r2, [pc, #24]	@ (80083b4 <vApplicationGetIdleTaskMemory+0x30>)
 800839a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2280      	movs	r2, #128	@ 0x80
 80083a0:	601a      	str	r2, [r3, #0]
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	24000128 	.word	0x24000128
 80083b4:	24000184 	.word	0x24000184

080083b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4a07      	ldr	r2, [pc, #28]	@ (80083e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80083c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4a06      	ldr	r2, [pc, #24]	@ (80083e8 <vApplicationGetTimerTaskMemory+0x30>)
 80083ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083d6:	601a      	str	r2, [r3, #0]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	24000384 	.word	0x24000384
 80083e8:	240003e0 	.word	0x240003e0

080083ec <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10b      	bne.n	8008412 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	e7fd      	b.n	800840e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8008412:	2320      	movs	r3, #32
 8008414:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b20      	cmp	r3, #32
 800841a:	d00b      	beq.n	8008434 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	60fb      	str	r3, [r7, #12]
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	e7fd      	b.n	8008430 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00a      	beq.n	8008454 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3304      	adds	r3, #4
 8008448:	4618      	mov	r0, r3
 800844a:	f000 f9c5 	bl	80087d8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2201      	movs	r2, #1
 8008452:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8008454:	697b      	ldr	r3, [r7, #20]
	}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8008464:	2020      	movs	r0, #32
 8008466:	f003 f871 	bl	800b54c <pvPortMalloc>
 800846a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3304      	adds	r3, #4
 800847c:	4618      	mov	r0, r3
 800847e:	f000 f9ab 	bl	80087d8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8008488:	687b      	ldr	r3, [r7, #4]
	}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b090      	sub	sp, #64	@ 0x40
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80084aa:	2300      	movs	r3, #0
 80084ac:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <xEventGroupWaitBits+0x38>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	623b      	str	r3, [r7, #32]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084d2:	d30b      	bcc.n	80084ec <xEventGroupWaitBits+0x58>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	61fb      	str	r3, [r7, #28]
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	e7fd      	b.n	80084e8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <xEventGroupWaitBits+0x76>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	61bb      	str	r3, [r7, #24]
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop
 8008508:	e7fd      	b.n	8008506 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800850a:	f002 f857 	bl	800a5bc <xTaskGetSchedulerState>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <xEventGroupWaitBits+0x86>
 8008514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <xEventGroupWaitBits+0x8a>
 800851a:	2301      	movs	r3, #1
 800851c:	e000      	b.n	8008520 <xEventGroupWaitBits+0x8c>
 800851e:	2300      	movs	r3, #0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10b      	bne.n	800853c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	617b      	str	r3, [r7, #20]
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800853c:	f001 fba6 	bl	8009c8c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8008540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	68b9      	ldr	r1, [r7, #8]
 800854a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800854c:	f000 f90d 	bl	800876a <prvTestWaitCondition>
 8008550:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800855c:	2300      	movs	r3, #0
 800855e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d028      	beq.n	80085b8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8008566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	43db      	mvns	r3, r3
 800856e:	401a      	ands	r2, r3
 8008570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e020      	b.n	80085b8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8008576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008578:	2b00      	cmp	r3, #0
 800857a:	d104      	bne.n	8008586 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800857c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800857e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8008580:	2301      	movs	r3, #1
 8008582:	633b      	str	r3, [r7, #48]	@ 0x30
 8008584:	e018      	b.n	80085b8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008592:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800859a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800859c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80085a0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80085a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a4:	1d18      	adds	r0, r3, #4
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085aa:	4313      	orrs	r3, r2
 80085ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ae:	4619      	mov	r1, r3
 80085b0:	f001 fd66 	bl	800a080 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80085b8:	f001 fb76 	bl	8009ca8 <xTaskResumeAll>
 80085bc:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80085be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d031      	beq.n	8008628 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80085c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80085ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008634 <xEventGroupWaitBits+0x1a0>)
 80085cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80085da:	f002 f969 	bl	800a8b0 <uxTaskResetEventItemValue>
 80085de:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80085e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d11a      	bne.n	8008620 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 80085ea:	f002 fe8d 	bl	800b308 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80085ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80085fa:	f000 f8b6 	bl	800876a <prvTestWaitCondition>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d009      	beq.n	8008618 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d006      	beq.n	8008618 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800860a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	43db      	mvns	r3, r3
 8008612:	401a      	ands	r2, r3
 8008614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008616:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800861c:	f002 fea6 	bl	800b36c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008622:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008626:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8008628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800862a:	4618      	mov	r0, r3
 800862c:	3740      	adds	r7, #64	@ 0x40
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08e      	sub	sp, #56	@ 0x38
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008642:	2300      	movs	r3, #0
 8008644:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800864a:	2300      	movs	r3, #0
 800864c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <xEventGroupSetBits+0x34>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	613b      	str	r3, [r7, #16]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008672:	d30b      	bcc.n	800868c <xEventGroupSetBits+0x54>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	60fb      	str	r3, [r7, #12]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868e:	3304      	adds	r3, #4
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	3308      	adds	r3, #8
 8008696:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8008698:	f001 faf8 	bl	8009c8c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800869c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	431a      	orrs	r2, r3
 80086aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ac:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80086ae:	e03c      	b.n	800872a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80086b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80086b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80086bc:	2300      	movs	r3, #0
 80086be:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80086c6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80086ce:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d108      	bne.n	80086ec <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80086da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	4013      	ands	r3, r2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00b      	beq.n	80086fe <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 80086e6:	2301      	movs	r3, #1
 80086e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ea:	e008      	b.n	80086fe <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	4013      	ands	r3, r2
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d101      	bne.n	80086fe <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80086fa:	2301      	movs	r3, #1
 80086fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d010      	beq.n	8008726 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800870e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	4313      	orrs	r3, r2
 8008714:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800871e:	4619      	mov	r1, r3
 8008720:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008722:	f001 fd7b 	bl	800a21c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800872a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	429a      	cmp	r2, r3
 8008730:	d1be      	bne.n	80086b0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008738:	43db      	mvns	r3, r3
 800873a:	401a      	ands	r2, r3
 800873c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008740:	f001 fab2 	bl	8009ca8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	681b      	ldr	r3, [r3, #0]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3738      	adds	r7, #56	@ 0x38
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff ff6b 	bl	8008638 <xEventGroupSetBits>
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800876a:	b480      	push	{r7}
 800876c:	b087      	sub	sp, #28
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8008776:	2300      	movs	r3, #0
 8008778:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d107      	bne.n	8008790 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	4013      	ands	r3, r2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800878a:	2301      	movs	r3, #1
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	e007      	b.n	80087a0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	4013      	ands	r3, r2
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d101      	bne.n	80087a0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800879c:	2301      	movs	r3, #1
 800879e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80087a0:	697b      	ldr	r3, [r7, #20]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	68f9      	ldr	r1, [r7, #12]
 80087c2:	4804      	ldr	r0, [pc, #16]	@ (80087d4 <xEventGroupSetBitsFromISR+0x24>)
 80087c4:	f002 fc4e 	bl	800b064 <xTimerPendFunctionCallFromISR>
 80087c8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80087ca:	697b      	ldr	r3, [r7, #20]
	}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	08008751 	.word	0x08008751

080087d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f103 0208 	add.w	r2, r3, #8
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295
 80087f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f103 0208 	add.w	r2, r3, #8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f103 0208 	add.w	r2, r3, #8
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	601a      	str	r2, [r3, #0]
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d103      	bne.n	800889a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e00c      	b.n	80088b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3308      	adds	r3, #8
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	e002      	b.n	80088a8 <vListInsert+0x2e>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d2f6      	bcs.n	80088a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	601a      	str	r2, [r3, #0]
}
 80088e0:	bf00      	nop
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6892      	ldr	r2, [r2, #8]
 8008902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6852      	ldr	r2, [r2, #4]
 800890c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	429a      	cmp	r2, r3
 8008916:	d103      	bne.n	8008920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	1e5a      	subs	r2, r3, #1
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <xQueueGenericReset+0x2c>
	__asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	60bb      	str	r3, [r7, #8]
}
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800896c:	f002 fccc 	bl	800b308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008978:	68f9      	ldr	r1, [r7, #12]
 800897a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800897c:	fb01 f303 	mul.w	r3, r1, r3
 8008980:	441a      	add	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899c:	3b01      	subs	r3, #1
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80089a2:	fb01 f303 	mul.w	r3, r1, r3
 80089a6:	441a      	add	r2, r3
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	22ff      	movs	r2, #255	@ 0xff
 80089b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	22ff      	movs	r2, #255	@ 0xff
 80089b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d114      	bne.n	80089ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01a      	beq.n	8008a00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3310      	adds	r3, #16
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fbc0 	bl	800a154 <xTaskRemoveFromEventList>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d012      	beq.n	8008a00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80089da:	4b0d      	ldr	r3, [pc, #52]	@ (8008a10 <xQueueGenericReset+0xd0>)
 80089dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	e009      	b.n	8008a00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	3310      	adds	r3, #16
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff fef1 	bl	80087d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3324      	adds	r3, #36	@ 0x24
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff feec 	bl	80087d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a00:	f002 fcb4 	bl	800b36c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a04:	2301      	movs	r3, #1
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08e      	sub	sp, #56	@ 0x38
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10b      	bne.n	8008a40 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a3a:	bf00      	nop
 8008a3c:	bf00      	nop
 8008a3e:	e7fd      	b.n	8008a3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <xQueueGenericCreateStatic+0x56>
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <xQueueGenericCreateStatic+0x5a>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e000      	b.n	8008a70 <xQueueGenericCreateStatic+0x5c>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10b      	bne.n	8008a8c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	623b      	str	r3, [r7, #32]
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	e7fd      	b.n	8008a88 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d102      	bne.n	8008a98 <xQueueGenericCreateStatic+0x84>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <xQueueGenericCreateStatic+0x88>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e000      	b.n	8008a9e <xQueueGenericCreateStatic+0x8a>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10b      	bne.n	8008aba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	61fb      	str	r3, [r7, #28]
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	e7fd      	b.n	8008ab6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008aba:	2350      	movs	r3, #80	@ 0x50
 8008abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b50      	cmp	r3, #80	@ 0x50
 8008ac2:	d00b      	beq.n	8008adc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	61bb      	str	r3, [r7, #24]
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008adc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00d      	beq.n	8008b04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008af0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	4613      	mov	r3, r2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 f840 	bl	8008b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3730      	adds	r7, #48	@ 0x30
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b08a      	sub	sp, #40	@ 0x28
 8008b12:	af02      	add	r7, sp, #8
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10b      	bne.n	8008b3a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	613b      	str	r3, [r7, #16]
}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop
 8008b38:	e7fd      	b.n	8008b36 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	fb02 f303 	mul.w	r3, r2, r3
 8008b42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	3350      	adds	r3, #80	@ 0x50
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f002 fcff 	bl	800b54c <pvPortMalloc>
 8008b4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d011      	beq.n	8008b7a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	3350      	adds	r3, #80	@ 0x50
 8008b5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b68:	79fa      	ldrb	r2, [r7, #7]
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f805 	bl	8008b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3720      	adds	r7, #32
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d103      	bne.n	8008ba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	69b8      	ldr	r0, [r7, #24]
 8008bb6:	f7ff fec3 	bl	8008940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00e      	beq.n	8008bf6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008bea:	2300      	movs	r3, #0
 8008bec:	2200      	movs	r2, #0
 8008bee:	2100      	movs	r1, #0
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f8a3 	bl	8008d3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b086      	sub	sp, #24
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	4603      	mov	r3, r0
 8008c06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	461a      	mov	r2, r3
 8008c14:	6939      	ldr	r1, [r7, #16]
 8008c16:	6978      	ldr	r0, [r7, #20]
 8008c18:	f7ff ff79 	bl	8008b0e <xQueueGenericCreate>
 8008c1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff ffd3 	bl	8008bca <prvInitialiseMutex>

		return xNewQueue;
 8008c24:	68fb      	ldr	r3, [r7, #12]
	}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af02      	add	r7, sp, #8
 8008c34:	4603      	mov	r3, r0
 8008c36:	6039      	str	r1, [r7, #0]
 8008c38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	6939      	ldr	r1, [r7, #16]
 8008c4c:	6978      	ldr	r0, [r7, #20]
 8008c4e:	f7ff fee1 	bl	8008a14 <xQueueGenericCreateStatic>
 8008c52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c54:	68f8      	ldr	r0, [r7, #12]
 8008c56:	f7ff ffb8 	bl	8008bca <prvInitialiseMutex>

		return xNewQueue;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
	}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008c64:	b590      	push	{r4, r7, lr}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d10b      	bne.n	8008c8e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	60fb      	str	r3, [r7, #12]
}
 8008c88:	bf00      	nop
 8008c8a:	bf00      	nop
 8008c8c:	e7fd      	b.n	8008c8a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	689c      	ldr	r4, [r3, #8]
 8008c92:	f001 fc83 	bl	800a59c <xTaskGetCurrentTaskHandle>
 8008c96:	4603      	mov	r3, r0
 8008c98:	429c      	cmp	r4, r3
 8008c9a:	d111      	bne.n	8008cc0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	1e5a      	subs	r2, r3, #1
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d105      	bne.n	8008cba <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	6938      	ldr	r0, [r7, #16]
 8008cb6:	f000 f841 	bl	8008d3c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	617b      	str	r3, [r7, #20]
 8008cbe:	e001      	b.n	8008cc4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008cc4:	697b      	ldr	r3, [r7, #20]
	}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd90      	pop	{r4, r7, pc}

08008cce <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008cce:	b590      	push	{r4, r7, lr}
 8008cd0:	b087      	sub	sp, #28
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	60fb      	str	r3, [r7, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	e7fd      	b.n	8008cf6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	689c      	ldr	r4, [r3, #8]
 8008cfe:	f001 fc4d 	bl	800a59c <xTaskGetCurrentTaskHandle>
 8008d02:	4603      	mov	r3, r0
 8008d04:	429c      	cmp	r4, r3
 8008d06:	d107      	bne.n	8008d18 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008d12:	2301      	movs	r3, #1
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e00c      	b.n	8008d32 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6938      	ldr	r0, [r7, #16]
 8008d1c:	f000 fa90 	bl	8009240 <xQueueSemaphoreTake>
 8008d20:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008d32:	697b      	ldr	r3, [r7, #20]
	}
 8008d34:	4618      	mov	r0, r3
 8008d36:	371c      	adds	r7, #28
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd90      	pop	{r4, r7, pc}

08008d3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08e      	sub	sp, #56	@ 0x38
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <xQueueGenericSend+0x34>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d103      	bne.n	8008d7e <xQueueGenericSend+0x42>
 8008d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <xQueueGenericSend+0x46>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <xQueueGenericSend+0x48>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <xQueueGenericSend+0x64>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	e7fd      	b.n	8008d9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d103      	bne.n	8008dae <xQueueGenericSend+0x72>
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d101      	bne.n	8008db2 <xQueueGenericSend+0x76>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e000      	b.n	8008db4 <xQueueGenericSend+0x78>
 8008db2:	2300      	movs	r3, #0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10b      	bne.n	8008dd0 <xQueueGenericSend+0x94>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	623b      	str	r3, [r7, #32]
}
 8008dca:	bf00      	nop
 8008dcc:	bf00      	nop
 8008dce:	e7fd      	b.n	8008dcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dd0:	f001 fbf4 	bl	800a5bc <xTaskGetSchedulerState>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <xQueueGenericSend+0xa4>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <xQueueGenericSend+0xa8>
 8008de0:	2301      	movs	r3, #1
 8008de2:	e000      	b.n	8008de6 <xQueueGenericSend+0xaa>
 8008de4:	2300      	movs	r3, #0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10b      	bne.n	8008e02 <xQueueGenericSend+0xc6>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	61fb      	str	r3, [r7, #28]
}
 8008dfc:	bf00      	nop
 8008dfe:	bf00      	nop
 8008e00:	e7fd      	b.n	8008dfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e02:	f002 fa81 	bl	800b308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d302      	bcc.n	8008e18 <xQueueGenericSend+0xdc>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d129      	bne.n	8008e6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e1e:	f000 fbb9 	bl	8009594 <prvCopyDataToQueue>
 8008e22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d010      	beq.n	8008e4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e2e:	3324      	adds	r3, #36	@ 0x24
 8008e30:	4618      	mov	r0, r3
 8008e32:	f001 f98f 	bl	800a154 <xTaskRemoveFromEventList>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d013      	beq.n	8008e64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8008f3c <xQueueGenericSend+0x200>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	e00a      	b.n	8008e64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d007      	beq.n	8008e64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e54:	4b39      	ldr	r3, [pc, #228]	@ (8008f3c <xQueueGenericSend+0x200>)
 8008e56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e64:	f002 fa82 	bl	800b36c <vPortExitCritical>
				return pdPASS;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e063      	b.n	8008f34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d103      	bne.n	8008e7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e72:	f002 fa7b 	bl	800b36c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	e05c      	b.n	8008f34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d106      	bne.n	8008e8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e80:	f107 0314 	add.w	r3, r7, #20
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 fa2d 	bl	800a2e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e8e:	f002 fa6d 	bl	800b36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e92:	f000 fefb 	bl	8009c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e96:	f002 fa37 	bl	800b308 <vPortEnterCritical>
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ea0:	b25b      	sxtb	r3, r3
 8008ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea6:	d103      	bne.n	8008eb0 <xQueueGenericSend+0x174>
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eb6:	b25b      	sxtb	r3, r3
 8008eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ebc:	d103      	bne.n	8008ec6 <xQueueGenericSend+0x18a>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ec6:	f002 fa51 	bl	800b36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eca:	1d3a      	adds	r2, r7, #4
 8008ecc:	f107 0314 	add.w	r3, r7, #20
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 fa1c 	bl	800a310 <xTaskCheckForTimeOut>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d124      	bne.n	8008f28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ede:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008ee0:	f000 fc50 	bl	8009784 <prvIsQueueFull>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d018      	beq.n	8008f1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	3310      	adds	r3, #16
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f001 f89e 	bl	800a034 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008efa:	f000 fbdb 	bl	80096b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008efe:	f000 fed3 	bl	8009ca8 <xTaskResumeAll>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f47f af7c 	bne.w	8008e02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f3c <xQueueGenericSend+0x200>)
 8008f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	e772      	b.n	8008e02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f1e:	f000 fbc9 	bl	80096b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f22:	f000 fec1 	bl	8009ca8 <xTaskResumeAll>
 8008f26:	e76c      	b.n	8008e02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f2a:	f000 fbc3 	bl	80096b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f2e:	f000 febb 	bl	8009ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3738      	adds	r7, #56	@ 0x38
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b090      	sub	sp, #64	@ 0x40
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10b      	bne.n	8008f70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	e7fd      	b.n	8008f6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d103      	bne.n	8008f7e <xQueueGenericSendFromISR+0x3e>
 8008f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <xQueueGenericSendFromISR+0x42>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <xQueueGenericSendFromISR+0x44>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10b      	bne.n	8008fa0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d103      	bne.n	8008fae <xQueueGenericSendFromISR+0x6e>
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <xQueueGenericSendFromISR+0x72>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueGenericSendFromISR+0x74>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10b      	bne.n	8008fd0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	623b      	str	r3, [r7, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	bf00      	nop
 8008fce:	e7fd      	b.n	8008fcc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fd0:	f002 fa7a 	bl	800b4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8008fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	61fa      	str	r2, [r7, #28]
 8008fea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008fec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <xQueueGenericSendFromISR+0xc2>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d12f      	bne.n	8009062 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009008:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009010:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009018:	f000 fabc 	bl	8009594 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800901c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009024:	d112      	bne.n	800904c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d016      	beq.n	800905c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800902e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009030:	3324      	adds	r3, #36	@ 0x24
 8009032:	4618      	mov	r0, r3
 8009034:	f001 f88e 	bl	800a154 <xTaskRemoveFromEventList>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00e      	beq.n	800905c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	e007      	b.n	800905c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800904c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009050:	3301      	adds	r3, #1
 8009052:	b2db      	uxtb	r3, r3
 8009054:	b25a      	sxtb	r2, r3
 8009056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800905c:	2301      	movs	r3, #1
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009060:	e001      	b.n	8009066 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009062:	2300      	movs	r3, #0
 8009064:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009068:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009070:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009074:	4618      	mov	r0, r3
 8009076:	3740      	adds	r7, #64	@ 0x40
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08c      	sub	sp, #48	@ 0x30
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009088:	2300      	movs	r3, #0
 800908a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10b      	bne.n	80090ae <xQueueReceive+0x32>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	623b      	str	r3, [r7, #32]
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	e7fd      	b.n	80090aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d103      	bne.n	80090bc <xQueueReceive+0x40>
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d101      	bne.n	80090c0 <xQueueReceive+0x44>
 80090bc:	2301      	movs	r3, #1
 80090be:	e000      	b.n	80090c2 <xQueueReceive+0x46>
 80090c0:	2300      	movs	r3, #0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10b      	bne.n	80090de <xQueueReceive+0x62>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	61fb      	str	r3, [r7, #28]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090de:	f001 fa6d 	bl	800a5bc <xTaskGetSchedulerState>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <xQueueReceive+0x72>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <xQueueReceive+0x76>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <xQueueReceive+0x78>
 80090f2:	2300      	movs	r3, #0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <xQueueReceive+0x94>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	61bb      	str	r3, [r7, #24]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009110:	f002 f8fa 	bl	800b308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009118:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01f      	beq.n	8009160 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009124:	f000 faa0 	bl	8009668 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912a:	1e5a      	subs	r2, r3, #1
 800912c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00f      	beq.n	8009158 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	3310      	adds	r3, #16
 800913c:	4618      	mov	r0, r3
 800913e:	f001 f809 	bl	800a154 <xTaskRemoveFromEventList>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009148:	4b3c      	ldr	r3, [pc, #240]	@ (800923c <xQueueReceive+0x1c0>)
 800914a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009158:	f002 f908 	bl	800b36c <vPortExitCritical>
				return pdPASS;
 800915c:	2301      	movs	r3, #1
 800915e:	e069      	b.n	8009234 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009166:	f002 f901 	bl	800b36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800916a:	2300      	movs	r3, #0
 800916c:	e062      	b.n	8009234 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800916e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d106      	bne.n	8009182 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009174:	f107 0310 	add.w	r3, r7, #16
 8009178:	4618      	mov	r0, r3
 800917a:	f001 f8b3 	bl	800a2e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800917e:	2301      	movs	r3, #1
 8009180:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009182:	f002 f8f3 	bl	800b36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009186:	f000 fd81 	bl	8009c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800918a:	f002 f8bd 	bl	800b308 <vPortEnterCritical>
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009194:	b25b      	sxtb	r3, r3
 8009196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919a:	d103      	bne.n	80091a4 <xQueueReceive+0x128>
 800919c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d103      	bne.n	80091ba <xQueueReceive+0x13e>
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091ba:	f002 f8d7 	bl	800b36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091be:	1d3a      	adds	r2, r7, #4
 80091c0:	f107 0310 	add.w	r3, r7, #16
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 f8a2 	bl	800a310 <xTaskCheckForTimeOut>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d123      	bne.n	800921a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091d4:	f000 fac0 	bl	8009758 <prvIsQueueEmpty>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d017      	beq.n	800920e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	3324      	adds	r3, #36	@ 0x24
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4611      	mov	r1, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 ff24 	bl	800a034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ee:	f000 fa61 	bl	80096b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091f2:	f000 fd59 	bl	8009ca8 <xTaskResumeAll>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d189      	bne.n	8009110 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80091fc:	4b0f      	ldr	r3, [pc, #60]	@ (800923c <xQueueReceive+0x1c0>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	e780      	b.n	8009110 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800920e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009210:	f000 fa50 	bl	80096b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009214:	f000 fd48 	bl	8009ca8 <xTaskResumeAll>
 8009218:	e77a      	b.n	8009110 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800921a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800921c:	f000 fa4a 	bl	80096b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009220:	f000 fd42 	bl	8009ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009226:	f000 fa97 	bl	8009758 <prvIsQueueEmpty>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	f43f af6f 	beq.w	8009110 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009232:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009234:	4618      	mov	r0, r3
 8009236:	3730      	adds	r7, #48	@ 0x30
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08e      	sub	sp, #56	@ 0x38
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800924a:	2300      	movs	r3, #0
 800924c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009252:	2300      	movs	r3, #0
 8009254:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10b      	bne.n	8009274 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	623b      	str	r3, [r7, #32]
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	61fb      	str	r3, [r7, #28]
}
 800928e:	bf00      	nop
 8009290:	bf00      	nop
 8009292:	e7fd      	b.n	8009290 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009294:	f001 f992 	bl	800a5bc <xTaskGetSchedulerState>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d102      	bne.n	80092a4 <xQueueSemaphoreTake+0x64>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d101      	bne.n	80092a8 <xQueueSemaphoreTake+0x68>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e000      	b.n	80092aa <xQueueSemaphoreTake+0x6a>
 80092a8:	2300      	movs	r3, #0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10b      	bne.n	80092c6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	61bb      	str	r3, [r7, #24]
}
 80092c0:	bf00      	nop
 80092c2:	bf00      	nop
 80092c4:	e7fd      	b.n	80092c2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092c6:	f002 f81f 	bl	800b308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d024      	beq.n	8009320 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d8:	1e5a      	subs	r2, r3, #1
 80092da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80092e6:	f001 fafb 	bl	800a8e0 <pvTaskIncrementMutexHeldCount>
 80092ea:	4602      	mov	r2, r0
 80092ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00f      	beq.n	8009318 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fa:	3310      	adds	r3, #16
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 ff29 	bl	800a154 <xTaskRemoveFromEventList>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d007      	beq.n	8009318 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009308:	4b54      	ldr	r3, [pc, #336]	@ (800945c <xQueueSemaphoreTake+0x21c>)
 800930a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009318:	f002 f828 	bl	800b36c <vPortExitCritical>
				return pdPASS;
 800931c:	2301      	movs	r3, #1
 800931e:	e098      	b.n	8009452 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d112      	bne.n	800934c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00b      	beq.n	8009344 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	617b      	str	r3, [r7, #20]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009344:	f002 f812 	bl	800b36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009348:	2300      	movs	r3, #0
 800934a:	e082      	b.n	8009452 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800934c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	4618      	mov	r0, r3
 8009358:	f000 ffc4 	bl	800a2e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800935c:	2301      	movs	r3, #1
 800935e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009360:	f002 f804 	bl	800b36c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009364:	f000 fc92 	bl	8009c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009368:	f001 ffce 	bl	800b308 <vPortEnterCritical>
 800936c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009372:	b25b      	sxtb	r3, r3
 8009374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009378:	d103      	bne.n	8009382 <xQueueSemaphoreTake+0x142>
 800937a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009388:	b25b      	sxtb	r3, r3
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d103      	bne.n	8009398 <xQueueSemaphoreTake+0x158>
 8009390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009398:	f001 ffe8 	bl	800b36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800939c:	463a      	mov	r2, r7
 800939e:	f107 030c 	add.w	r3, r7, #12
 80093a2:	4611      	mov	r1, r2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 ffb3 	bl	800a310 <xTaskCheckForTimeOut>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d132      	bne.n	8009416 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093b2:	f000 f9d1 	bl	8009758 <prvIsQueueEmpty>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d026      	beq.n	800940a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d109      	bne.n	80093d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80093c4:	f001 ffa0 	bl	800b308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 f913 	bl	800a5f8 <xTaskPriorityInherit>
 80093d2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80093d4:	f001 ffca 	bl	800b36c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093da:	3324      	adds	r3, #36	@ 0x24
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 fe27 	bl	800a034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093e8:	f000 f964 	bl	80096b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093ec:	f000 fc5c 	bl	8009ca8 <xTaskResumeAll>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f47f af67 	bne.w	80092c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80093f8:	4b18      	ldr	r3, [pc, #96]	@ (800945c <xQueueSemaphoreTake+0x21c>)
 80093fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	f3bf 8f6f 	isb	sy
 8009408:	e75d      	b.n	80092c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800940a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800940c:	f000 f952 	bl	80096b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009410:	f000 fc4a 	bl	8009ca8 <xTaskResumeAll>
 8009414:	e757      	b.n	80092c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009416:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009418:	f000 f94c 	bl	80096b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800941c:	f000 fc44 	bl	8009ca8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009420:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009422:	f000 f999 	bl	8009758 <prvIsQueueEmpty>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	f43f af4c 	beq.w	80092c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800942e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00d      	beq.n	8009450 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009434:	f001 ff68 	bl	800b308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009438:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800943a:	f000 f893 	bl	8009564 <prvGetDisinheritPriorityAfterTimeout>
 800943e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009446:	4618      	mov	r0, r3
 8009448:	f001 f9ae 	bl	800a7a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800944c:	f001 ff8e 	bl	800b36c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009452:	4618      	mov	r0, r3
 8009454:	3738      	adds	r7, #56	@ 0x38
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	e000ed04 	.word	0xe000ed04

08009460 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08e      	sub	sp, #56	@ 0x38
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	623b      	str	r3, [r7, #32]
}
 8009488:	bf00      	nop
 800948a:	bf00      	nop
 800948c:	e7fd      	b.n	800948a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d103      	bne.n	800949c <xQueueReceiveFromISR+0x3c>
 8009494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <xQueueReceiveFromISR+0x40>
 800949c:	2301      	movs	r3, #1
 800949e:	e000      	b.n	80094a2 <xQueueReceiveFromISR+0x42>
 80094a0:	2300      	movs	r3, #0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10b      	bne.n	80094be <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	61fb      	str	r3, [r7, #28]
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	e7fd      	b.n	80094ba <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80094be:	f002 f803 	bl	800b4c8 <vPortValidateInterruptPriority>
	__asm volatile
 80094c2:	f3ef 8211 	mrs	r2, BASEPRI
 80094c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	61ba      	str	r2, [r7, #24]
 80094d8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80094da:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d02f      	beq.n	800954a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094f8:	f000 f8b6 	bl	8009668 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fe:	1e5a      	subs	r2, r3, #1
 8009500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009502:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009504:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950c:	d112      	bne.n	8009534 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d016      	beq.n	8009544 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	3310      	adds	r3, #16
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fe1a 	bl	800a154 <xTaskRemoveFromEventList>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00e      	beq.n	8009544 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e007      	b.n	8009544 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009538:	3301      	adds	r3, #1
 800953a:	b2db      	uxtb	r3, r3
 800953c:	b25a      	sxtb	r2, r3
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009544:	2301      	movs	r3, #1
 8009546:	637b      	str	r3, [r7, #52]	@ 0x34
 8009548:	e001      	b.n	800954e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800954a:	2300      	movs	r3, #0
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
 800954e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009550:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f383 8811 	msr	BASEPRI, r3
}
 8009558:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800955a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800955c:	4618      	mov	r0, r3
 800955e:	3738      	adds	r7, #56	@ 0x38
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d006      	beq.n	8009582 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	e001      	b.n	8009586 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009582:	2300      	movs	r3, #0
 8009584:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009586:	68fb      	ldr	r3, [r7, #12]
	}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10d      	bne.n	80095ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d14d      	bne.n	8009656 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	4618      	mov	r0, r3
 80095c0:	f001 f882 	bl	800a6c8 <xTaskPriorityDisinherit>
 80095c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	609a      	str	r2, [r3, #8]
 80095cc:	e043      	b.n	8009656 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d119      	bne.n	8009608 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6858      	ldr	r0, [r3, #4]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095dc:	461a      	mov	r2, r3
 80095de:	68b9      	ldr	r1, [r7, #8]
 80095e0:	f002 f9ce 	bl	800b980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ec:	441a      	add	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d32b      	bcc.n	8009656 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	605a      	str	r2, [r3, #4]
 8009606:	e026      	b.n	8009656 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68d8      	ldr	r0, [r3, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009610:	461a      	mov	r2, r3
 8009612:	68b9      	ldr	r1, [r7, #8]
 8009614:	f002 f9b4 	bl	800b980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009620:	425b      	negs	r3, r3
 8009622:	441a      	add	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d207      	bcs.n	8009644 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	425b      	negs	r3, r3
 800963e:	441a      	add	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b02      	cmp	r3, #2
 8009648:	d105      	bne.n	8009656 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	3b01      	subs	r3, #1
 8009654:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	1c5a      	adds	r2, r3, #1
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800965e:	697b      	ldr	r3, [r7, #20]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009676:	2b00      	cmp	r3, #0
 8009678:	d018      	beq.n	80096ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009682:	441a      	add	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	429a      	cmp	r2, r3
 8009692:	d303      	bcc.n	800969c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68d9      	ldr	r1, [r3, #12]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a4:	461a      	mov	r2, r3
 80096a6:	6838      	ldr	r0, [r7, #0]
 80096a8:	f002 f96a 	bl	800b980 <memcpy>
	}
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096bc:	f001 fe24 	bl	800b308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096c8:	e011      	b.n	80096ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d012      	beq.n	80096f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3324      	adds	r3, #36	@ 0x24
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fd3c 	bl	800a154 <xTaskRemoveFromEventList>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096e2:	f000 fe79 	bl	800a3d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dce9      	bgt.n	80096ca <prvUnlockQueue+0x16>
 80096f6:	e000      	b.n	80096fa <prvUnlockQueue+0x46>
					break;
 80096f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	22ff      	movs	r2, #255	@ 0xff
 80096fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009702:	f001 fe33 	bl	800b36c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009706:	f001 fdff 	bl	800b308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009710:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009712:	e011      	b.n	8009738 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d012      	beq.n	8009742 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3310      	adds	r3, #16
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fd17 	bl	800a154 <xTaskRemoveFromEventList>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800972c:	f000 fe54 	bl	800a3d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	3b01      	subs	r3, #1
 8009734:	b2db      	uxtb	r3, r3
 8009736:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dce9      	bgt.n	8009714 <prvUnlockQueue+0x60>
 8009740:	e000      	b.n	8009744 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009742:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	22ff      	movs	r2, #255	@ 0xff
 8009748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800974c:	f001 fe0e 	bl	800b36c <vPortExitCritical>
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009760:	f001 fdd2 	bl	800b308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800976c:	2301      	movs	r3, #1
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	e001      	b.n	8009776 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009776:	f001 fdf9 	bl	800b36c <vPortExitCritical>

	return xReturn;
 800977a:	68fb      	ldr	r3, [r7, #12]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800978c:	f001 fdbc 	bl	800b308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009798:	429a      	cmp	r2, r3
 800979a:	d102      	bne.n	80097a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800979c:	2301      	movs	r3, #1
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e001      	b.n	80097a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097a2:	2300      	movs	r3, #0
 80097a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097a6:	f001 fde1 	bl	800b36c <vPortExitCritical>

	return xReturn;
 80097aa:	68fb      	ldr	r3, [r7, #12]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	e014      	b.n	80097ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097c4:	4a0f      	ldr	r2, [pc, #60]	@ (8009804 <vQueueAddToRegistry+0x50>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10b      	bne.n	80097e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097d0:	490c      	ldr	r1, [pc, #48]	@ (8009804 <vQueueAddToRegistry+0x50>)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097da:	4a0a      	ldr	r2, [pc, #40]	@ (8009804 <vQueueAddToRegistry+0x50>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	00db      	lsls	r3, r3, #3
 80097e0:	4413      	add	r3, r2
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80097e6:	e006      	b.n	80097f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	d9e7      	bls.n	80097c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	240007e0 	.word	0x240007e0

08009808 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009818:	f001 fd76 	bl	800b308 <vPortEnterCritical>
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009822:	b25b      	sxtb	r3, r3
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d103      	bne.n	8009832 <vQueueWaitForMessageRestricted+0x2a>
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009838:	b25b      	sxtb	r3, r3
 800983a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983e:	d103      	bne.n	8009848 <vQueueWaitForMessageRestricted+0x40>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009848:	f001 fd90 	bl	800b36c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009850:	2b00      	cmp	r3, #0
 8009852:	d106      	bne.n	8009862 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	3324      	adds	r3, #36	@ 0x24
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	68b9      	ldr	r1, [r7, #8]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 fc4d 	bl	800a0fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009862:	6978      	ldr	r0, [r7, #20]
 8009864:	f7ff ff26 	bl	80096b4 <prvUnlockQueue>
	}
 8009868:	bf00      	nop
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009870:	b580      	push	{r7, lr}
 8009872:	b08e      	sub	sp, #56	@ 0x38
 8009874:	af04      	add	r7, sp, #16
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800987e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10b      	bne.n	800989c <xTaskCreateStatic+0x2c>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	623b      	str	r3, [r7, #32]
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	e7fd      	b.n	8009898 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800989c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10b      	bne.n	80098ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	61fb      	str	r3, [r7, #28]
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop
 80098b8:	e7fd      	b.n	80098b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098ba:	235c      	movs	r3, #92	@ 0x5c
 80098bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80098c2:	d00b      	beq.n	80098dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	61bb      	str	r3, [r7, #24]
}
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
 80098da:	e7fd      	b.n	80098d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01e      	beq.n	8009922 <xTaskCreateStatic+0xb2>
 80098e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d01b      	beq.n	8009922 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f6:	2202      	movs	r2, #2
 80098f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098fc:	2300      	movs	r3, #0
 80098fe:	9303      	str	r3, [sp, #12]
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	9302      	str	r3, [sp, #8]
 8009904:	f107 0314 	add.w	r3, r7, #20
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	68b9      	ldr	r1, [r7, #8]
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 f850 	bl	80099ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800991a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800991c:	f000 f8de 	bl	8009adc <prvAddNewTaskToReadyList>
 8009920:	e001      	b.n	8009926 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009926:	697b      	ldr	r3, [r7, #20]
	}
 8009928:	4618      	mov	r0, r3
 800992a:	3728      	adds	r7, #40	@ 0x28
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009930:	b580      	push	{r7, lr}
 8009932:	b08c      	sub	sp, #48	@ 0x30
 8009934:	af04      	add	r7, sp, #16
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	4613      	mov	r3, r2
 800993e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009940:	88fb      	ldrh	r3, [r7, #6]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fe01 	bl	800b54c <pvPortMalloc>
 800994a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00e      	beq.n	8009970 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009952:	205c      	movs	r0, #92	@ 0x5c
 8009954:	f001 fdfa 	bl	800b54c <pvPortMalloc>
 8009958:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	631a      	str	r2, [r3, #48]	@ 0x30
 8009966:	e005      	b.n	8009974 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009968:	6978      	ldr	r0, [r7, #20]
 800996a:	f001 febd 	bl	800b6e8 <vPortFree>
 800996e:	e001      	b.n	8009974 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009970:	2300      	movs	r3, #0
 8009972:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d017      	beq.n	80099aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009982:	88fa      	ldrh	r2, [r7, #6]
 8009984:	2300      	movs	r3, #0
 8009986:	9303      	str	r3, [sp, #12]
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	9302      	str	r3, [sp, #8]
 800998c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f80e 	bl	80099ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800999e:	69f8      	ldr	r0, [r7, #28]
 80099a0:	f000 f89c 	bl	8009adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80099a4:	2301      	movs	r3, #1
 80099a6:	61bb      	str	r3, [r7, #24]
 80099a8:	e002      	b.n	80099b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099aa:	f04f 33ff 	mov.w	r3, #4294967295
 80099ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80099b0:	69bb      	ldr	r3, [r7, #24]
	}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3720      	adds	r7, #32
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b088      	sub	sp, #32
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	607a      	str	r2, [r7, #4]
 80099c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	461a      	mov	r2, r3
 80099d2:	21a5      	movs	r1, #165	@ 0xa5
 80099d4:	f001 ffa8 	bl	800b928 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80099e2:	440b      	add	r3, r1
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	4413      	add	r3, r2
 80099e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	f023 0307 	bic.w	r3, r3, #7
 80099f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00b      	beq.n	8009a14 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80099fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	617b      	str	r3, [r7, #20]
}
 8009a0e:	bf00      	nop
 8009a10:	bf00      	nop
 8009a12:	e7fd      	b.n	8009a10 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d01f      	beq.n	8009a5a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	61fb      	str	r3, [r7, #28]
 8009a1e:	e012      	b.n	8009a46 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	7819      	ldrb	r1, [r3, #0]
 8009a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3334      	adds	r3, #52	@ 0x34
 8009a30:	460a      	mov	r2, r1
 8009a32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	4413      	add	r3, r2
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d006      	beq.n	8009a4e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	3301      	adds	r3, #1
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	2b0f      	cmp	r3, #15
 8009a4a:	d9e9      	bls.n	8009a20 <prvInitialiseNewTask+0x66>
 8009a4c:	e000      	b.n	8009a50 <prvInitialiseNewTask+0x96>
			{
				break;
 8009a4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a58:	e003      	b.n	8009a62 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a64:	2b37      	cmp	r3, #55	@ 0x37
 8009a66:	d901      	bls.n	8009a6c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a68:	2337      	movs	r3, #55	@ 0x37
 8009a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a70:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a76:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a80:	3304      	adds	r3, #4
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fec8 	bl	8008818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8a:	3318      	adds	r3, #24
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fe fec3 	bl	8008818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aaa:	2200      	movs	r2, #0
 8009aac:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	68f9      	ldr	r1, [r7, #12]
 8009aba:	69b8      	ldr	r0, [r7, #24]
 8009abc:	f001 faf2 	bl	800b0a4 <pxPortInitialiseStack>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ad0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ad2:	bf00      	nop
 8009ad4:	3720      	adds	r7, #32
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ae4:	f001 fc10 	bl	800b308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8009ba0 <prvAddNewTaskToReadyList+0xc4>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3301      	adds	r3, #1
 8009aee:	4a2c      	ldr	r2, [pc, #176]	@ (8009ba0 <prvAddNewTaskToReadyList+0xc4>)
 8009af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009af2:	4b2c      	ldr	r3, [pc, #176]	@ (8009ba4 <prvAddNewTaskToReadyList+0xc8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d109      	bne.n	8009b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009afa:	4a2a      	ldr	r2, [pc, #168]	@ (8009ba4 <prvAddNewTaskToReadyList+0xc8>)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b00:	4b27      	ldr	r3, [pc, #156]	@ (8009ba0 <prvAddNewTaskToReadyList+0xc4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d110      	bne.n	8009b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b08:	f000 fc8a 	bl	800a420 <prvInitialiseTaskLists>
 8009b0c:	e00d      	b.n	8009b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b0e:	4b26      	ldr	r3, [pc, #152]	@ (8009ba8 <prvAddNewTaskToReadyList+0xcc>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d109      	bne.n	8009b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b16:	4b23      	ldr	r3, [pc, #140]	@ (8009ba4 <prvAddNewTaskToReadyList+0xc8>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d802      	bhi.n	8009b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b24:	4a1f      	ldr	r2, [pc, #124]	@ (8009ba4 <prvAddNewTaskToReadyList+0xc8>)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b2a:	4b20      	ldr	r3, [pc, #128]	@ (8009bac <prvAddNewTaskToReadyList+0xd0>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	4a1e      	ldr	r2, [pc, #120]	@ (8009bac <prvAddNewTaskToReadyList+0xd0>)
 8009b32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b34:	4b1d      	ldr	r3, [pc, #116]	@ (8009bac <prvAddNewTaskToReadyList+0xd0>)
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b40:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb0 <prvAddNewTaskToReadyList+0xd4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d903      	bls.n	8009b50 <prvAddNewTaskToReadyList+0x74>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4c:	4a18      	ldr	r2, [pc, #96]	@ (8009bb0 <prvAddNewTaskToReadyList+0xd4>)
 8009b4e:	6013      	str	r3, [r2, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b54:	4613      	mov	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4a15      	ldr	r2, [pc, #84]	@ (8009bb4 <prvAddNewTaskToReadyList+0xd8>)
 8009b5e:	441a      	add	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3304      	adds	r3, #4
 8009b64:	4619      	mov	r1, r3
 8009b66:	4610      	mov	r0, r2
 8009b68:	f7fe fe63 	bl	8008832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b6c:	f001 fbfe 	bl	800b36c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b70:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba8 <prvAddNewTaskToReadyList+0xcc>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00e      	beq.n	8009b96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba4 <prvAddNewTaskToReadyList+0xc8>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d207      	bcs.n	8009b96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b86:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb8 <prvAddNewTaskToReadyList+0xdc>)
 8009b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b96:	bf00      	nop
 8009b98:	3708      	adds	r7, #8
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	24000cf4 	.word	0x24000cf4
 8009ba4:	24000820 	.word	0x24000820
 8009ba8:	24000d00 	.word	0x24000d00
 8009bac:	24000d10 	.word	0x24000d10
 8009bb0:	24000cfc 	.word	0x24000cfc
 8009bb4:	24000824 	.word	0x24000824
 8009bb8:	e000ed04 	.word	0xe000ed04

08009bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08a      	sub	sp, #40	@ 0x28
 8009bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bca:	463a      	mov	r2, r7
 8009bcc:	1d39      	adds	r1, r7, #4
 8009bce:	f107 0308 	add.w	r3, r7, #8
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fbd6 	bl	8008384 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	9202      	str	r2, [sp, #8]
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	2300      	movs	r3, #0
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2300      	movs	r3, #0
 8009be8:	460a      	mov	r2, r1
 8009bea:	4922      	ldr	r1, [pc, #136]	@ (8009c74 <vTaskStartScheduler+0xb8>)
 8009bec:	4822      	ldr	r0, [pc, #136]	@ (8009c78 <vTaskStartScheduler+0xbc>)
 8009bee:	f7ff fe3f 	bl	8009870 <xTaskCreateStatic>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	4a21      	ldr	r2, [pc, #132]	@ (8009c7c <vTaskStartScheduler+0xc0>)
 8009bf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bf8:	4b20      	ldr	r3, [pc, #128]	@ (8009c7c <vTaskStartScheduler+0xc0>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c00:	2301      	movs	r3, #1
 8009c02:	617b      	str	r3, [r7, #20]
 8009c04:	e001      	b.n	8009c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d102      	bne.n	8009c16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c10:	f000 fece 	bl	800a9b0 <xTimerCreateTimerTask>
 8009c14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d116      	bne.n	8009c4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	613b      	str	r3, [r7, #16]
}
 8009c2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c30:	4b13      	ldr	r3, [pc, #76]	@ (8009c80 <vTaskStartScheduler+0xc4>)
 8009c32:	f04f 32ff 	mov.w	r2, #4294967295
 8009c36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c38:	4b12      	ldr	r3, [pc, #72]	@ (8009c84 <vTaskStartScheduler+0xc8>)
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c3e:	4b12      	ldr	r3, [pc, #72]	@ (8009c88 <vTaskStartScheduler+0xcc>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c44:	f001 fabc 	bl	800b1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c48:	e00f      	b.n	8009c6a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d10b      	bne.n	8009c6a <vTaskStartScheduler+0xae>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	60fb      	str	r3, [r7, #12]
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	e7fd      	b.n	8009c66 <vTaskStartScheduler+0xaa>
}
 8009c6a:	bf00      	nop
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	0800b9e8 	.word	0x0800b9e8
 8009c78:	0800a3f1 	.word	0x0800a3f1
 8009c7c:	24000d18 	.word	0x24000d18
 8009c80:	24000d14 	.word	0x24000d14
 8009c84:	24000d00 	.word	0x24000d00
 8009c88:	24000cf8 	.word	0x24000cf8

08009c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c90:	4b04      	ldr	r3, [pc, #16]	@ (8009ca4 <vTaskSuspendAll+0x18>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3301      	adds	r3, #1
 8009c96:	4a03      	ldr	r2, [pc, #12]	@ (8009ca4 <vTaskSuspendAll+0x18>)
 8009c98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c9a:	bf00      	nop
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	24000d1c 	.word	0x24000d1c

08009ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cb6:	4b42      	ldr	r3, [pc, #264]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <xTaskResumeAll+0x2e>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	603b      	str	r3, [r7, #0]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cd6:	f001 fb17 	bl	800b308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cda:	4b39      	ldr	r3, [pc, #228]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4a37      	ldr	r2, [pc, #220]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009ce2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ce4:	4b36      	ldr	r3, [pc, #216]	@ (8009dc0 <xTaskResumeAll+0x118>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d162      	bne.n	8009db2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cec:	4b35      	ldr	r3, [pc, #212]	@ (8009dc4 <xTaskResumeAll+0x11c>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d05e      	beq.n	8009db2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cf4:	e02f      	b.n	8009d56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf6:	4b34      	ldr	r3, [pc, #208]	@ (8009dc8 <xTaskResumeAll+0x120>)
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3318      	adds	r3, #24
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe fdf2 	bl	80088ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe fded 	bl	80088ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d16:	4b2d      	ldr	r3, [pc, #180]	@ (8009dcc <xTaskResumeAll+0x124>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d903      	bls.n	8009d26 <xTaskResumeAll+0x7e>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d22:	4a2a      	ldr	r2, [pc, #168]	@ (8009dcc <xTaskResumeAll+0x124>)
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4a27      	ldr	r2, [pc, #156]	@ (8009dd0 <xTaskResumeAll+0x128>)
 8009d34:	441a      	add	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3304      	adds	r3, #4
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fe fd78 	bl	8008832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d46:	4b23      	ldr	r3, [pc, #140]	@ (8009dd4 <xTaskResumeAll+0x12c>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d302      	bcc.n	8009d56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009d50:	4b21      	ldr	r3, [pc, #132]	@ (8009dd8 <xTaskResumeAll+0x130>)
 8009d52:	2201      	movs	r2, #1
 8009d54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d56:	4b1c      	ldr	r3, [pc, #112]	@ (8009dc8 <xTaskResumeAll+0x120>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1cb      	bne.n	8009cf6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d64:	f000 fbfa 	bl	800a55c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d68:	4b1c      	ldr	r3, [pc, #112]	@ (8009ddc <xTaskResumeAll+0x134>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d010      	beq.n	8009d96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d74:	f000 f846 	bl	8009e04 <xTaskIncrementTick>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d002      	beq.n	8009d84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009d7e:	4b16      	ldr	r3, [pc, #88]	@ (8009dd8 <xTaskResumeAll+0x130>)
 8009d80:	2201      	movs	r2, #1
 8009d82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1f1      	bne.n	8009d74 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009d90:	4b12      	ldr	r3, [pc, #72]	@ (8009ddc <xTaskResumeAll+0x134>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d96:	4b10      	ldr	r3, [pc, #64]	@ (8009dd8 <xTaskResumeAll+0x130>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d009      	beq.n	8009db2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009da2:	4b0f      	ldr	r3, [pc, #60]	@ (8009de0 <xTaskResumeAll+0x138>)
 8009da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009db2:	f001 fadb 	bl	800b36c <vPortExitCritical>

	return xAlreadyYielded;
 8009db6:	68bb      	ldr	r3, [r7, #8]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	24000d1c 	.word	0x24000d1c
 8009dc4:	24000cf4 	.word	0x24000cf4
 8009dc8:	24000cb4 	.word	0x24000cb4
 8009dcc:	24000cfc 	.word	0x24000cfc
 8009dd0:	24000824 	.word	0x24000824
 8009dd4:	24000820 	.word	0x24000820
 8009dd8:	24000d08 	.word	0x24000d08
 8009ddc:	24000d04 	.word	0x24000d04
 8009de0:	e000ed04 	.word	0xe000ed04

08009de4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dea:	4b05      	ldr	r3, [pc, #20]	@ (8009e00 <xTaskGetTickCount+0x1c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009df0:	687b      	ldr	r3, [r7, #4]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	24000cf8 	.word	0x24000cf8

08009e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8009f4c <xTaskIncrementTick+0x148>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f040 8090 	bne.w	8009f38 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e18:	4b4d      	ldr	r3, [pc, #308]	@ (8009f50 <xTaskIncrementTick+0x14c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e20:	4a4b      	ldr	r2, [pc, #300]	@ (8009f50 <xTaskIncrementTick+0x14c>)
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d121      	bne.n	8009e70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e2c:	4b49      	ldr	r3, [pc, #292]	@ (8009f54 <xTaskIncrementTick+0x150>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00b      	beq.n	8009e4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	603b      	str	r3, [r7, #0]
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <xTaskIncrementTick+0x46>
 8009e4e:	4b41      	ldr	r3, [pc, #260]	@ (8009f54 <xTaskIncrementTick+0x150>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	4b40      	ldr	r3, [pc, #256]	@ (8009f58 <xTaskIncrementTick+0x154>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a3e      	ldr	r2, [pc, #248]	@ (8009f54 <xTaskIncrementTick+0x150>)
 8009e5a:	6013      	str	r3, [r2, #0]
 8009e5c:	4a3e      	ldr	r2, [pc, #248]	@ (8009f58 <xTaskIncrementTick+0x154>)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	4b3e      	ldr	r3, [pc, #248]	@ (8009f5c <xTaskIncrementTick+0x158>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3301      	adds	r3, #1
 8009e68:	4a3c      	ldr	r2, [pc, #240]	@ (8009f5c <xTaskIncrementTick+0x158>)
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	f000 fb76 	bl	800a55c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e70:	4b3b      	ldr	r3, [pc, #236]	@ (8009f60 <xTaskIncrementTick+0x15c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d349      	bcc.n	8009f0e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e7a:	4b36      	ldr	r3, [pc, #216]	@ (8009f54 <xTaskIncrementTick+0x150>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d104      	bne.n	8009e8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e84:	4b36      	ldr	r3, [pc, #216]	@ (8009f60 <xTaskIncrementTick+0x15c>)
 8009e86:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8a:	601a      	str	r2, [r3, #0]
					break;
 8009e8c:	e03f      	b.n	8009f0e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e8e:	4b31      	ldr	r3, [pc, #196]	@ (8009f54 <xTaskIncrementTick+0x150>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d203      	bcs.n	8009eae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8009f60 <xTaskIncrementTick+0x15c>)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009eac:	e02f      	b.n	8009f0e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fd1a 	bl	80088ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	3318      	adds	r3, #24
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe fd11 	bl	80088ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ece:	4b25      	ldr	r3, [pc, #148]	@ (8009f64 <xTaskIncrementTick+0x160>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d903      	bls.n	8009ede <xTaskIncrementTick+0xda>
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eda:	4a22      	ldr	r2, [pc, #136]	@ (8009f64 <xTaskIncrementTick+0x160>)
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4a1f      	ldr	r2, [pc, #124]	@ (8009f68 <xTaskIncrementTick+0x164>)
 8009eec:	441a      	add	r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	f7fe fc9c 	bl	8008832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efe:	4b1b      	ldr	r3, [pc, #108]	@ (8009f6c <xTaskIncrementTick+0x168>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d3b8      	bcc.n	8009e7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f0c:	e7b5      	b.n	8009e7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f0e:	4b17      	ldr	r3, [pc, #92]	@ (8009f6c <xTaskIncrementTick+0x168>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f14:	4914      	ldr	r1, [pc, #80]	@ (8009f68 <xTaskIncrementTick+0x164>)
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d901      	bls.n	8009f2a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009f26:	2301      	movs	r3, #1
 8009f28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f2a:	4b11      	ldr	r3, [pc, #68]	@ (8009f70 <xTaskIncrementTick+0x16c>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009f32:	2301      	movs	r3, #1
 8009f34:	617b      	str	r3, [r7, #20]
 8009f36:	e004      	b.n	8009f42 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f38:	4b0e      	ldr	r3, [pc, #56]	@ (8009f74 <xTaskIncrementTick+0x170>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8009f74 <xTaskIncrementTick+0x170>)
 8009f40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f42:	697b      	ldr	r3, [r7, #20]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	24000d1c 	.word	0x24000d1c
 8009f50:	24000cf8 	.word	0x24000cf8
 8009f54:	24000cac 	.word	0x24000cac
 8009f58:	24000cb0 	.word	0x24000cb0
 8009f5c:	24000d0c 	.word	0x24000d0c
 8009f60:	24000d14 	.word	0x24000d14
 8009f64:	24000cfc 	.word	0x24000cfc
 8009f68:	24000824 	.word	0x24000824
 8009f6c:	24000820 	.word	0x24000820
 8009f70:	24000d08 	.word	0x24000d08
 8009f74:	24000d04 	.word	0x24000d04

08009f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f7e:	4b28      	ldr	r3, [pc, #160]	@ (800a020 <vTaskSwitchContext+0xa8>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f86:	4b27      	ldr	r3, [pc, #156]	@ (800a024 <vTaskSwitchContext+0xac>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f8c:	e042      	b.n	800a014 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009f8e:	4b25      	ldr	r3, [pc, #148]	@ (800a024 <vTaskSwitchContext+0xac>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f94:	4b24      	ldr	r3, [pc, #144]	@ (800a028 <vTaskSwitchContext+0xb0>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60fb      	str	r3, [r7, #12]
 8009f9a:	e011      	b.n	8009fc0 <vTaskSwitchContext+0x48>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10b      	bne.n	8009fba <vTaskSwitchContext+0x42>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	607b      	str	r3, [r7, #4]
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	e7fd      	b.n	8009fb6 <vTaskSwitchContext+0x3e>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	60fb      	str	r3, [r7, #12]
 8009fc0:	491a      	ldr	r1, [pc, #104]	@ (800a02c <vTaskSwitchContext+0xb4>)
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	440b      	add	r3, r1
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d0e3      	beq.n	8009f9c <vTaskSwitchContext+0x24>
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4a13      	ldr	r2, [pc, #76]	@ (800a02c <vTaskSwitchContext+0xb4>)
 8009fe0:	4413      	add	r3, r2
 8009fe2:	60bb      	str	r3, [r7, #8]
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d104      	bne.n	800a004 <vTaskSwitchContext+0x8c>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	605a      	str	r2, [r3, #4]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	4a09      	ldr	r2, [pc, #36]	@ (800a030 <vTaskSwitchContext+0xb8>)
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	4a06      	ldr	r2, [pc, #24]	@ (800a028 <vTaskSwitchContext+0xb0>)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6013      	str	r3, [r2, #0]
}
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	24000d1c 	.word	0x24000d1c
 800a024:	24000d08 	.word	0x24000d08
 800a028:	24000cfc 	.word	0x24000cfc
 800a02c:	24000824 	.word	0x24000824
 800a030:	24000820 	.word	0x24000820

0800a034 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10b      	bne.n	800a05c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	60fb      	str	r3, [r7, #12]
}
 800a056:	bf00      	nop
 800a058:	bf00      	nop
 800a05a:	e7fd      	b.n	800a058 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a05c:	4b07      	ldr	r3, [pc, #28]	@ (800a07c <vTaskPlaceOnEventList+0x48>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3318      	adds	r3, #24
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7fe fc08 	bl	800887a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a06a:	2101      	movs	r1, #1
 800a06c:	6838      	ldr	r0, [r7, #0]
 800a06e:	f000 fc4b 	bl	800a908 <prvAddCurrentTaskToDelayedList>
}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	24000820 	.word	0x24000820

0800a080 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d10b      	bne.n	800a0aa <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	617b      	str	r3, [r7, #20]
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop
 800a0a8:	e7fd      	b.n	800a0a6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800a0aa:	4b12      	ldr	r3, [pc, #72]	@ (800a0f4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10b      	bne.n	800a0ca <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	613b      	str	r3, [r7, #16]
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop
 800a0c8:	e7fd      	b.n	800a0c6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a0f8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a0d4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0d6:	4b08      	ldr	r3, [pc, #32]	@ (800a0f8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3318      	adds	r3, #24
 800a0dc:	4619      	mov	r1, r3
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f7fe fba7 	bl	8008832 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fc0e 	bl	800a908 <prvAddCurrentTaskToDelayedList>
}
 800a0ec:	bf00      	nop
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	24000d1c 	.word	0x24000d1c
 800a0f8:	24000820 	.word	0x24000820

0800a0fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10b      	bne.n	800a126 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	617b      	str	r3, [r7, #20]
}
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	e7fd      	b.n	800a122 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a126:	4b0a      	ldr	r3, [pc, #40]	@ (800a150 <vTaskPlaceOnEventListRestricted+0x54>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	3318      	adds	r3, #24
 800a12c:	4619      	mov	r1, r3
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7fe fb7f 	bl	8008832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295
 800a13e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a140:	6879      	ldr	r1, [r7, #4]
 800a142:	68b8      	ldr	r0, [r7, #8]
 800a144:	f000 fbe0 	bl	800a908 <prvAddCurrentTaskToDelayedList>
	}
 800a148:	bf00      	nop
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	24000820 	.word	0x24000820

0800a154 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	60fb      	str	r3, [r7, #12]
}
 800a17c:	bf00      	nop
 800a17e:	bf00      	nop
 800a180:	e7fd      	b.n	800a17e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	3318      	adds	r3, #24
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fbb0 	bl	80088ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a18c:	4b1d      	ldr	r3, [pc, #116]	@ (800a204 <xTaskRemoveFromEventList+0xb0>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d11d      	bne.n	800a1d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	3304      	adds	r3, #4
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe fba7 	bl	80088ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a2:	4b19      	ldr	r3, [pc, #100]	@ (800a208 <xTaskRemoveFromEventList+0xb4>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d903      	bls.n	800a1b2 <xTaskRemoveFromEventList+0x5e>
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ae:	4a16      	ldr	r2, [pc, #88]	@ (800a208 <xTaskRemoveFromEventList+0xb4>)
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4a13      	ldr	r2, [pc, #76]	@ (800a20c <xTaskRemoveFromEventList+0xb8>)
 800a1c0:	441a      	add	r2, r3
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4610      	mov	r0, r2
 800a1ca:	f7fe fb32 	bl	8008832 <vListInsertEnd>
 800a1ce:	e005      	b.n	800a1dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	3318      	adds	r3, #24
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	480e      	ldr	r0, [pc, #56]	@ (800a210 <xTaskRemoveFromEventList+0xbc>)
 800a1d8:	f7fe fb2b 	bl	8008832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a214 <xTaskRemoveFromEventList+0xc0>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d905      	bls.n	800a1f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <xTaskRemoveFromEventList+0xc4>)
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	e001      	b.n	800a1fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1fa:	697b      	ldr	r3, [r7, #20]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3718      	adds	r7, #24
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	24000d1c 	.word	0x24000d1c
 800a208:	24000cfc 	.word	0x24000cfc
 800a20c:	24000824 	.word	0x24000824
 800a210:	24000cb4 	.word	0x24000cb4
 800a214:	24000820 	.word	0x24000820
 800a218:	24000d08 	.word	0x24000d08

0800a21c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800a226:	4b2a      	ldr	r3, [pc, #168]	@ (800a2d0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10b      	bne.n	800a246 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	613b      	str	r3, [r7, #16]
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	e7fd      	b.n	800a242 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10b      	bne.n	800a274 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	60fb      	str	r3, [r7, #12]
}
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
 800a272:	e7fd      	b.n	800a270 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7fe fb39 	bl	80088ec <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe fb34 	bl	80088ec <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a288:	4b12      	ldr	r3, [pc, #72]	@ (800a2d4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d903      	bls.n	800a298 <vTaskRemoveFromUnorderedEventList+0x7c>
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a294:	4a0f      	ldr	r2, [pc, #60]	@ (800a2d4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a29c:	4613      	mov	r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a2d8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a2a6:	441a      	add	r2, r3
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	f7fe fabf 	bl	8008832 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b8:	4b08      	ldr	r3, [pc, #32]	@ (800a2dc <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d902      	bls.n	800a2c8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800a2c2:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]
	}
}
 800a2c8:	bf00      	nop
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	24000d1c 	.word	0x24000d1c
 800a2d4:	24000cfc 	.word	0x24000cfc
 800a2d8:	24000824 	.word	0x24000824
 800a2dc:	24000820 	.word	0x24000820
 800a2e0:	24000d08 	.word	0x24000d08

0800a2e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a2ec:	4b06      	ldr	r3, [pc, #24]	@ (800a308 <vTaskInternalSetTimeOutState+0x24>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a2f4:	4b05      	ldr	r3, [pc, #20]	@ (800a30c <vTaskInternalSetTimeOutState+0x28>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	605a      	str	r2, [r3, #4]
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	24000d0c 	.word	0x24000d0c
 800a30c:	24000cf8 	.word	0x24000cf8

0800a310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b088      	sub	sp, #32
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	613b      	str	r3, [r7, #16]
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10b      	bne.n	800a356 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	e7fd      	b.n	800a352 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a356:	f000 ffd7 	bl	800b308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a35a:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d0 <xTaskCheckForTimeOut+0xc0>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d102      	bne.n	800a37a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a374:	2300      	movs	r3, #0
 800a376:	61fb      	str	r3, [r7, #28]
 800a378:	e023      	b.n	800a3c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	4b15      	ldr	r3, [pc, #84]	@ (800a3d4 <xTaskCheckForTimeOut+0xc4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d007      	beq.n	800a396 <xTaskCheckForTimeOut+0x86>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d302      	bcc.n	800a396 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a390:	2301      	movs	r3, #1
 800a392:	61fb      	str	r3, [r7, #28]
 800a394:	e015      	b.n	800a3c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d20b      	bcs.n	800a3b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	1ad2      	subs	r2, r2, r3
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff ff99 	bl	800a2e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	61fb      	str	r3, [r7, #28]
 800a3b6:	e004      	b.n	800a3c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a3c2:	f000 ffd3 	bl	800b36c <vPortExitCritical>

	return xReturn;
 800a3c6:	69fb      	ldr	r3, [r7, #28]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3720      	adds	r7, #32
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	24000cf8 	.word	0x24000cf8
 800a3d4:	24000d0c 	.word	0x24000d0c

0800a3d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a3dc:	4b03      	ldr	r3, [pc, #12]	@ (800a3ec <vTaskMissedYield+0x14>)
 800a3de:	2201      	movs	r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]
}
 800a3e2:	bf00      	nop
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	24000d08 	.word	0x24000d08

0800a3f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a3f8:	f000 f852 	bl	800a4a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3fc:	4b06      	ldr	r3, [pc, #24]	@ (800a418 <prvIdleTask+0x28>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d9f9      	bls.n	800a3f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a404:	4b05      	ldr	r3, [pc, #20]	@ (800a41c <prvIdleTask+0x2c>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a414:	e7f0      	b.n	800a3f8 <prvIdleTask+0x8>
 800a416:	bf00      	nop
 800a418:	24000824 	.word	0x24000824
 800a41c:	e000ed04 	.word	0xe000ed04

0800a420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a426:	2300      	movs	r3, #0
 800a428:	607b      	str	r3, [r7, #4]
 800a42a:	e00c      	b.n	800a446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4a12      	ldr	r2, [pc, #72]	@ (800a480 <prvInitialiseTaskLists+0x60>)
 800a438:	4413      	add	r3, r2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe f9cc 	bl	80087d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3301      	adds	r3, #1
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b37      	cmp	r3, #55	@ 0x37
 800a44a:	d9ef      	bls.n	800a42c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a44c:	480d      	ldr	r0, [pc, #52]	@ (800a484 <prvInitialiseTaskLists+0x64>)
 800a44e:	f7fe f9c3 	bl	80087d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a452:	480d      	ldr	r0, [pc, #52]	@ (800a488 <prvInitialiseTaskLists+0x68>)
 800a454:	f7fe f9c0 	bl	80087d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a458:	480c      	ldr	r0, [pc, #48]	@ (800a48c <prvInitialiseTaskLists+0x6c>)
 800a45a:	f7fe f9bd 	bl	80087d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a45e:	480c      	ldr	r0, [pc, #48]	@ (800a490 <prvInitialiseTaskLists+0x70>)
 800a460:	f7fe f9ba 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a464:	480b      	ldr	r0, [pc, #44]	@ (800a494 <prvInitialiseTaskLists+0x74>)
 800a466:	f7fe f9b7 	bl	80087d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a46a:	4b0b      	ldr	r3, [pc, #44]	@ (800a498 <prvInitialiseTaskLists+0x78>)
 800a46c:	4a05      	ldr	r2, [pc, #20]	@ (800a484 <prvInitialiseTaskLists+0x64>)
 800a46e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a470:	4b0a      	ldr	r3, [pc, #40]	@ (800a49c <prvInitialiseTaskLists+0x7c>)
 800a472:	4a05      	ldr	r2, [pc, #20]	@ (800a488 <prvInitialiseTaskLists+0x68>)
 800a474:	601a      	str	r2, [r3, #0]
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	24000824 	.word	0x24000824
 800a484:	24000c84 	.word	0x24000c84
 800a488:	24000c98 	.word	0x24000c98
 800a48c:	24000cb4 	.word	0x24000cb4
 800a490:	24000cc8 	.word	0x24000cc8
 800a494:	24000ce0 	.word	0x24000ce0
 800a498:	24000cac 	.word	0x24000cac
 800a49c:	24000cb0 	.word	0x24000cb0

0800a4a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4a6:	e019      	b.n	800a4dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a4a8:	f000 ff2e 	bl	800b308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ac:	4b10      	ldr	r3, [pc, #64]	@ (800a4f0 <prvCheckTasksWaitingTermination+0x50>)
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fa17 	bl	80088ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a4be:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f4 <prvCheckTasksWaitingTermination+0x54>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a4f4 <prvCheckTasksWaitingTermination+0x54>)
 800a4c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a4f8 <prvCheckTasksWaitingTermination+0x58>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a4f8 <prvCheckTasksWaitingTermination+0x58>)
 800a4d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a4d2:	f000 ff4b 	bl	800b36c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f810 	bl	800a4fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a4dc:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <prvCheckTasksWaitingTermination+0x58>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1e1      	bne.n	800a4a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	24000cc8 	.word	0x24000cc8
 800a4f4:	24000cf4 	.word	0x24000cf4
 800a4f8:	24000cdc 	.word	0x24000cdc

0800a4fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d108      	bne.n	800a520 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a512:	4618      	mov	r0, r3
 800a514:	f001 f8e8 	bl	800b6e8 <vPortFree>
				vPortFree( pxTCB );
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 f8e5 	bl	800b6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a51e:	e019      	b.n	800a554 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a526:	2b01      	cmp	r3, #1
 800a528:	d103      	bne.n	800a532 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f001 f8dc 	bl	800b6e8 <vPortFree>
	}
 800a530:	e010      	b.n	800a554 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d00b      	beq.n	800a554 <prvDeleteTCB+0x58>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	60fb      	str	r3, [r7, #12]
}
 800a54e:	bf00      	nop
 800a550:	bf00      	nop
 800a552:	e7fd      	b.n	800a550 <prvDeleteTCB+0x54>
	}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a562:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <prvResetNextTaskUnblockTime+0x38>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d104      	bne.n	800a576 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <prvResetNextTaskUnblockTime+0x3c>)
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295
 800a572:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a574:	e008      	b.n	800a588 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a576:	4b07      	ldr	r3, [pc, #28]	@ (800a594 <prvResetNextTaskUnblockTime+0x38>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	4a04      	ldr	r2, [pc, #16]	@ (800a598 <prvResetNextTaskUnblockTime+0x3c>)
 800a586:	6013      	str	r3, [r2, #0]
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	24000cac 	.word	0x24000cac
 800a598:	24000d14 	.word	0x24000d14

0800a59c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a5a2:	4b05      	ldr	r3, [pc, #20]	@ (800a5b8 <xTaskGetCurrentTaskHandle+0x1c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a5a8:	687b      	ldr	r3, [r7, #4]
	}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	24000820 	.word	0x24000820

0800a5bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f0 <xTaskGetSchedulerState+0x34>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	607b      	str	r3, [r7, #4]
 800a5ce:	e008      	b.n	800a5e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5d0:	4b08      	ldr	r3, [pc, #32]	@ (800a5f4 <xTaskGetSchedulerState+0x38>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5d8:	2302      	movs	r3, #2
 800a5da:	607b      	str	r3, [r7, #4]
 800a5dc:	e001      	b.n	800a5e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5e2:	687b      	ldr	r3, [r7, #4]
	}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	24000d00 	.word	0x24000d00
 800a5f4:	24000d1c 	.word	0x24000d1c

0800a5f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a604:	2300      	movs	r3, #0
 800a606:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d051      	beq.n	800a6b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a612:	4b2a      	ldr	r3, [pc, #168]	@ (800a6bc <xTaskPriorityInherit+0xc4>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a618:	429a      	cmp	r2, r3
 800a61a:	d241      	bcs.n	800a6a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	2b00      	cmp	r3, #0
 800a622:	db06      	blt.n	800a632 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a624:	4b25      	ldr	r3, [pc, #148]	@ (800a6bc <xTaskPriorityInherit+0xc4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	6959      	ldr	r1, [r3, #20]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a63a:	4613      	mov	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4a1f      	ldr	r2, [pc, #124]	@ (800a6c0 <xTaskPriorityInherit+0xc8>)
 800a644:	4413      	add	r3, r2
 800a646:	4299      	cmp	r1, r3
 800a648:	d122      	bne.n	800a690 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe f94c 	bl	80088ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a654:	4b19      	ldr	r3, [pc, #100]	@ (800a6bc <xTaskPriorityInherit+0xc4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a662:	4b18      	ldr	r3, [pc, #96]	@ (800a6c4 <xTaskPriorityInherit+0xcc>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	429a      	cmp	r2, r3
 800a668:	d903      	bls.n	800a672 <xTaskPriorityInherit+0x7a>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66e:	4a15      	ldr	r2, [pc, #84]	@ (800a6c4 <xTaskPriorityInherit+0xcc>)
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a676:	4613      	mov	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4a10      	ldr	r2, [pc, #64]	@ (800a6c0 <xTaskPriorityInherit+0xc8>)
 800a680:	441a      	add	r2, r3
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	3304      	adds	r3, #4
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7fe f8d2 	bl	8008832 <vListInsertEnd>
 800a68e:	e004      	b.n	800a69a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a690:	4b0a      	ldr	r3, [pc, #40]	@ (800a6bc <xTaskPriorityInherit+0xc4>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a69a:	2301      	movs	r3, #1
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	e008      	b.n	800a6b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6a4:	4b05      	ldr	r3, [pc, #20]	@ (800a6bc <xTaskPriorityInherit+0xc4>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d201      	bcs.n	800a6b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
	}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	24000820 	.word	0x24000820
 800a6c0:	24000824 	.word	0x24000824
 800a6c4:	24000cfc 	.word	0x24000cfc

0800a6c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d058      	beq.n	800a790 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6de:	4b2f      	ldr	r3, [pc, #188]	@ (800a79c <xTaskPriorityDisinherit+0xd4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d00b      	beq.n	800a700 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10b      	bne.n	800a720 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70c:	f383 8811 	msr	BASEPRI, r3
 800a710:	f3bf 8f6f 	isb	sy
 800a714:	f3bf 8f4f 	dsb	sy
 800a718:	60bb      	str	r3, [r7, #8]
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	e7fd      	b.n	800a71c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a724:	1e5a      	subs	r2, r3, #1
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a732:	429a      	cmp	r2, r3
 800a734:	d02c      	beq.n	800a790 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d128      	bne.n	800a790 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	3304      	adds	r3, #4
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe f8d2 	bl	80088ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a754:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a760:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a0 <xTaskPriorityDisinherit+0xd8>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	429a      	cmp	r2, r3
 800a766:	d903      	bls.n	800a770 <xTaskPriorityDisinherit+0xa8>
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a76c:	4a0c      	ldr	r2, [pc, #48]	@ (800a7a0 <xTaskPriorityDisinherit+0xd8>)
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4a09      	ldr	r2, [pc, #36]	@ (800a7a4 <xTaskPriorityDisinherit+0xdc>)
 800a77e:	441a      	add	r2, r3
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	3304      	adds	r3, #4
 800a784:	4619      	mov	r1, r3
 800a786:	4610      	mov	r0, r2
 800a788:	f7fe f853 	bl	8008832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a78c:	2301      	movs	r3, #1
 800a78e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a790:	697b      	ldr	r3, [r7, #20]
	}
 800a792:	4618      	mov	r0, r3
 800a794:	3718      	adds	r7, #24
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	24000820 	.word	0x24000820
 800a7a0:	24000cfc 	.word	0x24000cfc
 800a7a4:	24000824 	.word	0x24000824

0800a7a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d06c      	beq.n	800a89a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10b      	bne.n	800a7e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	60fb      	str	r3, [r7, #12]
}
 800a7da:	bf00      	nop
 800a7dc:	bf00      	nop
 800a7de:	e7fd      	b.n	800a7dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d902      	bls.n	800a7f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	61fb      	str	r3, [r7, #28]
 800a7ee:	e002      	b.n	800a7f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fa:	69fa      	ldr	r2, [r7, #28]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d04c      	beq.n	800a89a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d147      	bne.n	800a89a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a80a:	4b26      	ldr	r3, [pc, #152]	@ (800a8a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	429a      	cmp	r2, r3
 800a812:	d10b      	bne.n	800a82c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	60bb      	str	r3, [r7, #8]
}
 800a826:	bf00      	nop
 800a828:	bf00      	nop
 800a82a:	e7fd      	b.n	800a828 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a830:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	69fa      	ldr	r2, [r7, #28]
 800a836:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	db04      	blt.n	800a84a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	6959      	ldr	r1, [r3, #20]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	4613      	mov	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4413      	add	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4a13      	ldr	r2, [pc, #76]	@ (800a8a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a85a:	4413      	add	r3, r2
 800a85c:	4299      	cmp	r1, r3
 800a85e:	d11c      	bne.n	800a89a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	3304      	adds	r3, #4
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe f841 	bl	80088ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a86e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d903      	bls.n	800a87e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87a:	4a0c      	ldr	r2, [pc, #48]	@ (800a8ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4a07      	ldr	r2, [pc, #28]	@ (800a8a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a88c:	441a      	add	r2, r3
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	3304      	adds	r3, #4
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f7fd ffcc 	bl	8008832 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a89a:	bf00      	nop
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	24000820 	.word	0x24000820
 800a8a8:	24000824 	.word	0x24000824
 800a8ac:	24000cfc 	.word	0x24000cfc

0800a8b0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a8b6:	4b09      	ldr	r3, [pc, #36]	@ (800a8dc <uxTaskResetEventItemValue+0x2c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8be:	4b07      	ldr	r3, [pc, #28]	@ (800a8dc <uxTaskResetEventItemValue+0x2c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c4:	4b05      	ldr	r3, [pc, #20]	@ (800a8dc <uxTaskResetEventItemValue+0x2c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800a8cc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800a8ce:	687b      	ldr	r3, [r7, #4]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	24000820 	.word	0x24000820

0800a8e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a8e4:	4b07      	ldr	r3, [pc, #28]	@ (800a904 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d004      	beq.n	800a8f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a8ec:	4b05      	ldr	r3, [pc, #20]	@ (800a904 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8f2:	3201      	adds	r2, #1
 800a8f4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a8f6:	4b03      	ldr	r3, [pc, #12]	@ (800a904 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
	}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	24000820 	.word	0x24000820

0800a908 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a912:	4b21      	ldr	r3, [pc, #132]	@ (800a998 <prvAddCurrentTaskToDelayedList+0x90>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a918:	4b20      	ldr	r3, [pc, #128]	@ (800a99c <prvAddCurrentTaskToDelayedList+0x94>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fd ffe4 	bl	80088ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92a:	d10a      	bne.n	800a942 <prvAddCurrentTaskToDelayedList+0x3a>
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d007      	beq.n	800a942 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a932:	4b1a      	ldr	r3, [pc, #104]	@ (800a99c <prvAddCurrentTaskToDelayedList+0x94>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3304      	adds	r3, #4
 800a938:	4619      	mov	r1, r3
 800a93a:	4819      	ldr	r0, [pc, #100]	@ (800a9a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a93c:	f7fd ff79 	bl	8008832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a940:	e026      	b.n	800a990 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4413      	add	r3, r2
 800a948:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a94a:	4b14      	ldr	r3, [pc, #80]	@ (800a99c <prvAddCurrentTaskToDelayedList+0x94>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68ba      	ldr	r2, [r7, #8]
 800a950:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	429a      	cmp	r2, r3
 800a958:	d209      	bcs.n	800a96e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a95a:	4b12      	ldr	r3, [pc, #72]	@ (800a9a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	4b0f      	ldr	r3, [pc, #60]	@ (800a99c <prvAddCurrentTaskToDelayedList+0x94>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3304      	adds	r3, #4
 800a964:	4619      	mov	r1, r3
 800a966:	4610      	mov	r0, r2
 800a968:	f7fd ff87 	bl	800887a <vListInsert>
}
 800a96c:	e010      	b.n	800a990 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a96e:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	4b0a      	ldr	r3, [pc, #40]	@ (800a99c <prvAddCurrentTaskToDelayedList+0x94>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3304      	adds	r3, #4
 800a978:	4619      	mov	r1, r3
 800a97a:	4610      	mov	r0, r2
 800a97c:	f7fd ff7d 	bl	800887a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a980:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	429a      	cmp	r2, r3
 800a988:	d202      	bcs.n	800a990 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a98a:	4a08      	ldr	r2, [pc, #32]	@ (800a9ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	6013      	str	r3, [r2, #0]
}
 800a990:	bf00      	nop
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	24000cf8 	.word	0x24000cf8
 800a99c:	24000820 	.word	0x24000820
 800a9a0:	24000ce0 	.word	0x24000ce0
 800a9a4:	24000cb0 	.word	0x24000cb0
 800a9a8:	24000cac 	.word	0x24000cac
 800a9ac:	24000d14 	.word	0x24000d14

0800a9b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08a      	sub	sp, #40	@ 0x28
 800a9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9ba:	f000 fb13 	bl	800afe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9be:	4b1d      	ldr	r3, [pc, #116]	@ (800aa34 <xTimerCreateTimerTask+0x84>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d021      	beq.n	800aa0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9ce:	1d3a      	adds	r2, r7, #4
 800a9d0:	f107 0108 	add.w	r1, r7, #8
 800a9d4:	f107 030c 	add.w	r3, r7, #12
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fd fced 	bl	80083b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9de:	6879      	ldr	r1, [r7, #4]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	9202      	str	r2, [sp, #8]
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	460a      	mov	r2, r1
 800a9f0:	4911      	ldr	r1, [pc, #68]	@ (800aa38 <xTimerCreateTimerTask+0x88>)
 800a9f2:	4812      	ldr	r0, [pc, #72]	@ (800aa3c <xTimerCreateTimerTask+0x8c>)
 800a9f4:	f7fe ff3c 	bl	8009870 <xTaskCreateStatic>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	4a11      	ldr	r2, [pc, #68]	@ (800aa40 <xTimerCreateTimerTask+0x90>)
 800a9fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9fe:	4b10      	ldr	r3, [pc, #64]	@ (800aa40 <xTimerCreateTimerTask+0x90>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa06:	2301      	movs	r3, #1
 800aa08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10b      	bne.n	800aa28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	613b      	str	r3, [r7, #16]
}
 800aa22:	bf00      	nop
 800aa24:	bf00      	nop
 800aa26:	e7fd      	b.n	800aa24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa28:	697b      	ldr	r3, [r7, #20]
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	24000d50 	.word	0x24000d50
 800aa38:	0800b9f0 	.word	0x0800b9f0
 800aa3c:	0800ab7d 	.word	0x0800ab7d
 800aa40:	24000d54 	.word	0x24000d54

0800aa44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08a      	sub	sp, #40	@ 0x28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa52:	2300      	movs	r3, #0
 800aa54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10b      	bne.n	800aa74 <xTimerGenericCommand+0x30>
	__asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	623b      	str	r3, [r7, #32]
}
 800aa6e:	bf00      	nop
 800aa70:	bf00      	nop
 800aa72:	e7fd      	b.n	800aa70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa74:	4b19      	ldr	r3, [pc, #100]	@ (800aadc <xTimerGenericCommand+0x98>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d02a      	beq.n	800aad2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b05      	cmp	r3, #5
 800aa8c:	dc18      	bgt.n	800aac0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa8e:	f7ff fd95 	bl	800a5bc <xTaskGetSchedulerState>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d109      	bne.n	800aaac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa98:	4b10      	ldr	r3, [pc, #64]	@ (800aadc <xTimerGenericCommand+0x98>)
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	f107 0110 	add.w	r1, r7, #16
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaa4:	f7fe f94a 	bl	8008d3c <xQueueGenericSend>
 800aaa8:	6278      	str	r0, [r7, #36]	@ 0x24
 800aaaa:	e012      	b.n	800aad2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aaac:	4b0b      	ldr	r3, [pc, #44]	@ (800aadc <xTimerGenericCommand+0x98>)
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	f107 0110 	add.w	r1, r7, #16
 800aab4:	2300      	movs	r3, #0
 800aab6:	2200      	movs	r2, #0
 800aab8:	f7fe f940 	bl	8008d3c <xQueueGenericSend>
 800aabc:	6278      	str	r0, [r7, #36]	@ 0x24
 800aabe:	e008      	b.n	800aad2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aac0:	4b06      	ldr	r3, [pc, #24]	@ (800aadc <xTimerGenericCommand+0x98>)
 800aac2:	6818      	ldr	r0, [r3, #0]
 800aac4:	f107 0110 	add.w	r1, r7, #16
 800aac8:	2300      	movs	r3, #0
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	f7fe fa38 	bl	8008f40 <xQueueGenericSendFromISR>
 800aad0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3728      	adds	r7, #40	@ 0x28
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	24000d50 	.word	0x24000d50

0800aae0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaea:	4b23      	ldr	r3, [pc, #140]	@ (800ab78 <prvProcessExpiredTimer+0x98>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fd fef7 	bl	80088ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d023      	beq.n	800ab54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	699a      	ldr	r2, [r3, #24]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	18d1      	adds	r1, r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	6978      	ldr	r0, [r7, #20]
 800ab1a:	f000 f8d5 	bl	800acc8 <prvInsertTimerInActiveList>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d020      	beq.n	800ab66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab24:	2300      	movs	r3, #0
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	6978      	ldr	r0, [r7, #20]
 800ab30:	f7ff ff88 	bl	800aa44 <xTimerGenericCommand>
 800ab34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d114      	bne.n	800ab66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	60fb      	str	r3, [r7, #12]
}
 800ab4e:	bf00      	nop
 800ab50:	bf00      	nop
 800ab52:	e7fd      	b.n	800ab50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab5a:	f023 0301 	bic.w	r3, r3, #1
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	6978      	ldr	r0, [r7, #20]
 800ab6c:	4798      	blx	r3
}
 800ab6e:	bf00      	nop
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	24000d48 	.word	0x24000d48

0800ab7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 f859 	bl	800ac40 <prvGetNextExpireTime>
 800ab8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	4619      	mov	r1, r3
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 f805 	bl	800aba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab9a:	f000 f8d7 	bl	800ad4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab9e:	bf00      	nop
 800aba0:	e7f0      	b.n	800ab84 <prvTimerTask+0x8>
	...

0800aba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800abae:	f7ff f86d 	bl	8009c8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abb2:	f107 0308 	add.w	r3, r7, #8
 800abb6:	4618      	mov	r0, r3
 800abb8:	f000 f866 	bl	800ac88 <prvSampleTimeNow>
 800abbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d130      	bne.n	800ac26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <prvProcessTimerOrBlockTask+0x3c>
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d806      	bhi.n	800abe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800abd2:	f7ff f869 	bl	8009ca8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff ff81 	bl	800aae0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abde:	e024      	b.n	800ac2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d008      	beq.n	800abf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abe6:	4b13      	ldr	r3, [pc, #76]	@ (800ac34 <prvProcessTimerOrBlockTask+0x90>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <prvProcessTimerOrBlockTask+0x50>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e000      	b.n	800abf6 <prvProcessTimerOrBlockTask+0x52>
 800abf4:	2300      	movs	r3, #0
 800abf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abf8:	4b0f      	ldr	r3, [pc, #60]	@ (800ac38 <prvProcessTimerOrBlockTask+0x94>)
 800abfa:	6818      	ldr	r0, [r3, #0]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	4619      	mov	r1, r3
 800ac06:	f7fe fdff 	bl	8009808 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac0a:	f7ff f84d 	bl	8009ca8 <xTaskResumeAll>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac14:	4b09      	ldr	r3, [pc, #36]	@ (800ac3c <prvProcessTimerOrBlockTask+0x98>)
 800ac16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	f3bf 8f6f 	isb	sy
}
 800ac24:	e001      	b.n	800ac2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac26:	f7ff f83f 	bl	8009ca8 <xTaskResumeAll>
}
 800ac2a:	bf00      	nop
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	24000d4c 	.word	0x24000d4c
 800ac38:	24000d50 	.word	0x24000d50
 800ac3c:	e000ed04 	.word	0xe000ed04

0800ac40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac48:	4b0e      	ldr	r3, [pc, #56]	@ (800ac84 <prvGetNextExpireTime+0x44>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d101      	bne.n	800ac56 <prvGetNextExpireTime+0x16>
 800ac52:	2201      	movs	r2, #1
 800ac54:	e000      	b.n	800ac58 <prvGetNextExpireTime+0x18>
 800ac56:	2200      	movs	r2, #0
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d105      	bne.n	800ac70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac64:	4b07      	ldr	r3, [pc, #28]	@ (800ac84 <prvGetNextExpireTime+0x44>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	e001      	b.n	800ac74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac74:	68fb      	ldr	r3, [r7, #12]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	24000d48 	.word	0x24000d48

0800ac88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac90:	f7ff f8a8 	bl	8009de4 <xTaskGetTickCount>
 800ac94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac96:	4b0b      	ldr	r3, [pc, #44]	@ (800acc4 <prvSampleTimeNow+0x3c>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d205      	bcs.n	800acac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aca0:	f000 f93a 	bl	800af18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	e002      	b.n	800acb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800acb2:	4a04      	ldr	r2, [pc, #16]	@ (800acc4 <prvSampleTimeNow+0x3c>)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800acb8:	68fb      	ldr	r3, [r7, #12]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	24000d58 	.word	0x24000d58

0800acc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acd6:	2300      	movs	r3, #0
 800acd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	429a      	cmp	r2, r3
 800acec:	d812      	bhi.n	800ad14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	1ad2      	subs	r2, r2, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d302      	bcc.n	800ad02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acfc:	2301      	movs	r3, #1
 800acfe:	617b      	str	r3, [r7, #20]
 800ad00:	e01b      	b.n	800ad3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad02:	4b10      	ldr	r3, [pc, #64]	@ (800ad44 <prvInsertTimerInActiveList+0x7c>)
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3304      	adds	r3, #4
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	f7fd fdb4 	bl	800887a <vListInsert>
 800ad12:	e012      	b.n	800ad3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d206      	bcs.n	800ad2a <prvInsertTimerInActiveList+0x62>
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d302      	bcc.n	800ad2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	617b      	str	r3, [r7, #20]
 800ad28:	e007      	b.n	800ad3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad2a:	4b07      	ldr	r3, [pc, #28]	@ (800ad48 <prvInsertTimerInActiveList+0x80>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4619      	mov	r1, r3
 800ad34:	4610      	mov	r0, r2
 800ad36:	f7fd fda0 	bl	800887a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad3a:	697b      	ldr	r3, [r7, #20]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	24000d4c 	.word	0x24000d4c
 800ad48:	24000d48 	.word	0x24000d48

0800ad4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08e      	sub	sp, #56	@ 0x38
 800ad50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad52:	e0ce      	b.n	800aef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	da19      	bge.n	800ad8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad5a:	1d3b      	adds	r3, r7, #4
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10b      	bne.n	800ad7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	61fb      	str	r3, [r7, #28]
}
 800ad78:	bf00      	nop
 800ad7a:	bf00      	nop
 800ad7c:	e7fd      	b.n	800ad7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad84:	6850      	ldr	r0, [r2, #4]
 800ad86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad88:	6892      	ldr	r2, [r2, #8]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f2c0 80ae 	blt.w	800aef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d004      	beq.n	800adac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ada2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada4:	3304      	adds	r3, #4
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fd fda0 	bl	80088ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adac:	463b      	mov	r3, r7
 800adae:	4618      	mov	r0, r3
 800adb0:	f7ff ff6a 	bl	800ac88 <prvSampleTimeNow>
 800adb4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b09      	cmp	r3, #9
 800adba:	f200 8097 	bhi.w	800aeec <prvProcessReceivedCommands+0x1a0>
 800adbe:	a201      	add	r2, pc, #4	@ (adr r2, 800adc4 <prvProcessReceivedCommands+0x78>)
 800adc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc4:	0800aded 	.word	0x0800aded
 800adc8:	0800aded 	.word	0x0800aded
 800adcc:	0800aded 	.word	0x0800aded
 800add0:	0800ae63 	.word	0x0800ae63
 800add4:	0800ae77 	.word	0x0800ae77
 800add8:	0800aec3 	.word	0x0800aec3
 800addc:	0800aded 	.word	0x0800aded
 800ade0:	0800aded 	.word	0x0800aded
 800ade4:	0800ae63 	.word	0x0800ae63
 800ade8:	0800ae77 	.word	0x0800ae77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800adec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adf2:	f043 0301 	orr.w	r3, r3, #1
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	18d1      	adds	r1, r2, r3
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae0c:	f7ff ff5c 	bl	800acc8 <prvInsertTimerInActiveList>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d06c      	beq.n	800aef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae24:	f003 0304 	and.w	r3, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d061      	beq.n	800aef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	441a      	add	r2, r3
 800ae34:	2300      	movs	r3, #0
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae3e:	f7ff fe01 	bl	800aa44 <xTimerGenericCommand>
 800ae42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d152      	bne.n	800aef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	61bb      	str	r3, [r7, #24]
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	e7fd      	b.n	800ae5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae68:	f023 0301 	bic.w	r3, r3, #1
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae74:	e03d      	b.n	800aef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae7c:	f043 0301 	orr.w	r3, r3, #1
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10b      	bne.n	800aeae <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ae96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae9a:	f383 8811 	msr	BASEPRI, r3
 800ae9e:	f3bf 8f6f 	isb	sy
 800aea2:	f3bf 8f4f 	dsb	sy
 800aea6:	617b      	str	r3, [r7, #20]
}
 800aea8:	bf00      	nop
 800aeaa:	bf00      	nop
 800aeac:	e7fd      	b.n	800aeaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb0:	699a      	ldr	r2, [r3, #24]
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb4:	18d1      	adds	r1, r2, r3
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aebc:	f7ff ff04 	bl	800acc8 <prvInsertTimerInActiveList>
					break;
 800aec0:	e017      	b.n	800aef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aec8:	f003 0302 	and.w	r3, r3, #2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d103      	bne.n	800aed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800aed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aed2:	f000 fc09 	bl	800b6e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aed6:	e00c      	b.n	800aef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aede:	f023 0301 	bic.w	r3, r3, #1
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aeea:	e002      	b.n	800aef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800aeec:	bf00      	nop
 800aeee:	e000      	b.n	800aef2 <prvProcessReceivedCommands+0x1a6>
					break;
 800aef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aef2:	4b08      	ldr	r3, [pc, #32]	@ (800af14 <prvProcessReceivedCommands+0x1c8>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	1d39      	adds	r1, r7, #4
 800aef8:	2200      	movs	r2, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fe f8be 	bl	800907c <xQueueReceive>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	f47f af26 	bne.w	800ad54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af08:	bf00      	nop
 800af0a:	bf00      	nop
 800af0c:	3730      	adds	r7, #48	@ 0x30
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	24000d50 	.word	0x24000d50

0800af18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af1e:	e049      	b.n	800afb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af20:	4b2e      	ldr	r3, [pc, #184]	@ (800afdc <prvSwitchTimerLists+0xc4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af2a:	4b2c      	ldr	r3, [pc, #176]	@ (800afdc <prvSwitchTimerLists+0xc4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3304      	adds	r3, #4
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fd fcd7 	bl	80088ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af4c:	f003 0304 	and.w	r3, r3, #4
 800af50:	2b00      	cmp	r3, #0
 800af52:	d02f      	beq.n	800afb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	699b      	ldr	r3, [r3, #24]
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4413      	add	r3, r2
 800af5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	429a      	cmp	r2, r3
 800af64:	d90e      	bls.n	800af84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af72:	4b1a      	ldr	r3, [pc, #104]	@ (800afdc <prvSwitchTimerLists+0xc4>)
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3304      	adds	r3, #4
 800af7a:	4619      	mov	r1, r3
 800af7c:	4610      	mov	r0, r2
 800af7e:	f7fd fc7c 	bl	800887a <vListInsert>
 800af82:	e017      	b.n	800afb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af84:	2300      	movs	r3, #0
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	2300      	movs	r3, #0
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	2100      	movs	r1, #0
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff fd58 	bl	800aa44 <xTimerGenericCommand>
 800af94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10b      	bne.n	800afb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	603b      	str	r3, [r7, #0]
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	e7fd      	b.n	800afb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afb4:	4b09      	ldr	r3, [pc, #36]	@ (800afdc <prvSwitchTimerLists+0xc4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1b0      	bne.n	800af20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800afbe:	4b07      	ldr	r3, [pc, #28]	@ (800afdc <prvSwitchTimerLists+0xc4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800afc4:	4b06      	ldr	r3, [pc, #24]	@ (800afe0 <prvSwitchTimerLists+0xc8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a04      	ldr	r2, [pc, #16]	@ (800afdc <prvSwitchTimerLists+0xc4>)
 800afca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800afcc:	4a04      	ldr	r2, [pc, #16]	@ (800afe0 <prvSwitchTimerLists+0xc8>)
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	6013      	str	r3, [r2, #0]
}
 800afd2:	bf00      	nop
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	24000d48 	.word	0x24000d48
 800afe0:	24000d4c 	.word	0x24000d4c

0800afe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800afea:	f000 f98d 	bl	800b308 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afee:	4b15      	ldr	r3, [pc, #84]	@ (800b044 <prvCheckForValidListAndQueue+0x60>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d120      	bne.n	800b038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aff6:	4814      	ldr	r0, [pc, #80]	@ (800b048 <prvCheckForValidListAndQueue+0x64>)
 800aff8:	f7fd fbee 	bl	80087d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800affc:	4813      	ldr	r0, [pc, #76]	@ (800b04c <prvCheckForValidListAndQueue+0x68>)
 800affe:	f7fd fbeb 	bl	80087d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b002:	4b13      	ldr	r3, [pc, #76]	@ (800b050 <prvCheckForValidListAndQueue+0x6c>)
 800b004:	4a10      	ldr	r2, [pc, #64]	@ (800b048 <prvCheckForValidListAndQueue+0x64>)
 800b006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b008:	4b12      	ldr	r3, [pc, #72]	@ (800b054 <prvCheckForValidListAndQueue+0x70>)
 800b00a:	4a10      	ldr	r2, [pc, #64]	@ (800b04c <prvCheckForValidListAndQueue+0x68>)
 800b00c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b00e:	2300      	movs	r3, #0
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	4b11      	ldr	r3, [pc, #68]	@ (800b058 <prvCheckForValidListAndQueue+0x74>)
 800b014:	4a11      	ldr	r2, [pc, #68]	@ (800b05c <prvCheckForValidListAndQueue+0x78>)
 800b016:	2110      	movs	r1, #16
 800b018:	200a      	movs	r0, #10
 800b01a:	f7fd fcfb 	bl	8008a14 <xQueueGenericCreateStatic>
 800b01e:	4603      	mov	r3, r0
 800b020:	4a08      	ldr	r2, [pc, #32]	@ (800b044 <prvCheckForValidListAndQueue+0x60>)
 800b022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b024:	4b07      	ldr	r3, [pc, #28]	@ (800b044 <prvCheckForValidListAndQueue+0x60>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d005      	beq.n	800b038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b02c:	4b05      	ldr	r3, [pc, #20]	@ (800b044 <prvCheckForValidListAndQueue+0x60>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	490b      	ldr	r1, [pc, #44]	@ (800b060 <prvCheckForValidListAndQueue+0x7c>)
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fbbe 	bl	80097b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b038:	f000 f998 	bl	800b36c <vPortExitCritical>
}
 800b03c:	bf00      	nop
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	24000d50 	.word	0x24000d50
 800b048:	24000d20 	.word	0x24000d20
 800b04c:	24000d34 	.word	0x24000d34
 800b050:	24000d48 	.word	0x24000d48
 800b054:	24000d4c 	.word	0x24000d4c
 800b058:	24000dfc 	.word	0x24000dfc
 800b05c:	24000d5c 	.word	0x24000d5c
 800b060:	0800b9f8 	.word	0x0800b9f8

0800b064 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08a      	sub	sp, #40	@ 0x28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800b072:	f06f 0301 	mvn.w	r3, #1
 800b076:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b084:	4b06      	ldr	r3, [pc, #24]	@ (800b0a0 <xTimerPendFunctionCallFromISR+0x3c>)
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	f107 0114 	add.w	r1, r7, #20
 800b08c:	2300      	movs	r3, #0
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	f7fd ff56 	bl	8008f40 <xQueueGenericSendFromISR>
 800b094:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800b096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b098:	4618      	mov	r0, r3
 800b09a:	3728      	adds	r7, #40	@ 0x28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	24000d50 	.word	0x24000d50

0800b0a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3b04      	subs	r3, #4
 800b0b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3b04      	subs	r3, #4
 800b0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f023 0201 	bic.w	r2, r3, #1
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3b04      	subs	r3, #4
 800b0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0d4:	4a0c      	ldr	r2, [pc, #48]	@ (800b108 <pxPortInitialiseStack+0x64>)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3b14      	subs	r3, #20
 800b0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f06f 0202 	mvn.w	r2, #2
 800b0f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3b20      	subs	r3, #32
 800b0f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	0800b10d 	.word	0x0800b10d

0800b10c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b116:	4b13      	ldr	r3, [pc, #76]	@ (800b164 <prvTaskExitError+0x58>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11e:	d00b      	beq.n	800b138 <prvTaskExitError+0x2c>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	60fb      	str	r3, [r7, #12]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <prvTaskExitError+0x28>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	60bb      	str	r3, [r7, #8]
}
 800b14a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b14c:	bf00      	nop
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d0fc      	beq.n	800b14e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	24000028 	.word	0x24000028
	...

0800b170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b170:	4b07      	ldr	r3, [pc, #28]	@ (800b190 <pxCurrentTCBConst2>)
 800b172:	6819      	ldr	r1, [r3, #0]
 800b174:	6808      	ldr	r0, [r1, #0]
 800b176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17a:	f380 8809 	msr	PSP, r0
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f04f 0000 	mov.w	r0, #0
 800b186:	f380 8811 	msr	BASEPRI, r0
 800b18a:	4770      	bx	lr
 800b18c:	f3af 8000 	nop.w

0800b190 <pxCurrentTCBConst2>:
 800b190:	24000820 	.word	0x24000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop

0800b198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b198:	4808      	ldr	r0, [pc, #32]	@ (800b1bc <prvPortStartFirstTask+0x24>)
 800b19a:	6800      	ldr	r0, [r0, #0]
 800b19c:	6800      	ldr	r0, [r0, #0]
 800b19e:	f380 8808 	msr	MSP, r0
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8814 	msr	CONTROL, r0
 800b1aa:	b662      	cpsie	i
 800b1ac:	b661      	cpsie	f
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	df00      	svc	0
 800b1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ba:	bf00      	nop
 800b1bc:	e000ed08 	.word	0xe000ed08

0800b1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1c6:	4b47      	ldr	r3, [pc, #284]	@ (800b2e4 <xPortStartScheduler+0x124>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a47      	ldr	r2, [pc, #284]	@ (800b2e8 <xPortStartScheduler+0x128>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d10b      	bne.n	800b1e8 <xPortStartScheduler+0x28>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	bf00      	nop
 800b1e6:	e7fd      	b.n	800b1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1e8:	4b3e      	ldr	r3, [pc, #248]	@ (800b2e4 <xPortStartScheduler+0x124>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a3f      	ldr	r2, [pc, #252]	@ (800b2ec <xPortStartScheduler+0x12c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d10b      	bne.n	800b20a <xPortStartScheduler+0x4a>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	613b      	str	r3, [r7, #16]
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	e7fd      	b.n	800b206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b20a:	4b39      	ldr	r3, [pc, #228]	@ (800b2f0 <xPortStartScheduler+0x130>)
 800b20c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	b2db      	uxtb	r3, r3
 800b214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	22ff      	movs	r2, #255	@ 0xff
 800b21a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	b2db      	uxtb	r3, r3
 800b222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b224:	78fb      	ldrb	r3, [r7, #3]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b22c:	b2da      	uxtb	r2, r3
 800b22e:	4b31      	ldr	r3, [pc, #196]	@ (800b2f4 <xPortStartScheduler+0x134>)
 800b230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b232:	4b31      	ldr	r3, [pc, #196]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b234:	2207      	movs	r2, #7
 800b236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b238:	e009      	b.n	800b24e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b23a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3b01      	subs	r3, #1
 800b240:	4a2d      	ldr	r2, [pc, #180]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	b2db      	uxtb	r3, r3
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b24e:	78fb      	ldrb	r3, [r7, #3]
 800b250:	b2db      	uxtb	r3, r3
 800b252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b256:	2b80      	cmp	r3, #128	@ 0x80
 800b258:	d0ef      	beq.n	800b23a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b25a:	4b27      	ldr	r3, [pc, #156]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f1c3 0307 	rsb	r3, r3, #7
 800b262:	2b04      	cmp	r3, #4
 800b264:	d00b      	beq.n	800b27e <xPortStartScheduler+0xbe>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	60bb      	str	r3, [r7, #8]
}
 800b278:	bf00      	nop
 800b27a:	bf00      	nop
 800b27c:	e7fd      	b.n	800b27a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b27e:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	4a1c      	ldr	r2, [pc, #112]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b288:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b290:	4a19      	ldr	r2, [pc, #100]	@ (800b2f8 <xPortStartScheduler+0x138>)
 800b292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	b2da      	uxtb	r2, r3
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b29c:	4b17      	ldr	r3, [pc, #92]	@ (800b2fc <xPortStartScheduler+0x13c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a16      	ldr	r2, [pc, #88]	@ (800b2fc <xPortStartScheduler+0x13c>)
 800b2a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b2a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2a8:	4b14      	ldr	r3, [pc, #80]	@ (800b2fc <xPortStartScheduler+0x13c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a13      	ldr	r2, [pc, #76]	@ (800b2fc <xPortStartScheduler+0x13c>)
 800b2ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b2b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2b4:	f000 f8da 	bl	800b46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2b8:	4b11      	ldr	r3, [pc, #68]	@ (800b300 <xPortStartScheduler+0x140>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2be:	f000 f8f9 	bl	800b4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2c2:	4b10      	ldr	r3, [pc, #64]	@ (800b304 <xPortStartScheduler+0x144>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b304 <xPortStartScheduler+0x144>)
 800b2c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b2cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2ce:	f7ff ff63 	bl	800b198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2d2:	f7fe fe51 	bl	8009f78 <vTaskSwitchContext>
	prvTaskExitError();
 800b2d6:	f7ff ff19 	bl	800b10c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	e000ed00 	.word	0xe000ed00
 800b2e8:	410fc271 	.word	0x410fc271
 800b2ec:	410fc270 	.word	0x410fc270
 800b2f0:	e000e400 	.word	0xe000e400
 800b2f4:	24000e4c 	.word	0x24000e4c
 800b2f8:	24000e50 	.word	0x24000e50
 800b2fc:	e000ed20 	.word	0xe000ed20
 800b300:	24000028 	.word	0x24000028
 800b304:	e000ef34 	.word	0xe000ef34

0800b308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	607b      	str	r3, [r7, #4]
}
 800b320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b322:	4b10      	ldr	r3, [pc, #64]	@ (800b364 <vPortEnterCritical+0x5c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3301      	adds	r3, #1
 800b328:	4a0e      	ldr	r2, [pc, #56]	@ (800b364 <vPortEnterCritical+0x5c>)
 800b32a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b32c:	4b0d      	ldr	r3, [pc, #52]	@ (800b364 <vPortEnterCritical+0x5c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d110      	bne.n	800b356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b334:	4b0c      	ldr	r3, [pc, #48]	@ (800b368 <vPortEnterCritical+0x60>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00b      	beq.n	800b356 <vPortEnterCritical+0x4e>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	603b      	str	r3, [r7, #0]
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	e7fd      	b.n	800b352 <vPortEnterCritical+0x4a>
	}
}
 800b356:	bf00      	nop
 800b358:	370c      	adds	r7, #12
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	24000028 	.word	0x24000028
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b372:	4b12      	ldr	r3, [pc, #72]	@ (800b3bc <vPortExitCritical+0x50>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10b      	bne.n	800b392 <vPortExitCritical+0x26>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	607b      	str	r3, [r7, #4]
}
 800b38c:	bf00      	nop
 800b38e:	bf00      	nop
 800b390:	e7fd      	b.n	800b38e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b392:	4b0a      	ldr	r3, [pc, #40]	@ (800b3bc <vPortExitCritical+0x50>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	3b01      	subs	r3, #1
 800b398:	4a08      	ldr	r2, [pc, #32]	@ (800b3bc <vPortExitCritical+0x50>)
 800b39a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b39c:	4b07      	ldr	r3, [pc, #28]	@ (800b3bc <vPortExitCritical+0x50>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d105      	bne.n	800b3b0 <vPortExitCritical+0x44>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	f383 8811 	msr	BASEPRI, r3
}
 800b3ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	24000028 	.word	0x24000028

0800b3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3c0:	f3ef 8009 	mrs	r0, PSP
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	4b15      	ldr	r3, [pc, #84]	@ (800b420 <pxCurrentTCBConst>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	f01e 0f10 	tst.w	lr, #16
 800b3d0:	bf08      	it	eq
 800b3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3da:	6010      	str	r0, [r2, #0]
 800b3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b3e4:	f380 8811 	msr	BASEPRI, r0
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f7fe fdc2 	bl	8009f78 <vTaskSwitchContext>
 800b3f4:	f04f 0000 	mov.w	r0, #0
 800b3f8:	f380 8811 	msr	BASEPRI, r0
 800b3fc:	bc09      	pop	{r0, r3}
 800b3fe:	6819      	ldr	r1, [r3, #0]
 800b400:	6808      	ldr	r0, [r1, #0]
 800b402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b406:	f01e 0f10 	tst.w	lr, #16
 800b40a:	bf08      	it	eq
 800b40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b410:	f380 8809 	msr	PSP, r0
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	f3af 8000 	nop.w

0800b420 <pxCurrentTCBConst>:
 800b420:	24000820 	.word	0x24000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop

0800b428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	607b      	str	r3, [r7, #4]
}
 800b440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b442:	f7fe fcdf 	bl	8009e04 <xTaskIncrementTick>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d003      	beq.n	800b454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b44c:	4b06      	ldr	r3, [pc, #24]	@ (800b468 <xPortSysTickHandler+0x40>)
 800b44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	2300      	movs	r3, #0
 800b456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	f383 8811 	msr	BASEPRI, r3
}
 800b45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b470:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a0 <vPortSetupTimerInterrupt+0x34>)
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b476:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a4 <vPortSetupTimerInterrupt+0x38>)
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b47c:	4b0a      	ldr	r3, [pc, #40]	@ (800b4a8 <vPortSetupTimerInterrupt+0x3c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a0a      	ldr	r2, [pc, #40]	@ (800b4ac <vPortSetupTimerInterrupt+0x40>)
 800b482:	fba2 2303 	umull	r2, r3, r2, r3
 800b486:	099b      	lsrs	r3, r3, #6
 800b488:	4a09      	ldr	r2, [pc, #36]	@ (800b4b0 <vPortSetupTimerInterrupt+0x44>)
 800b48a:	3b01      	subs	r3, #1
 800b48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b48e:	4b04      	ldr	r3, [pc, #16]	@ (800b4a0 <vPortSetupTimerInterrupt+0x34>)
 800b490:	2207      	movs	r2, #7
 800b492:	601a      	str	r2, [r3, #0]
}
 800b494:	bf00      	nop
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	e000e010 	.word	0xe000e010
 800b4a4:	e000e018 	.word	0xe000e018
 800b4a8:	24000000 	.word	0x24000000
 800b4ac:	10624dd3 	.word	0x10624dd3
 800b4b0:	e000e014 	.word	0xe000e014

0800b4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b4c4 <vPortEnableVFP+0x10>
 800b4b8:	6801      	ldr	r1, [r0, #0]
 800b4ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b4be:	6001      	str	r1, [r0, #0]
 800b4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4c2:	bf00      	nop
 800b4c4:	e000ed88 	.word	0xe000ed88

0800b4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4ce:	f3ef 8305 	mrs	r3, IPSR
 800b4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b0f      	cmp	r3, #15
 800b4d8:	d915      	bls.n	800b506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4da:	4a18      	ldr	r2, [pc, #96]	@ (800b53c <vPortValidateInterruptPriority+0x74>)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4e4:	4b16      	ldr	r3, [pc, #88]	@ (800b540 <vPortValidateInterruptPriority+0x78>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	7afa      	ldrb	r2, [r7, #11]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d20b      	bcs.n	800b506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	607b      	str	r3, [r7, #4]
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	e7fd      	b.n	800b502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b506:	4b0f      	ldr	r3, [pc, #60]	@ (800b544 <vPortValidateInterruptPriority+0x7c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b50e:	4b0e      	ldr	r3, [pc, #56]	@ (800b548 <vPortValidateInterruptPriority+0x80>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d90b      	bls.n	800b52e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	603b      	str	r3, [r7, #0]
}
 800b528:	bf00      	nop
 800b52a:	bf00      	nop
 800b52c:	e7fd      	b.n	800b52a <vPortValidateInterruptPriority+0x62>
	}
 800b52e:	bf00      	nop
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	e000e3f0 	.word	0xe000e3f0
 800b540:	24000e4c 	.word	0x24000e4c
 800b544:	e000ed0c 	.word	0xe000ed0c
 800b548:	24000e50 	.word	0x24000e50

0800b54c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	@ 0x28
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b554:	2300      	movs	r3, #0
 800b556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b558:	f7fe fb98 	bl	8009c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b55c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6d0 <pvPortMalloc+0x184>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b564:	f000 f924 	bl	800b7b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b568:	4b5a      	ldr	r3, [pc, #360]	@ (800b6d4 <pvPortMalloc+0x188>)
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4013      	ands	r3, r2
 800b570:	2b00      	cmp	r3, #0
 800b572:	f040 8095 	bne.w	800b6a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d01e      	beq.n	800b5ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b57c:	2208      	movs	r2, #8
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4413      	add	r3, r2
 800b582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f003 0307 	and.w	r3, r3, #7
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d015      	beq.n	800b5ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f023 0307 	bic.w	r3, r3, #7
 800b594:	3308      	adds	r3, #8
 800b596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f003 0307 	and.w	r3, r3, #7
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <pvPortMalloc+0x6e>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	617b      	str	r3, [r7, #20]
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop
 800b5b8:	e7fd      	b.n	800b5b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d06f      	beq.n	800b6a0 <pvPortMalloc+0x154>
 800b5c0:	4b45      	ldr	r3, [pc, #276]	@ (800b6d8 <pvPortMalloc+0x18c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d86a      	bhi.n	800b6a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5ca:	4b44      	ldr	r3, [pc, #272]	@ (800b6dc <pvPortMalloc+0x190>)
 800b5cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5ce:	4b43      	ldr	r3, [pc, #268]	@ (800b6dc <pvPortMalloc+0x190>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5d4:	e004      	b.n	800b5e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d903      	bls.n	800b5f2 <pvPortMalloc+0xa6>
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1f1      	bne.n	800b5d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5f2:	4b37      	ldr	r3, [pc, #220]	@ (800b6d0 <pvPortMalloc+0x184>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d051      	beq.n	800b6a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	2208      	movs	r2, #8
 800b602:	4413      	add	r3, r2
 800b604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	1ad2      	subs	r2, r2, r3
 800b616:	2308      	movs	r3, #8
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d920      	bls.n	800b660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4413      	add	r3, r2
 800b624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	f003 0307 	and.w	r3, r3, #7
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00b      	beq.n	800b648 <pvPortMalloc+0xfc>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	613b      	str	r3, [r7, #16]
}
 800b642:	bf00      	nop
 800b644:	bf00      	nop
 800b646:	e7fd      	b.n	800b644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b65a:	69b8      	ldr	r0, [r7, #24]
 800b65c:	f000 f90a 	bl	800b874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b660:	4b1d      	ldr	r3, [pc, #116]	@ (800b6d8 <pvPortMalloc+0x18c>)
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	1ad3      	subs	r3, r2, r3
 800b66a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6d8 <pvPortMalloc+0x18c>)
 800b66c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b66e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6d8 <pvPortMalloc+0x18c>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	4b1b      	ldr	r3, [pc, #108]	@ (800b6e0 <pvPortMalloc+0x194>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	d203      	bcs.n	800b682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b67a:	4b17      	ldr	r3, [pc, #92]	@ (800b6d8 <pvPortMalloc+0x18c>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a18      	ldr	r2, [pc, #96]	@ (800b6e0 <pvPortMalloc+0x194>)
 800b680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	4b13      	ldr	r3, [pc, #76]	@ (800b6d4 <pvPortMalloc+0x188>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	431a      	orrs	r2, r3
 800b68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b696:	4b13      	ldr	r3, [pc, #76]	@ (800b6e4 <pvPortMalloc+0x198>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3301      	adds	r3, #1
 800b69c:	4a11      	ldr	r2, [pc, #68]	@ (800b6e4 <pvPortMalloc+0x198>)
 800b69e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6a0:	f7fe fb02 	bl	8009ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f003 0307 	and.w	r3, r3, #7
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <pvPortMalloc+0x17a>
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	60fb      	str	r3, [r7, #12]
}
 800b6c0:	bf00      	nop
 800b6c2:	bf00      	nop
 800b6c4:	e7fd      	b.n	800b6c2 <pvPortMalloc+0x176>
	return pvReturn;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3728      	adds	r7, #40	@ 0x28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	24004a5c 	.word	0x24004a5c
 800b6d4:	24004a70 	.word	0x24004a70
 800b6d8:	24004a60 	.word	0x24004a60
 800b6dc:	24004a54 	.word	0x24004a54
 800b6e0:	24004a64 	.word	0x24004a64
 800b6e4:	24004a68 	.word	0x24004a68

0800b6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d04f      	beq.n	800b79a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b6fa:	2308      	movs	r3, #8
 800b6fc:	425b      	negs	r3, r3
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	4413      	add	r3, r2
 800b702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	4b25      	ldr	r3, [pc, #148]	@ (800b7a4 <vPortFree+0xbc>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4013      	ands	r3, r2
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <vPortFree+0x46>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60fb      	str	r3, [r7, #12]
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	e7fd      	b.n	800b72a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00b      	beq.n	800b74e <vPortFree+0x66>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	60bb      	str	r3, [r7, #8]
}
 800b748:	bf00      	nop
 800b74a:	bf00      	nop
 800b74c:	e7fd      	b.n	800b74a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	4b14      	ldr	r3, [pc, #80]	@ (800b7a4 <vPortFree+0xbc>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4013      	ands	r3, r2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d01e      	beq.n	800b79a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d11a      	bne.n	800b79a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	685a      	ldr	r2, [r3, #4]
 800b768:	4b0e      	ldr	r3, [pc, #56]	@ (800b7a4 <vPortFree+0xbc>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	43db      	mvns	r3, r3
 800b76e:	401a      	ands	r2, r3
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b774:	f7fe fa8a 	bl	8009c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a8 <vPortFree+0xc0>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4413      	add	r3, r2
 800b782:	4a09      	ldr	r2, [pc, #36]	@ (800b7a8 <vPortFree+0xc0>)
 800b784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b786:	6938      	ldr	r0, [r7, #16]
 800b788:	f000 f874 	bl	800b874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b78c:	4b07      	ldr	r3, [pc, #28]	@ (800b7ac <vPortFree+0xc4>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3301      	adds	r3, #1
 800b792:	4a06      	ldr	r2, [pc, #24]	@ (800b7ac <vPortFree+0xc4>)
 800b794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b796:	f7fe fa87 	bl	8009ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b79a:	bf00      	nop
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	24004a70 	.word	0x24004a70
 800b7a8:	24004a60 	.word	0x24004a60
 800b7ac:	24004a6c 	.word	0x24004a6c

0800b7b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b7ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7bc:	4b27      	ldr	r3, [pc, #156]	@ (800b85c <prvHeapInit+0xac>)
 800b7be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	f003 0307 	and.w	r3, r3, #7
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00c      	beq.n	800b7e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	3307      	adds	r3, #7
 800b7ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f023 0307 	bic.w	r3, r3, #7
 800b7d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7d8:	68ba      	ldr	r2, [r7, #8]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	4a1f      	ldr	r2, [pc, #124]	@ (800b85c <prvHeapInit+0xac>)
 800b7e0:	4413      	add	r3, r2
 800b7e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b860 <prvHeapInit+0xb0>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b860 <prvHeapInit+0xb0>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b7fc:	2208      	movs	r2, #8
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	1a9b      	subs	r3, r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f023 0307 	bic.w	r3, r3, #7
 800b80a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4a15      	ldr	r2, [pc, #84]	@ (800b864 <prvHeapInit+0xb4>)
 800b810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b812:	4b14      	ldr	r3, [pc, #80]	@ (800b864 <prvHeapInit+0xb4>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2200      	movs	r2, #0
 800b818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b81a:	4b12      	ldr	r3, [pc, #72]	@ (800b864 <prvHeapInit+0xb4>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2200      	movs	r2, #0
 800b820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	1ad2      	subs	r2, r2, r3
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b830:	4b0c      	ldr	r3, [pc, #48]	@ (800b864 <prvHeapInit+0xb4>)
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	4a0a      	ldr	r2, [pc, #40]	@ (800b868 <prvHeapInit+0xb8>)
 800b83e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	4a09      	ldr	r2, [pc, #36]	@ (800b86c <prvHeapInit+0xbc>)
 800b846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b848:	4b09      	ldr	r3, [pc, #36]	@ (800b870 <prvHeapInit+0xc0>)
 800b84a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b84e:	601a      	str	r2, [r3, #0]
}
 800b850:	bf00      	nop
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	24000e54 	.word	0x24000e54
 800b860:	24004a54 	.word	0x24004a54
 800b864:	24004a5c 	.word	0x24004a5c
 800b868:	24004a64 	.word	0x24004a64
 800b86c:	24004a60 	.word	0x24004a60
 800b870:	24004a70 	.word	0x24004a70

0800b874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b87c:	4b28      	ldr	r3, [pc, #160]	@ (800b920 <prvInsertBlockIntoFreeList+0xac>)
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	e002      	b.n	800b888 <prvInsertBlockIntoFreeList+0x14>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	60fb      	str	r3, [r7, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d8f7      	bhi.n	800b882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	4413      	add	r3, r2
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d108      	bne.n	800b8b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	441a      	add	r2, r3
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	441a      	add	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d118      	bne.n	800b8fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	4b15      	ldr	r3, [pc, #84]	@ (800b924 <prvInsertBlockIntoFreeList+0xb0>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d00d      	beq.n	800b8f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	441a      	add	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	e008      	b.n	800b904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b924 <prvInsertBlockIntoFreeList+0xb0>)
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	e003      	b.n	800b904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d002      	beq.n	800b912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b912:	bf00      	nop
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	24004a54 	.word	0x24004a54
 800b924:	24004a5c 	.word	0x24004a5c

0800b928 <memset>:
 800b928:	4402      	add	r2, r0
 800b92a:	4603      	mov	r3, r0
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d100      	bne.n	800b932 <memset+0xa>
 800b930:	4770      	bx	lr
 800b932:	f803 1b01 	strb.w	r1, [r3], #1
 800b936:	e7f9      	b.n	800b92c <memset+0x4>

0800b938 <__libc_init_array>:
 800b938:	b570      	push	{r4, r5, r6, lr}
 800b93a:	4d0d      	ldr	r5, [pc, #52]	@ (800b970 <__libc_init_array+0x38>)
 800b93c:	4c0d      	ldr	r4, [pc, #52]	@ (800b974 <__libc_init_array+0x3c>)
 800b93e:	1b64      	subs	r4, r4, r5
 800b940:	10a4      	asrs	r4, r4, #2
 800b942:	2600      	movs	r6, #0
 800b944:	42a6      	cmp	r6, r4
 800b946:	d109      	bne.n	800b95c <__libc_init_array+0x24>
 800b948:	4d0b      	ldr	r5, [pc, #44]	@ (800b978 <__libc_init_array+0x40>)
 800b94a:	4c0c      	ldr	r4, [pc, #48]	@ (800b97c <__libc_init_array+0x44>)
 800b94c:	f000 f826 	bl	800b99c <_init>
 800b950:	1b64      	subs	r4, r4, r5
 800b952:	10a4      	asrs	r4, r4, #2
 800b954:	2600      	movs	r6, #0
 800b956:	42a6      	cmp	r6, r4
 800b958:	d105      	bne.n	800b966 <__libc_init_array+0x2e>
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b960:	4798      	blx	r3
 800b962:	3601      	adds	r6, #1
 800b964:	e7ee      	b.n	800b944 <__libc_init_array+0xc>
 800b966:	f855 3b04 	ldr.w	r3, [r5], #4
 800b96a:	4798      	blx	r3
 800b96c:	3601      	adds	r6, #1
 800b96e:	e7f2      	b.n	800b956 <__libc_init_array+0x1e>
 800b970:	0800bad0 	.word	0x0800bad0
 800b974:	0800bad0 	.word	0x0800bad0
 800b978:	0800bad0 	.word	0x0800bad0
 800b97c:	0800bad4 	.word	0x0800bad4

0800b980 <memcpy>:
 800b980:	440a      	add	r2, r1
 800b982:	4291      	cmp	r1, r2
 800b984:	f100 33ff 	add.w	r3, r0, #4294967295
 800b988:	d100      	bne.n	800b98c <memcpy+0xc>
 800b98a:	4770      	bx	lr
 800b98c:	b510      	push	{r4, lr}
 800b98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b992:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b996:	4291      	cmp	r1, r2
 800b998:	d1f9      	bne.n	800b98e <memcpy+0xe>
 800b99a:	bd10      	pop	{r4, pc}

0800b99c <_init>:
 800b99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99e:	bf00      	nop
 800b9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a2:	bc08      	pop	{r3}
 800b9a4:	469e      	mov	lr, r3
 800b9a6:	4770      	bx	lr

0800b9a8 <_fini>:
 800b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9aa:	bf00      	nop
 800b9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ae:	bc08      	pop	{r3}
 800b9b0:	469e      	mov	lr, r3
 800b9b2:	4770      	bx	lr
